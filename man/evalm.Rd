% Generated by roxygen2 (4.0.2): do not edit by hand
\name{pastem}
\alias{expression_interpolation}
\alias{pastem}
\alias{pastem0}
\alias{quotem}
\title{String and expression interpolation}
\usage{
pastem(..., sep = " ", pattern = "$", parenthesis.only = FALSE,
  env = parent.frame(), inherits = FALSE)

pastem0(..., pattern = "$")

quotem(x, pattern = "$", parenthesis.only = FALSE, env = parent.frame(),
  inherits = FALSE)

expression_interpolation(x = "", pattern = "$", parenthesis.only = FALSE,
  env = parent.frame(), inherits = FALSE)
}
\arguments{
\item{pattern}{pattern to use. Default to \code{$}}

\item{env}{environment in which to evalute the expressions enclosed in patterns. Default to current environement}

\item{inherits}{Default to FALSE}

\item{x}{any syntactically valid R expression}
}
\value{
The functions \code{pastem} implements string interpolations, similarly to Stata and Julia. The function \code{quotem} implements expression interpolation. The function \code{evalm} is a wrapper for \code{eval(quotem())} (and therefore corresponds to Julia macro \code{eval}).
}
\description{
String and expression interpolation
}
\details{
The functions replaces expressions starting with the \code{pattern} by evaluating them in the environment specified by \code{env} (susbtituting by nothing if not found)
Names in \code{...} are also substituted, ie \code{list(`$ok`="`$ok`")} will replace both \code{ok}.
}
\examples{
height <- 72
units <- "inches"
weight <- 230
a <- "ght"
pastem("My record indicates you are $height $(units).",
         "Your body mass index is $(round(703*weight/height^2,1))",
         "My record indicates you are $(hei$a) inches tall")
pastem("You are .(height) inches tall.This is below average", pattern = ".")
pastem("You are .(height) inches tall.This is below average", pattern = ".", parenthesis.only = TRUE)
library(data.table)
N <- 100
DT <- data.table(
  id = sample(5, N, TRUE),
  v1 = sample(5, N, TRUE),
  v2 = sample(1e6, N, TRUE)
)
newvar <- quote(temp)
myvar <- quote(v1)
byvar <- c("id", "v1")
quotem(DT[, list(`$newvar` = mean(`$myvar`)), by = `$byvar`])
evalm(DT[, list(`$newvar` = mean(`$myvar`)), by = `$byvar`])
}

