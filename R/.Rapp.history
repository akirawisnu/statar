library(pryr)
object_size(DT,DT1)
object_size(DT)
sessionInfo()
library(data.table)
library(dplyr)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
DT1 <- DT %>% mutate(y=mean(v1))
object_size(DT,DT1)
library(pryr)
object_size(DT,DT1)
library(data.table)
data.table:::shallow
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
data.table:::shallow(DT)
DT1<-data.table:::shallow(DT)
DT1[,y:=mean(v1)]
copy(DT,DT1)
library(pryr)
copy(DT,DT1)
object_size(DT,DT1)
DT
DT1
set(DT,id)
setkey(DT,id)
setkey(DT1,id)
Y <- DT[DT1]
object_size(DT,DT1,Y)
DT
DT %>% select(v1) %>% mutate_each(funs(mean),inplace=T)
library(dplyr)
library(data.table)#
x <- data.table(a = 11:15, b = 111:115, val1 = rnorm(5), key = c("a", "b"))#
y <- data.table(b = 101:120, val2 = letters[1:20], key = "b")
x
y
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
)
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE)                         # int in range [1,5]#
)
setkey(DT,id)
DT[J(id,v1)]
DT1 <- DT[,list(id,v1)]
DT[DT1]
names(DT[J(id,v1)])
names(DT[DT1])
setkey(DT,id)#
names(DT[DT[,list(id,v1)]])
names(DT[list(id,v1)])
library(data.table)
library(dplyr)
N=1e8; K=100#
set.seed(1)#
DF <- data.frame(#
  id = 1:N,#
  v1 =  sample(round(runif(100,max=100),4), N, TRUE)                       #
)
rm(DF)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
DT1 <- DT[,names(DT),with=FALSE]
copy(DT,DT1)
library(pryr)
object_size(DT,DT1)
DT1 <-DT[5*1e7]
DT1 <-DT[1:(5*1e7)]
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
library(data.table)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
   id = 1:N,#
   v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
library(plyr)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
library(pryr)
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
system.time(DT1 <- DT[,c("id")])
object_size(DT,DT1)
object_size(DT)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
DT
DT1
system.time(DT1 <- DT[,c("id","v1"),with=FALSE])
object_size(DT, DT1)
system.time(DT1 <- setDT(setDF(DT)[,c("id","v1")]))
object_size(DT, DT1)
library(dplyr)#
library(data.table)
DT1 <- DT %>% mutate(y=mean(v1))
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
DT1 <- DT %>% mutate(y=mean(v1))
object_size(DT,DT1)
library(pryr)
object_size(DT,DT1)
DT1 <- DT %>% select(v1)
object_size(DT,DT1)
DF1 <- DF %>% select(v1)#
object_size(DF,DF1)
library(pryr)
library(dplyr)#
library(data.table)#
#
N=1e8; K=100#
set.seed(1)#
DF <- data.frame(#
  id = 1:N,#
  v1 =  sample(round(runif(100,max=100),4), N, TRUE)                       #
)#
object_size(DF)#
1.2 GB#
DF1 <- DF %>% mutate(y=mean(v1))#
object_size(DF,DF1)#
2 GB#
DF1 <- DF %>% select(v1)#
object_size(DF,DF1)#
2 GB
names(DF1)
rm(ls())
rm(list=ls())
N=1e8; K=100#
set.seed(1)#
DF <- data.frame(#
  id = 1:N,#
  v1 =  sample(round(runif(100,max=100),4), N, TRUE)                       #
)#
object_size(DF)
DF1 <- DF %>% select(v1)
object_size(DF,DF1)
DT1<-DT[,list(id)]
setDT(DT)
setDT(DF)
DF1<-DT[,list(id)]
DF1<-DF[,list(id)]
object_size(DF,DF1)
object_size(DF)
library(data.table)
df1 <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame())}#
f(df1)#
df1[, temp := 1]
df1
df <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame())}#
f(df)#
df[, temp := 1]
df
df <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame()); df[, temp := 1]}
f(df)
df
df1 <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame()); df[, temp := 1]}
f(df1)
df1
df1 <- data.frame(id = 1:10)#
f <- function(df){#
      eval(substitute(setDT(df)),parent.frame())#
      df[, temp := 1]#
      }#
f(df1)
df1
library(dplyr)#
library(data.table)#
as.data.table(mtcars) %>% mutate(mean(1))#
mtcars %>% mutate(mean(1))
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
system.time( DT1 <- DT[,c("id","v1","v2"), with = FALSE] )#
object_size(DT,DT1)#
system.time( DT1 <- setDT(setDF(DT)[,c("id","v1","v2")]) ) #
system.time( setDT(DT)  )#
object_size(DT,DT1)
library(data.table)#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
system.time( DT1 <- DT[,c("id","v1","v2"), with = FALSE] )#
object_size(DT,DT1)#
system.time( DT1 <- setDT(setDF(DT)[,c("id","v1","v2")]) ) #
system.time( setDT(DT)  )#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
system.time( DT1 <- DT[,c("id","v1","v2"), with = FALSE] )#
object_size(DT,DT1)#
system.time( DT1 <- setDT(setDF(DT)[,c("id","v1","v2")]) ) #
system.time( setDT(DT)  )#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
object_size(DT[1:(.N-1)])
object_size(DT[1:(.N-1)],DT)
object_size(DT[1:.N/2],DT)
object_size(DT)
DT1 <- DT[1:.N/2]
object_size(DT,DT1)
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT1 <- DT[,c("id","v1","v2"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.N/2]#
object_size(DT,DT1)#
400 MB
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.N/2]#
object_size(DT,DT1)
DF1 <- DF[1:1e7/2]
setDF(DT)#
DT1 <- DT[,c("id","v1","v2")]) #
DT1 <- DT[1:1e7/2]
setDF(DT)#
DT1 <- DT[,c("id","v1","v2")]#
DT1 <- DT[1:1e7/2]
DT1 <- DT[1:(1e7/2)]
DT1 <- DT[1:(5e6)]
DT1 <- DT[1:(5e6),]
object_size(DT,DT1)
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[,c("id","v1","v2")]#
object_size(DT,DT1)#
DT1 <- DT[1:(5e6),]#
object_size(DT,DT1)#
#
setDT(DT)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[,c("id","v1","v2")]#
object_size(DT,DT1)#
#> 200#
DT1 <- DT[1:(5e6),]#
object_size(DT,DT1)#
#> 300#
#
setDT(DT)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
#> 400 MB#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)#
#> 210 MB
DT1 <- DT[1:.5e6,]
object_size(DT,DT1)#
210 MB
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[,c("id","v1","v2")]#
object_size(DT,DT1)#
#> 200 MB#
DT1 <- DT[1:(5e6),]#
object_size(DT,DT1)#
#> 300 MB#
#
setDT(DT)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
#> 400 MB#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)#
#> 210 MB
DT1
DT1 <- DT[,list(id,v1,v2,v3)] #
object_size(DT,DT1)
library(dplyr)
library(data.table)#
library(pryr)#
N = 1e7; K = 100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT1 <- DT %>% filter(v1>=3)
object_size(DT,DT1)
object_size(DT)
DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)]
setDT(DT)
DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)]
system.time(DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)])
system.time(lm(v3~v2,DT[v1==3]))
system.time(DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)])
library(data.table)#
library(pryr)#
N = 1e7; K = 100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[1:(5e6),]#
object_size(DT, DT1)#
#> 300 MB#
#
setDT(DT)#
DT1 <- DT[1:.5e6]#
object_size(DT ,DT1)#
#> 210 MB
DT1 <- DT[3:.5e6]
object_size(DT,DT1)
library(dplyr)
?order_by
?lag
?lead
?break
break=function(x){x+2}
break <- function(x){x+2}
?separate
?culster
?cluster
devtools::document("/Users/Matthieu/Dropbox/github/statar-package")
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param units computes lag in units of "day", "week", "month", "quarter" or "year" periods. Should be used when \code{along_with} is a date. #
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # Unbalanced panel#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#
#' # Units#
#' DT[, date := as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "08/21/1992"), "%m/%d/%Y")]#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, units = "month", along_with = date)) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with('0001-01-01')#
    if (unitsc=="day"){#
      return(lead(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
#
  if (!is.null(along_with)) {#
    index <- match(along_with - n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lag, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with('0001-01-01')#
    if (unitsc=="day"){#
      return(lag(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
  if (!is.null(along_with)) {#
    index <- match(along_with + n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
date <- as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "08/21/1992"), "%m/%d/%Y")
date
as.Date(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y")
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param units computes lag in units of "day", "week", "month", "quarter" or "year" periods. Should be used when \code{along_with} is a date. #
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # along_with#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#
#' # units#
#' value <- c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' date <- as.Date(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y")#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date, units = "month")) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with("0001-01-01")#
    if (unitsc=="day"){#
      return(lead(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
#
  if (!is.null(along_with)) {#
    index <- match(along_with - n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lag, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with("0001-01-01")#
    if (unitsc=="day"){#
      return(lag(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
#
  if (!is.null(along_with)) {#
    index <- match(along_with + n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
library(dplyr)
library(data.table)
df <- data.frame(#
   date = 1:N,#
   id =  sample(5, N, TRUE),   #
   value =  sample(1e6, N, TRUE)                   #
 )#
# This solution#
system.time(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id])#
#> user  system elapsed #
#> 0.186   0.007   0.157  #
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#> user  system elapsed #
#> 0.186   0.007   0.200 #
# pure data.table solution#
setDF(df)#
system.time(setkey(setDT(df), id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#> user  system elapsed #
#> 0.113   0.023   0.147 #
#
# pure dplyr solution#
setDF(df)#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#> user  system elapsed #
#> 1.148   0.057   1.197
N <- 2e6#
df <- data.frame(#
   date = 1:N,#
   id =  sample(5, N, TRUE),   #
   value =  sample(1e6, N, TRUE)                   #
 )#
# This solution#
system.time(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id])#
#> user  system elapsed #
#> 0.186   0.007   0.157  #
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#> user  system elapsed #
#> 0.186   0.007   0.200 #
# pure data.table solution#
setDF(df)#
system.time(setkey(setDT(df), id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#> user  system elapsed #
#> 0.113   0.023   0.147 #
#
# pure dplyr solution#
setDF(df)#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#> user  system elapsed #
#> 1.148   0.057   1.197
library(microbenchmark)
microbenchmark(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id],times=10L)
N <- 2e6#
    df <- data.frame(#
       date = 1:N,#
       id =  sample(5, N, TRUE),   #
       value =  sample(1e6, N, TRUE)                   #
     )#
    # This solution#
    microbenchmark(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id])#
    #> user  system elapsed #
    #> 0.186   0.007   0.157  #
    microbenchmark(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
    #> user  system elapsed #
    #> 0.186   0.007   0.200 #
    # pure data.table solution#
    setDF(df)#
    microbenchmark(setkey(setDT(df), id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
    #> user  system elapsed #
    #> 0.113   0.023   0.147 #
#
    # pure dplyr solution#
    setDF(df)#
    microbenchmark(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
    #> user  system elapsed #
    #> 1.148   0.057   1.197
# This solution#
    setDT(df)#
    microbenchmark(df[, lag_value := lag(value, 1, along_with = date), by = id])#
    #> user  system elapsed #
    #> 0.186   0.007   0.157  #
    setDF(df)#
    microbenchmark(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
    #> user  system elapsed #
    #> 0.186   0.007   0.200 #
    # pure data.table solution#
    setDT(df)#
    microbenchmark(setkey(df, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
    #> user  system elapsed #
    #> 0.113   0.023   0.147 #
#
    # pure dplyr solution#
    setDF(df)#
    microbenchmark(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
    #> user  system elapsed #
    #> 1.148   0.057   1.197
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
   }#
# This solution against pure data.table#
setDT(df)#
microbenchmark(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>      min       lq   median       uq      max neval#
#> 39.23331 45.63224 48.26503 51.30011 88.56598   100 #
microbenchmark(setkey(df, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>      min       lq   median       uq      max neval#
#> 162.0913 179.7229 191.2539 230.4258 1663.312   100
setDF(df)#
    microbenchmark(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
    #>      min       lq   median       uq      max neval#
    #> 97.22887 111.8242 121.0254 141.8194 1090.357   100#
#
    microbenchmark(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))
df
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>     min       lq   median       uq      max neval#
#> 98.4322 105.3136 110.1891 116.5764 320.0336   100#
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>      min       lq   median       uq      max neval#
#> 135.2102 145.7594 161.0235 188.1168 390.2336   100#
#
# This solution against pure dplyr#
setDF(df)#
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#>      min       lq   median       uq      max neval#
#> 92.40668 95.37822 99.20339 103.0889 140.8624   100#
#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#>      min       lq   median       uq      max neval#
#> 2.422102 3.071185 3.281669 3.631934 4.818416   100
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>   user  system elapsed #
#>  0.201   0.026   0.228 #
#
# This solution against pure dplyr#
setDF(df)#
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#>   user  system elapsed #
#>  0.156   0.028   0.186 #
#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#>   user  system elapsed #
#>  3.301   0.086   3.363
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ]))
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
setDT(df)
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>   user  system elapsed #
#>  0.201   0.026   0.228 #
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>   user  system elapsed #
#>  0.201   0.026   0.228
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
all.equal(setkey(df),df1)
all.equal(setkey(df,id,date),df1)
all.equal(setkey(df[, lag_value := lag(value, 1, along_with = date), by = id],id,date),setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
df1<- setkey(df[, lag_value := lag(value, 1, along_with = date), by = id],id,date)
df2<- setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
df2<- setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ]
df1
df2
dfdf1[!is.na(value_lagged)]
df1[!is.na(value_lagged)]
df[!is.na(value_lagged)]
lag <- function(x, n = 1L, along_with){#
 index <- match(along_with - n, along_with, incomparable = NA)#
 out <- x[index]#
 attributes(out) <- attributes(x)#
 out#
}
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
setDF(df)#
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#>   user  system elapsed #
#>  0.156   0.028   0.186 #
#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#>   user  system elapsed #
#>  3.301   0.086   3.363
?biglm
library(biglm)
install.packages("biglm")
?biglm
library(biglm)
?biglm
FALSE && NA
true || NA
TRUE || NA
library(tidyr)
library(statar)
df <- data.frame (id=c(1,1), variable = c("v1","v1"), value = c(1,3))
df
spread(df, variable, value)
dt <- as.data.table(df)
dt <- data.table(df)
library(data.table)
dt <- as.data.table(df)
spread(df, variable, value)
spread(dt, variable, value)
library(tidyr)
?expand
devtools::install_github("hadley/tidyr")
f <-function(){#
on.exit(print("salut"))#
}
f(1)
f()
library(tidyr)
devtools::install_github("hadley/tidyr")
library(tidyr)
setwd("/Users/Matthieu/Dropbox/Symlink")#
devtools::install_github("matthieugomez/statar")#
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))#
assignInNamespace("cedta.override",#
                  c(data.table:::cedta.override,"IRkernel"),#
                  "data.table")
library(data.table)#
#
#setcols keeps certain columns#
DT <- data.table(#
  id = c(1,2),#
  v1 = c(1,1),#
  v2 = c(2,1)#
)#
setcols(DT, id, v2)#
setcols(DT, -id)#
#
# sum_up prints detailed summary statistics (corresponds to Stata summarize)#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT)#
sum_up(DT, v2, d = T)#
sum_up(DT, starts_with("v"), by = v1)
DT <- data.table(a = rep(1:2, each = 3), b = 1:6)#
duplicates(DT, by = a)#
duplicates(DT, by = list(a,b))
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
duplicates <- function(x, ..., by = NULL, gen = "N"){#
  duplicates_(x, .dots = lazyeval::lazy_dots(...), by = substitute(by), gen = gen)#
}#
#
#' @export#
#' @rdname duplicates#
duplicates_ <- function(x, ..., .dots, by = NULL, gen = "N"){#
  stopifnot(is.data.table(x))#
  if (gen %in% names(x))   stop(paste("A variable named", gen, "already exists."))#
  if (anyDuplicated(names(x)))  stop("x has duplicate column names")#
  dots <- lazyeval::all_dots(.dots, ...)#
  byvars <- names(select_vars_(names(x), by))#
  if (length(byvars)==0){#
    byvars <- copy(names(x))#
  }#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  x[, (gen) := .N-1,  by = c(byvars)]#
  on.exit(x[, (gen) :=NULL])#
  ans <- eval(substitute(x[NN>0, c(gen, byvars, vars), with = FALSE], list(NN = as.name(gen))))#
  length <- nrow(ans)#
  if (length >0){#
    setkeyv(ans, c(gen, byvars))#
    n_groups <- length- sum(duplicated(ans))#
    message(paste(n_groups,"groups have duplicates"))#
    setcolorder(ans, c(gen, byvars, setdiff(names(ans), c(byvars, gen))))#
    return(ans)#
  }#
  else{#
    message("There are no duplicates")#
  }#
}
DT <- data.table(a = rep(1:2, each = 3), b = 1:6)#
duplicates(DT, by = a)#
duplicates(DT, by = list(a,b))
