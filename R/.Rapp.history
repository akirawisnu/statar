DT[,v4:=1]
DT[J(v1,v4),a:=v4]
DT[J(v1,v4),a:=v4,allow.cartesian=TRUE]
DT
DT[J(v1,v4),a:=i.v4,allow.cartesian=TRUE]
setkey(DT,v1)
DT
DT[J(v1,v2),a:=i.v2]
DT[J(v1,v2),a:=i.v2,allow.cartesian=T]
DT[J(v1,v2),a:=i.v2,allow.cartesian=TRUE]
DT
DT[J(v1,v2),a:=v2,allow.cartesian=TRUE]
DT
DT[J(v1,v2=v1+1),a:=v2,allow.cartesian=TRUE]
DT
N<-1000#
DT <- data.table(#
  id = sample(c("id01","id02","id03"),N, TRUE),     #
  v1 = sample(5, N, TRUE),                          #
  v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
  )
setkey(DT,v1)
DT[J(v1,v2=v1+1),a:=i.v2,allow.cartesian=TRUE]
DT
DT[J(v1,v4=v1+1),a:=i.v4,allow.cartesian=TRUE]
DT
DT[J(v1,v4=v1-1),a:=i.v4,allow.cartesian=TRUE]
DT
DT[J(v1,v4=v1-1),a:=v4,allow.cartesian=TRUE]
DT
DT[J(v1,v4=v1),a:=v4,allow.cartesian=TRUE]
DT
DT[J(v1,v4=v1),allow.cartesian=TRUE]
?data.table
DT[J(v1,v4=v1),allow.cartesian=TRUE]
DT[J(v1,v4=v4-1),v:=i.v4, allow.cartesian=TRUE]
DT[J(v1,v4=v1-1),v:=i.v4, allow.cartesian=TRUE]
DT
N<-1000#
DT <- data.table(#
  id = sample(c("id01","id02","id03"),N, TRUE),     #
  V1 = sample(5, N, TRUE),                          #
  V2 =  sample(round(runif(100,max=100),4), N, TRUE) #
  )
setkey(DT,V1)
DT[J(V1)]
DT[J(V1,V2),allow.cartesian=TRUE]
DT[J(V1,V3=V2),allow.cartesian=TRUE]
N<-1000#
DT <- data.table(#
  id = sample(c("id01","id02","id03"),N, TRUE),     #
  v1 = sample(5, N, TRUE),                          #
  v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
  )
setkey(DT,v1)#
		DT[J(v1=v1,v2=v2)]
DT
DT[J(v1=v1,v2=v2),allow.cartesian=TRUE]
DT[J(v1=v1,v2=1:nrow(DT)),allow.cartesian=TRUE]
DT[J(v1=1:5,v2=5:1),allow.cartesian=TRUE]
DT[J(v1=1:5,5:1),allow.cartesian=TRUE]
?data.table
DT[J(v1=1:5,v4=5:1),v5:=i.v4,allow.cartesian=TRUE]
DT
DT[J(v1=1:5,v4=5:1),v6:=v4,allow.cartesian=TRUE]
DT
?mutate_each_q
library(dplyr
)
?mutate_each_q
mutate_each_q
?colwise
?new.env
?eval
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
call=quote(mean(x))
call <- quote(mean(a))
eval(call,sample_df,parent.frame())
?eval
mutate_q
debug(mutate_each)
sample_df %>% mutate_each(funs(mean))
debug(mutate_each_q)
funs
vars
eval(call,tbl,env)
debug(mutate_each_q)
sample_df %>% mutate_each(funs(mean))
call
eval(call,tbl,enclos=env)
env
tbl
call
a
eval(call,tbl)
env=list2env(tblt,parent=parent.frame())
env=list2env(tbl,parent=parent.frame())
eval(call,env)
eval(call,tbl,parent.frame())
eval(call,tbl,env)
eval(call,tbl,enclos = env)
call
sample_df %>% mutate_each(funs(mean))
eval(call,tbl)
eval(call,tbl,env)
?eval
eval(call,tbl, enclos = env)
eval(call, envir = tbl, enclos = env)
sample_df %>% mutate_each(funs(mean))
eval(call,list2env(tbl,parent=env))
call
tbl
env
is.identical(env,parent.frame())
eval(call,tbl)
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
library(dplyr)
debug(mutate_each)
debug(mutate_each_q)
sample_df %>% mutate_each(funs(mean))
eval(call,tbl,env)
eval(call,tbl)
list2env(tbl,parent=env)
eval(call,list2env)
eval(call,list2env(tbl,parent=env))
?list2env
list2env(tbl,parent=env)
sample_df %>% mutate_each(funs(mean))
funs
vars
colwiseq
colwise_q
eval(call,env)
eval(call,tbl)
eval(call)
funs
?as.fun_list
as.fun_list
colwise_q
funs
vars
is.list(vars)
funs
as.fun_list
debug(as.fun_list)
sample_df %>% mutate_each(funs(mean))
debug(as.fun_list.fun_list)
sample_df %>% mutate_each(funs(mean))
getAnywhere(as.fun_list.fun_list
)
sample_df %>% mutate_each(funs(mean))
funs
function(funs){funs;print("ok")}
f=function(funs){funs;print("ok")}
debug(f)
f(funs(mean))
funs
f=mean
as.character(f)
as.character(f[[1]])
as.character(body(f)[[1]])
as.character(body(mean)[[1]])
as.character(body(f)[[1]])
as.character(body(f)[[2]])
as.character(body(f)[[3]])
as.character(body(f)[[1]])
as.character(body(f)[[2]])
fun_calls(mean)
dplyr:::fun_calls(mean)
dplyr::::fun_calls(mean)
dplyr:::fun_calls(mean)
dplyr::fun_calls(mean)
dplyr:::fun_calls(mean)
fun_calls <- function(f) {#
  if (is.function(f)) {#
    fun_calls(body(f))#
  } else if (is.call(f)) {#
    fname <- as.character(f[[1]])#
#
    # Calls inside .Internal are special and shouldn't be included#
    if (identical(fname, ".Internal")) return(fname)#
#
    unique(c(fname, unlist(lapply(f[-1], fun_calls), use.names = FALSE)))#
  }#
}
fun_calls(mean)
is.call(body(mean))
fname <- fun_calls(mean)
fname
f <-mean
lapply(f[-1], fun_calls)
f=body(mean)
lapply(f[-1], fun_calls)
f
fname
f[-1]
f
str(f)
f[[1]]
f[[2]]
f[[3]]
unique(c(fname, unlist(lapply(f[-1], fun_calls), use.names = FALSE)))
unlist(lapply(f[-1], fun_calls)
)
unlist(lapply(f[-1], fun_calls))
fun_calls(mean)
f(x){fun_calls(x)}
f = function(x){fun_calls(x)}
f(x)
f(1)
f(mean)
mutate_each
funs
funs_q
funs(mean)
funs_q(quote(mean))
m=quote(mean)
funs_q(m)
funs(mean)
funs_q(mean)
is.call(quote(mean))
quote(mean)
?dots
dots
dplyr:: dots
dplyr:::dots
dplyr:::dots(mean)
funs_q(list(mean))
funs_q(quote(list(mean)))
funs(mean)
quote(mean)
is.call(mean)
quote(mean(x,y))
is.call(mean)
is.call(quote(mean(x,y)))
call=quote(mean(x,y))
names(calls)
names(call)
names2(call)
dplyr:::names2(call)
make_call(call)
dplyr:::make_call(call)
funs(mean)
c("mean")
as.fun_list(mean)
as.fun_list(funs(mean))
dplyr:::as.fun_list(funs(mean))
undebug(as.fun_list)
undebug(dplyr:::as.fun_list)
dplyr:::as.fun_list(funs(mean))
?debug
isdebugged(dplyr:::as.fun_list)
undebug(dplyr:::as.fun_list)
dplyr:::as.fun_list(funs(mean))
undebug(funs)
dplyr:::as.fun_list(funs(mean))
undebug(as.fun_list)
f <- function(abc = 1, def = 2, ghi = 3) {#
  list(sys = sys.call(), match = match.call())#
}
f(d=2,2)
as.call(list(quote(mean), quote(1:10)))
as.call(list("mean", quote(1:10)))
library(pryr)
library(dots)
dots
?alist
funs(mean)
library(dplyr)
funs(mean)
as.fun_list(funs(mean))
dplyr:::as.fun_list(funs(mean))
dplyr:::as.fun_list("mean")
dplyr:::as.fun_list("mean",env=parent.frame())
L <- list(quote(mutate), .data = substitute(DF), quote(mean(v1)))
names(L)
Lc= as.call(L)
Lc
funs(mean)
?mutate
"mean"
matches("width")
library(dplyr)
matches("width")
x <- quote(read.csv("important.csv", row.names = FALSE))
x
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
matches("width")
sample_df %>% summarize(funs(mean),matches("with"))
sample_df %>% summarize_each(funs(mean),matches("with"))
sample_df %>% summarise_each(funs(mean),matches("with"))
sample_df %>% summarise_each(funs(mean),matches("a"))
debug(summarise_each)
sample_df %>% summarise_each(funs(mean),matches("a"))
dots(...)
debug(summarise_each_q)
vars
sample_df %>% summarise_each(funs(mean),matches("a"))
undebug(summarise_eachq)
undebug(summarise_each)
sample_df %>% summarise_each(funs(mean),matches("a"))
undebug(summarise_each_q)
undebug(summarise_eachq)
sample_df %>% summarise_each(funs(mean),matches("a"))
sample_df %>% summarise_each(funs(mean),matches("ok"))
sample_df %>% summarise_each(funs(mean),starts_with("ok"))
sample_df %>% summarise_each("mean",starts_with("ok"))
sample_df %>% mutate_each("mean",starts_with("ok"))
?summarise
debug(summarse_each_q)
debug(summarise_each_q)
sample_df %>% summarise_each("mean",starts_with("ok"))
funs
attr(funs,"env")
?attr
sample_df %>% summarise_each("mean",9)
library(hflights)
hflights_df <- tbl_df(hflights)
hflights_df %>% summarise_each(funs(mean),starts_with("ok"))
sample_df %>% summarize_each(funs(mean),matches("ok"))
library(dpryr)#
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))#
sample_df %>% summarise_each(funs(mean),matches("ok"))
\
undebug(summarise_each_q)
library(dpryr)#
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))#
sample_df %>% summarise_each(funs(mean),matches("ok"))
sample_df %>% summarise_each(funs(mean),1)
sample_df %>% summarise_each(funs(mean),9)
sample_df %>% summarise_each(funs(mean),salut)
sample_df %>% summarise_each(funs(mean),"salut")
>sample_df %>% summarise_each(funs(mean),"ok")
sample_df %>% summarise_each(funs(mean),"ok")
sample_df
?summarise
sample_df %>% summarise_each(funs(mean),ok)
?mutate
sample_df %>% summarise_each(funs(mean),-matches("a","b","c"))
sample_df %>% summarise_each(funs(mean),-matches("a|b|c"))
?mutate_each_q
sample_df %>% summarise_each_q("mean",-matches("a|b|c"))
sample_df %>% summarise_each_q("mean","ok")
sample_df %>% summarise_each_q("mean",quote(a))
sample_df %>% mutate_each_q("mean",quote(a))
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))#
sample_df %>% summarise_each_q("mean",a)
sample_df <- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))
sample_df %>% summarise_each("mean",a)
sample_df %>% mutate_each("mean",a)
remove.packages("dplyr")
install.packages("dplyr")
sample_df %>% mutate_each("mean",a)
sample_df %>% mutate("mean",a)
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr")
?contrains
?contains
library(dplyr)
?contains
?select
?select_
?select
library(dplyr)
?select
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
select_(DT,contains("v"))
library(data.table)
select_(DT,contains("v"))
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
select_(DT,contains("v"))
select(DT,contains("v"))
contains("v"))
?contains
selevt_vars(names(DT),"Petal.Length")
select_vars(names(DT),"Petal.Length")
select_vars(names(DT),"v2")
select_vars(names(DT),"v1")
traceback()
names(DT)
select_vars(names(DT),contrains("v"))
select_vars(names(DT),contains("v"))
dplyr:::names2
?setNames
library(data.table)
?setNames
debug(select_vars_)
select_vars(names(DT),contains("v"))
vars
as.list(seq_along(vars))
names_list
ind_list
names_list
select_funs
debug(mutate_each_q(sample_df,funs(mean),starts_with("v")))
debug(mutate_each)
mutate_each(sample_df,funs(mean),starts_with("v")))
mutate_each(sample_df,funs(mean),starts_with("v"))))
mutate_each(sample_df,funs(mean),starts_with("v"))
vars
library(pryr)#
library(dplyr)
library(data.table)#
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
setDF(DT)#
DT1 <- DT#
setDT(DT)#
setDT(DT1)
DT1[y:=mean(v1)]
DT1[,y:=mean(v1)]
object_size(DT,DT1)
DT
DT1
?copy
DT = data.table(id    = c(1,1,1,1,1,2,2),#
                 date  = c(1992,NA,1991,1990,1994,1992,1991),#
                 value = c(4.1,4.5,3.3,5.3,3.0,3.2,5.2)#
                )#
 setkey(DT, id, date)#
 DT[, value_lagged := DT[J(id, date-1), value], ]
DT
DT = data.table(id    = c(1,1,1,1,1,2,2),#
                 date  = c(1992,NA,1991,1990,1994,1992,1991),#
                 value = c(4.1,4.5,3.3,5.3,3.0,3.2,5.2)#
                )#
 setkey(DT, id, date)#
 DT[, value_lagged := DT[J(id, date-1), value] ]
DT
DT[1,value:=NA]
DT
DT[is.na(date), val_lag := NA]
DT
DT = data.table(id    = c(1,1,1,1,1,2,2),#
                 date  = c(1992,NA,1991,1990,1994,1992,1991),#
                 value = c(4.1,4.5,3.3,5.3,3.0,3.2,5.2)#
                )#
 setkey(DT, id, date)#
 DT[, value_lagged := DT[J(id, date-1), value] ]
DT
value_lagged=value
value_lagged="value"
DT[value==NA]
DT[value_lagged==NA]
DT[(value_lagged)==NA]
DT[c(value_lagged)==NA]
DT
rm(value_lagged)
value=date
value="date"
DT[value==1990]
DT[(value)==1990]
DT[c(value)==1990]
DT[date==1990]
DT[eval(substitute(v==1990,list(as.name("date"))]
DT[eval(substitute(v==1990,list(as.name("date")))]
DT[eval(substitute(v==1990,list(as.name(v="date")))]
DT[eval(substitute(v==1990,list(as.name(v="date"))]
DT[eval(subs(v==1990,list(as.name(v="date"))]
DT[eval(subs(v==1990,list(as.name(v="date"))))]
DT[eval(subs(v==1990,list(as.name(v="date")))]
DT[eval(subs(v==1990,list(as.name(v="date"))))]
DT[eval(subs(v==1990,list(v=as.name(v="date"))))]
DT[eval(subs(v==1990,list(v=as.name("date"))))]
DT[eval(subs(v==1990,list(v=as.name("date"))))]#
2#
How do I perform a semi-join with data.table? A semi-join is like an inner join except that it only returns the columns of X (not also those of Y), and does not repeat the rows of X to match the rows of Y. For example, the following code performs an inner join:#
#
x <- data.table(x = 1:2, y = c("a", "b"))#
setkey(x, x)
x
w = unique(x[y,which=TRUE])
x <- data.table(x = 1:2, y = c("a", "b"))#
setkey(x, x)#
y <- data.table(x = c(1, 1), z = 10:11)
w = unique(x[y,which=TRUE])
w
w = unique(x[y))
w = unique(x[y])
w
bdt <- as.data.table(baseball)
library(plyr)
bdt <- as.data.table(baseball)
bdt
bdt[bdt[, .I[g == max(g)], by = id]$V1]
bdt[, .I[g == max(g)], by = id]
library(dplyr)
setnames(bdt,"id","V1")
bdt
?setnames
setnames
bdt %>% group_by(V1) %>% filter(g==max(g))
bdt %>% group_by(r) %>% filter(g==max(g))
bdt %>% group_by(V1) %>% filter(g==max(g))
debug
debug(filter)
bdt %>% group_by(V1) %>% filter(g==max(g))
indices
bdt %>% group_by(V1) %>% filter(g==max(g))
setnames(bdt,V1,id)
setnames(bdt,"V1","id")
bdt[,r:=V1]
setnames(bdt,"r","V1")
bdt %>% group_by(V1) %>% filter(g==max(g))
bdt %>% group_by(r) %>% filter(g==max(g))
bdt %>% group_by(id) %>% filter(g==max(g))
bdt %>% group_by(bb) %>% filter(g==max(g))
DT
setnames("date","id")
setnames(DT,"date","id")
DT$id
library(hflights)#
dim(hflights)
setnames(DT,"TailNum","V1")
DT=as.data.table(hflights)
setnames(DT,"TailNum","V1")
DT %>% group_by(TailNum) %>% summarise(planes)
DT %>% group_by(V1) %>% summarise(planes)
DT
DT %>% group_by(V1) %>% summarise(Cancelled)
DT
DT=as.data.table(hflights)
setnames(DT,"Year","V1")
DT %>% group_by(V1) %>% summarise(Cancelled)
DT %>% group_by(V1) %>% filter(planes=max(planes))
DT
DT %>% group_by(V1) %>% filter(Canelled=max(Cancelled))
library(dplyr)#
DT <- as.data.table(hflights)#
setnames(DT,"DayOfWeek","V1")
DT
DT %>% group_by(V1) %>% filter(ArrTime==max(ArrTime))
DT %>% group_by(V1) %>% filter(n()==1)
DT %>% group_by(V1) %>% summarise(ArrTime)
DT %>% group_by(V1) %>% summarise(ArrTime,plane)
DT %>% group_by(V1) %>% summarise(ArrTime,Month)
library(dplyr)#
DT <- as.data.table(hflights)#
setnames(DT,"DayOfWeek","V1")#
DT %>% group_by(V1) %>% summarise(ArrTime)
?summarise
summarise
?quickdf
library(dplyr)#
library(data.table)#
DT <- as.data.table(hflights)#
setnames(DT,"DayOfWeek","V1")
DT %>% group_by(V1) %>% summarise(ArrTime)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)
setnames(DT,"DayOfWeek","V1")
DT %>% group_by(V1) %>% summarise(ArrTime)
DT %>% group_by(V1) %>% filter(ArrTime==1502)
debug(filter)
DT %>% group_by(V1) %>% filter(ArrTime==1502)
call
eval(call, env)
DT1 <- DT %>% group_by(V1) %>% summarise(ArrTime)
tabulate(DT1$V1)
table(DT1$V1)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
setnames(DT,"DayOfWeek","V1")#
DT1 <- DT %>% group_by(V1) %>% filter(ArrTime==1502)
DT1
table(DT1$v1)
table(DT1$V1)
filter(ArrTime==1502)
DT %>% filter(ArrTime==1502)
setwd("/Users/Matthieu/Dropbox/Symlink")#
suppressMessages(library("magrittr"))#
suppressMessages(library("data.table"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
library(devtools)#
devtools::install_github("matthieugomez/stataR")#
suppressMessages(library(stataR))
DT <- data.table(#
  id = c(1, 1, 1, 1, 1, 2, 2), #
  date = c(1992, NA, 1991, 1990, 1994, 1992, 1991), #
  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
DT %>% epanel(id="id",t="date",L1.value)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
epanel=function(DT,id,time,fun,gen=func){#
    func=paste(as.character(substitute(fun)),collapse="")#
    timevar=as.character(substitute(time))#
    idsub = substitute(id)#
    idvars = idvars_q(idsub,names(DT))#
    if (eval(substitute(!nrow(DT[is.na(t)]))),list(t=as.name(timevar)))) stop(paste(timevar,"should not have missing values"))#
    if (func=="fill"){#
        setkeyv(DT,c(idvars,timevar))#
        eval(substitute(#
            ans <- DT[list(seq.int(t[1L], t[.N])), by = idvars],#
            list(t=as.name(timevar))#
            ))#
        setnames(ans,c(idvars,timevar))#
        setkeyv(ans,c(idvars,timevar))#
        return(DT[ans])#
    }#
    match <- str_match(func,"(L|F)([0-9]*)\\.(.*)")#
     if (!is.na(match[1,1])){#
        valuevar=match[1,4]#
        setkeyv(DT,c(idvars,timevar))#
        DT1 <- DT[,c(idvars,timevar,valuevar), with=FALSE]#
        if (match[1,2]=="L") operation="+" else operation="-"#
        operation= parse(text=paste0(timevar,operation,match[1,3]))#
        DT1[,(timevar):= eval(operation)]#
        DT[DT1,(gen):=eval(parse(text=paste0("i.",valuevar)))]#
        if (!gen %chin% names(DT)) DT[,(gen):=NA]#
    }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
epanel=function(DT,id,time,fun,gen=func){#
    func=paste(as.character(substitute(fun)),collapse="")#
    timevar=as.character(substitute(time))#
    idsub = substitute(id)#
    idvars = idvars_q(idsub,names(DT))#
    if (eval(substitute(!nrow(DT[is.na(t)]))),list(t=as.name(timevar))) stop(paste(timevar,"should not have missing values"))#
    if (func=="fill"){#
        setkeyv(DT,c(idvars,timevar))#
        eval(substitute(#
            ans <- DT[list(seq.int(t[1L], t[.N])), by = idvars],#
            list(t=as.name(timevar))#
            ))#
        setnames(ans,c(idvars,timevar))#
        setkeyv(ans,c(idvars,timevar))#
        return(DT[ans])#
    }#
    match <- str_match(func,"(L|F)([0-9]*)\\.(.*)")#
     if (!is.na(match[1,1])){#
        valuevar=match[1,4]#
        setkeyv(DT,c(idvars,timevar))#
        DT1 <- DT[,c(idvars,timevar,valuevar), with=FALSE]#
        if (match[1,2]=="L") operation="+" else operation="-"#
        operation= parse(text=paste0(timevar,operation,match[1,3]))#
        DT1[,(timevar):= eval(operation)]#
        DT[DT1,(gen):=eval(parse(text=paste0("i.",valuevar)))]#
        if (!gen %chin% names(DT)) DT[,(gen):=NA]#
    }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
epanel=function(DT,id,time,fun,gen=func){#
    func=paste(as.character(substitute(fun)),collapse="")#
    timevar=as.character(substitute(time))#
    idsub = substitute(id)#
    idvars = idvars_q(idsub,names(DT))#
    if (eval(substitute(!nrow(DT[is.na(t)]),list(t=as.name(timevar))))) stop(paste(timevar,"should not have missing values"))#
    if (func=="fill"){#
        setkeyv(DT,c(idvars,timevar))#
        eval(substitute(#
            ans <- DT[list(seq.int(t[1L], t[.N])), by = idvars],#
            list(t=as.name(timevar))#
            ))#
        setnames(ans,c(idvars,timevar))#
        setkeyv(ans,c(idvars,timevar))#
        return(DT[ans])#
    }#
    match <- str_match(func,"(L|F)([0-9]*)\\.(.*)")#
     if (!is.na(match[1,1])){#
        valuevar=match[1,4]#
        setkeyv(DT,c(idvars,timevar))#
        DT1 <- DT[,c(idvars,timevar,valuevar), with=FALSE]#
        if (match[1,2]=="L") operation="+" else operation="-"#
        operation= parse(text=paste0(timevar,operation,match[1,3]))#
        DT1[,(timevar):= eval(operation)]#
        DT[DT1,(gen):=eval(parse(text=paste0("i.",valuevar)))]#
        if (!gen %chin% names(DT)) DT[,(gen):=NA]#
    }#
}
