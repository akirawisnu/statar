ivreg(v3~v2 | v1,DT)
ivreg(v3 ~ v2 | v1,D T)
ivreg(v3 ~ v2 | v1, DT)
?ivreg
ivreg(v3 ~ v2 | v1, DT)
ivreg(v3 ~ v2 | v1, date = DT)
ivreg(v3 ~ v2 | v1, data = DT)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1 ~ v2 | 0 | (v2 ~ v3) |0, df)
felm(v1 ~ v2 | 0 | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |0, df)
felm(v1 ~ v2 |  | (v2 ~ v3), df)
felm(v1 ~ v2 |0| (v2 ~ v3), df)
l= c("col1","some","col3")
l[c(1,NA)]
l[c(1,NA)] <- c("col11","col12")
l[c(TRUE,NA)] <- c("col11","col12")
l[l=="col1"] <- c("col11","col12")
l=="col1"
l <- c("col1", NA, "col3")#
l[l==col1] <- c("col1")
l <- c("col1", NA, "col3")#
l[l == "col1"] <- c("col1")
l
condition = l== "col1"
condition
l[condition] <- c("col1")
l[c(TRUE,NA,FALSE) <- c("col1")
)
l[c(TRUE,NA,FALSE)] <- c("col1")
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(l == "col1")
]
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(condition)] <- c("col1")
l
l[NA,1]
l[c(NA,1)]
l <- c("col1", "col2", "col3")#
    l[c(NA,1)]
l[c(TRUE, NA, TRUE)]
l[c(NA, TRUE)]
l <- c("col1", NA, "col3")#
	l[which(l == "col1" | l == "col3")]
l <- c("col1", NA, "col3")#
	l[l == "col1"]
l[which(l == "col1")]
DT
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
lm(v2~v1,DT)
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
lm(v2~v1,DT)
result <- lm(v2~v1,DT)
names(result)
result$coefficients
result$model
result
names(result)
summary(result)
list(summary(result))
names(summary(result))
result <- felm(v2~v1,DT)
library(lfe)
result <- felm(v2~v1,DT)
names(result)
names(result)$se
result$se
result$coefficients
result$robustvcv
summary(result)
names(summary(result))
?summary
object_size(summary(result))
library(pryr)
object_size(summary(result))
object_size(result)
result <- lm(y ~ x)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- lm(v3 ~ v2, DT)
pryr::object_size(results)
pryr::object_size(result)
pryr::object_size(summary(results))
pryr::object_size(summary(result))
names(result)
result$coefficients
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2, DT)
vcov(result)
result
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|||v1, DT)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|0|0|v1, DT)
names(result)
vcov(result)
result$vcv
result$robustvcv
object_size(results)
object_size(result)
result <- felm(v3~v2|0|0|v1, DT)
stargazer(result, type = "text")
library(stargazer)
stargazer(result, type = "text")
devtools::install_github("matthieugomez/statar")
lazy(date)
library(lazyeval)
lazy(date0
)
lazy(date)
lazy_eval(lazy(date))
lazy_eval(lazy(date1))
select_vars(names(df),lazy(ok))
library(dplyr)
select_vars(names(df),lazy(ok))
select_vars(names(df), args = lazy(ok))
lazydots
lazy_dots
lazykeep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}(date)
df
df <- data.frame(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
 )
keep(df,id)
keep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}
keep(df,id)
lazy(date)
lazy(date1)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
dt <- data.table(id = c(1,2), date = c(1999, 2000))#
setcolorder(dt, "date", 1)#
setcolorder(dt, 2, 1)#
setcolorder(dt, "id", 2)#
setcolorder(dt, 1, 2)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ v2, DT)
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
n
f
felm(v3 ~ 1|0|(v2~v1), DT)
pform
parseformula(formula,data)
knownargs
sc
sc <- names(sys.call())[-1]
sc
named <- knownargs[pmatch(sc, knownargs)]
formula
f
felm::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
lfe:::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
felm = function (formula, data, iv = NULL, clustervar = NULL, exactDOF = FALSE, #
    subset, na.action, contrasts = NULL, ...) #
{#
    knownargs <- c("iv", "clustervar", "cmethod")#
    sc <- names(sys.call())[-1]#
    named <- knownargs[pmatch(sc, knownargs)]#
    for (arg in c("iv", "clustervar")) {#
        if (!is.null(eval(as.name(arg))) && !(arg %in% named)) {#
            warning("Please specify the '", arg, "' argument by name, or use a multi part formula. Its position in the argument list will change in a later version")#
        }#
    }#
    mf <- match.call(expand.dots = FALSE)#
    cmethod <- "cgm"#
    args <- list(...)#
    ka <- knownargs[pmatch(names(args), knownargs, duplicates.ok = FALSE)]#
    names(args)[!is.na(ka)] <- ka[!is.na(ka)]#
    env <- environment()#
    lapply(intersect(knownargs, ka), function(arg) assign(arg, #
        args[[arg]], pos = env))#
    if (!(cmethod %in% c("cgm", "gaure"))) #
        stop("Unknown cmethod: ", cmethod)#
    unk <- setdiff(names(args), knownargs)#
    if (length(unk) > 0) #
        stop("unknown arguments ", paste(unk, collapse = " "))#
    if (missing(data)) #
        data <- environment(formula)#
    pf <- parent.frame()#
    pform <- parseformula(formula, data)#
    print(formula)#
    print(pform)#
}
felm(v3 ~ 1|0|v2~v1, DT)
parseformula <- function (form, data) #
{#
    f <- as.Formula(form)#
    len <- length(f)[[2]]#
    if (len == 1) #
        return(oldparseformula(form, data))#
    opart <- formula(f, lhs = 1, rhs = 1)#
    if (len == 1) #
        return(list(formula = opart, gpart = ~0, ivpart = ~0, #
            cpart = ~0))#
    gpart <- formula(f, lhs = 0, rhs = 2)#
    if (!nopart(gpart)) {#
        tm <- terms(gpart, keep.order = TRUE)#
        parts <- attr(tm, "term.labels")#
        parts <- parts[parts != "0"]#
        nm <- parts#
        glist <- lapply(paste(".G(", parts, ")", sep = ""), function(e) parse(text = e))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- lapply(glist, eval, list(.G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- lapply(glist, eval, data, as.environment(list(.G = Gfunc, #
                `:` = Ginfunc)))#
        }#
        names(fl) <- nm#
    }#
    else {#
        fl <- NULL#
    }#
    if (len == 2) #
        return(list(formula = opart, fl = fl, gpart = gpart, #
            ivpart = ~0, cpart = ~0))#
    ivparts <- formula(f, lhs = 0, rhs = 3, drop = TRUE)#
    if (!nopart(ivparts) && length(ivparts[[2]]) > 1 && ivparts[[2]][[1]] == #
        "(") {#
        ivspec <- as.Formula(ivparts[[2]][[2]])#
        lhs <- formula(ivspec, rhs = 0)#
        ivpart <- lapply(seq_along(all.vars(lhs)), function(i) formula(ivspec, #
            lhs = i))#
    }#
    else {#
        ivpart <- NULL#
    }#
    if (len == 3 && !is.null(ivpart)) #
        return(list(formula = opart, fl = fl, iv = ivpart, gpart = gpart, #
            ivpart = ivparts, cpart = ~0))#
    if (len == 3 && is.null(ivpart)) {#
        cpart <- ivparts#
        ivparts <- NULL#
    }#
    else {#
        cpart <- formula(f, lhs = 0, rhs = 4, drop = TRUE)#
    }#
    if (!nopart(cpart)) {#
        tm <- terms(cpart, keep.order = TRUE)#
        nm <- parts <- attr(tm, "term.labels")#
        clist <- lapply(paste("factor(", parts, ")", sep = ""), #
            function(e) parse(text = e))#
        cluster <- lapply(clist, eval, data)#
        names(cluster) <- nm#
    }#
    else {#
        cluster <- NULL#
    }#
    list(formula = opart, fl = fl, iv = ivpart, cluster = cluster, #
        gpart = gpart, ivpart = ivparts, cpart = cpart)#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(Formula)
felm(v3 ~ 1|0|v2~v1, DT)
oldparseformula = function (formula, data) #
{#
    trm <- terms(formula, specials = c("G"))#
    feidx <- attr(trm, "specials")$G + 1#
    va <- attr(trm, "variables")#
    festr <- paste(sapply(feidx, function(i) deparse(va[[i]])), #
        collapse = "+")#
    if (festr != "") {#
        formula <- update(formula, paste(". ~ . -(", festr, ") - 1"))#
        felist <- parse(text = paste("list(", gsub("+", ",", #
            festr, fixed = TRUE), ")", sep = ""))#
        nm <- eval(felist, list(G = function(arg) deparse(substitute(arg))))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- eval(felist, list(G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- local({#
                eval(felist, data)#
            }, list(G = Gfunc, `:` = Ginfunc))#
        }#
        names(fl) <- nm#
        gpart <- eval(parse(text = paste("~", paste(nm, collapse = "+"))))#
        if (is.null(names(fl))) #
            names(fl) <- paste("fe", 1:length(fl), sep = "")#
    }#
    else {#
        fl <- NULL#
        gpart <- ~0#
    }#
    return(list(formula = formula, fl = fl, gpart = gpart, ivpart = ~0, #
        cpart = ~0))#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
formula
pform
f <- as.Formula(formula)
f
felm(v3 ~ 1|0|(v2~v1), DT)
s
n
formula
data
p <- as.Formula(formula)
p
length(f)[[2]]
length(p)[[2]]
length(p)[[1]]
names(length(p))
length(p)
p
length(formula)
length(formula)[[2]]
gpart <-  formula(p, lhs = 0, rhs = 2)
nopart(gpart)
ivparts <- formula(p, lhs = 0, rhs = 3, drop = TRUE)
ivparts
f
as.list(body(felm))
trace(felm, print(mf), at = 40)
trace(felm, quote(print(mf)), at = 40)
felm(v3 ~ 1|0|(v2~v1), DT)
g=function(formula,env){eval(formula,env)}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(y~t1, parent.frame())}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f(1:10)
g=function(formula,env){stats::model.frame(formula,env)}
f(1:10)
f=function(){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
x <- 1:10
f(1:10)
f()
ls()
ls(parent.env())
?ls
g=function(formula,env){eval(formula,env)}
g=function(formula,env){stats::model.frame(formula,env)}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f()
lfe::project
library(data.table)
last(c(1,2))
library(statar)
?setcols
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package/R/statar.R")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?saveRDS
x <- data.table(a = rep(1:2, each = 3), b=1:6) y <- data.table(a = 0:1, bb = 10:11)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
library(data.table)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
join(x, y, type = "inner", check = 1~m)
biglm
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
biglm(v1~id)
biglm(v1~id, DT)
library(biglm)
biglm(v1~id, DT)
?biglm
?speedlm
library(speedlm)
library(speedglm)
?speedlm
system.time(speedlm(v1~id,DT))
system.time(speedlm.fit(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
object.size(biglm(v1~id,DT))
object.size(speedlm(v1~id,DT))
ls(getNamespace("lfe"), all.names=TRUE)
C_conncomp
id <- function(){print("1")}
g<- function(x){lazy(x)}
g(id)
library(lazyeval)
g(id)
install.packages("lfe")
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
fllibrary(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
felm
felm::project
lfe::project
lfe:::project
x
?felm
remove.packages("lfe")         # revert back to CRAN
install.packages("data.table")
install.packages("lfe")
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)#
#> "Error in eval(expr, envir, enclos) : object 'v2(fit)' not found”
lfe
sessionInfo()
lfe
felm
project
lfe::project
lfe:::project
doprojols
felm::doprojols
felm:::doprojols
felm::doprojols
lfe:::doprojols
library(statar)
# lag/lead create lag/lead variables (corresponds to Stata L. F.)#
year <- c(1992, 1989, 1991, 1990, 1994, 1992, 1991)#
value <- c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
lag(value, 1, order_by = year) # returns value in previous year, like  dplyr::lag#
lag(value, 1, along_with = year) #  returns value in year - 1#
#
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, months(1), along_with = datem) #
#
# tag (corresponds to Stata tag)#
tag(c(1, 2))#
tag(c(1, 2), fromLast = TRUE)#
#
# sample_mode (corresponds to Stata mode)#
sample_mode(c(1, 2, 2))#
sample_mode(c(1, 2))#
sample_mode(c(NA, NA, 1))#
sample_mode(c(NA, NA, 1), na.rm = TRUE)#
#
# partition creates integer variable for quantile categories (corresponds to Stata xtile)#
v <- sample(c(NA, 1:10), 10, TRUE)                   #
partition(v, nq = 3) # 3 groups based on terciles#
partition(v, cutpoints = c(1, 3)) # 3 groups based on two cutpoints#
#
# winsorize (default based on 5 x interquartile range)#
winsorize(c(1, 2, 99))#
winsorize(c(1, 2, 99), replace = NA)#
winsorize(c(1, 2, 3, 99), cutpoints = quantile(c(1, 2, 3, 99), c(0.01, 0.99), type = 1))
library(data.table)#
library(dplyr)#
#
# sum_up (= Stata summarize)#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE),#
  )#
DT %>% sum_up#
DT %>% sum_up(v2, d=T)#
DT %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
# fill_gap (= Stata tsfill)#
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#
# fill na (in a new dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_na(value, along_with = date) #
DT %>% group_by(id) %>% fill_na(value, along_with = date, roll = "nearest")#
#
# fill na (in the original dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
setkeyv(DT,c("id", "date"))#
setna(DT, "value")#
setna(DT, "value", roll = "nearest")
x <- data.table(a = rep(1:2, each = 3), b = 1:6)#
y <- data.table(a = 0:1, bb = 10:11)#
# outer corresponds to Stata joinby keep(master matched using)#
join(x, y, type = "outer")#
# left corresponds to Stata joinby keep(master matched)#
join(x, y, type = "left")#
# right corresponds to Stata joinby keep(mached using)#
join(x, y, type = "right")#
# inner corresponds to Stata joinby keep(matched)#
join(x, y, type = "inner")#
#
join(x, y, type = "semi")#
join(x, y, type = "anti")#
join(x, y, type = "outer", check = 1~m)#
join(x, y, type = "outer", gen = "_merge")
sessionInfo()
library(lfe)
sessionInfo()
install.packages(lfe)
install.packages(felm)
install.packages("felm")
install.packages("lfe")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repos = NULL, type="source")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("lfe")
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
system.info()
systeminfo()
session.info()
sessionInfo()
library(lfe)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL, type = "source")
library(lfe)
sessionInfo
sessionInfo()
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
?felm
felm
duplicated(ok)
library(data.table)
duplicated
duplicated.data.table
getAnywhere(duplicated.data.table)
getAnywhere(unique.data.table)
setwd("/Users/Matthieu/Dropbox/Symlink")#
#
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
query <- data.table:::.duplicated.helper(x, by)
query <- data.table:::.duplicated.helper(x, by="v1")
query <- data.table:::.duplicated.helper(DT, by="v1")
query
o = forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)
o = data.table:::forderv(DT, by = "id", sort = FALSE, retGrp = TRUE)
o
o = data.table:::forderv(DT, by = "id", sort = FALSE, retGrp = TRUE)
f = attr(o, "starts")
f[o]
o[f]
f = attr(o, "starts")
f
length(o)
o
?forderv
?data.table::forderv
?data.table::forder
names(o)(
)
names(o)
attr(o)
attributes(o)
setwd("/Users/Matthieu/Dropbox/Symlink")#
N=1e2; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
o = data.table:::forderv(DT, by = "v1", sort = FALSE, retGrp = TRUE)
o
DT
uniqlengths
o = data.table:::forderv(DT, by = "v1", sort = FALSE, retGrp = FALSE)
o = data.table:::forderv(DT, by = "v1", sort = FALSE, retGrp = TRUE)
o
f= attr(o,"starts")
f
diff(f)
lag(f)
head(f,-1)
c(NA,head(f,-1))
f[f==c(NA,head(f,-1))]
f==c(NA,head(f,-1))
f[f==c(NA,head(f,-1))]
f==c(NA,head(f,-1))
f
which(f==c(NA,head(f,-1)))
f[which(f==c(NA,head(f,-1)))]
o[f]
o
f <- f[which(f==c(NA,head(f,-1)))]
o[f]
o[0]
o[NULL]
res= c(TRUE, TRUE)
res[o[0]] <- FALSE
res
setwd("/Users/Matthieu/Dropbox/Symlink")#
#
duplicated.data.table <- function (x, incomparables = FALSE, fromLast = FALSE, by = key(x), all = FALSE,...) #
{#
    if (!cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    if (query$use.keyprefix) {#
        f = uniqlist(x[, query$by, with = FALSE])#
        if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
    }#
    else {#
        o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
        f = attr(o, "starts")#
        if (all){#
          f <- f[which(f==c(NA,head(f,-1)))]#
        } else if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
        if (length(o)) #
            f = o[f]#
    }#
    res[f] = FALSE#
    res#
}
DT
duplicates(DT, by = v1)
duplicated(DT, by = "v1")
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicated.data.table <- function (x, incomparables = FALSE, fromLast = FALSE, by = key(x), all = FALSE,...) #
{#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    if (query$use.keyprefix) {#
        f = uniqlist(x[, query$by, with = FALSE])#
        if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
    }#
    else {#
        o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
        f = attr(o, "starts")#
        if (all){#
          f <- f[which(f==c(NA,head(f,-1)))]#
        } else if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
        if (length(o)) #
            f = o[f]#
    }#
    res[f] = FALSE#
    res#
}
duplicated(DT, by = "v1")
DT[duplicated(DT, by = "v1")}
DT[duplicated(DT, by = "v1")}]
DT[duplicated(DT, by = "v1")]
setkey(DT[duplicated(DT, by = "v1")],"v1")
?duplicates
duplicates <- function(x, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    if (query$use.keyprefix) {#
        f = uniqlist(x[, query$by, with = FALSE])#
        if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
    }#
    else {#
        o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
        f = attr(o, "starts")#
        if (all){#
          f <- f[which(f==c(NA,head(f,-1)))]#
        } else if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
        if (length(o)) #
            f = o[f]#
    }#
    res[f] = FALSE    #
    setkeyv(DT[res], by = by)#
}
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    if (query$use.keyprefix) {#
        f = uniqlist(x[, query$by, with = FALSE])#
        if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
    }#
    else {#
        o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
        f = attr(o, "starts")#
        if (all){#
          f <- f[which(f==c(NA,head(f,-1)))]#
        } else if (fromLast) #
            f = cumsum(uniqlengths(f, nrow(x)))#
        if (length(o)) #
            f = o[f]#
    }#
    res[f] = FALSE    #
    setkeyv(DT[res], by = by)#
}
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    if (length(o)) #
        f = o[f]#
    }#
    res[f] = FALSE    #
    setkeyv(DT[res], by = by)#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    if (length(o)) #
        f = o[f]#
    }#
    res[f] = FALSE    #
    setkeyv(DT[res], by)#
}
key(DT)
data.table:::.duplicated.helper(x, key(x))
data.table:::.duplicated.helper(DT, key(x))
data.table:::.duplicated.helper(DT, key(DT))
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    if (length(o)) #
        f = o[f]#
    }#
    res[f] = FALSE    #
    setkeyv(DT[res], query$by)#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE    #
    setkeyv(DT[res], query$by)#
}
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[rest]  #
    setkeyv(ans, query$by)#
}
duplicates(DT)
trace()
traceback()
duplicates(DT)
traceback()
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
}
traceback()
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    ans#
}
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    warning(paste(length(f)," groups have duplicates"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    ans#
}
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    f = attr(o, "starts")#
    # change wrt duplicated#
    f <- f[which(f==c(NA,head(f,-1)))]#
    warning(paste(sum(f, na.rm = TRUE)," groups have duplicates"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    ans#
}
duplicates(DT)
debug(duplicates)
duplicates(DT)
f
?diff
diff(c(1,2,4,6))
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    ff = attr(o, "starts")#
    # change wrt duplicated#
    ff <- ff[c(0,diff(ff))==1]#
    warning(paste(sum(f, na.rm = TRUE)," groups have duplicates"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    ans#
}
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    ff = attr(o, "starts")#
    # change wrt duplicated#
    l <- length(ff)#
    ff <- ff[c(0,diff(ff))==1]#
    warning(paste(l-sum(f, na.rm = TRUE)," groups have duplicates"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    ans#
}
duplicates(DT)
DT
key(DT)
DT
duplicates(DT, by= "v1")
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    ff = attr(o, "starts")#
    # change wrt duplicated#
    l <- length(ff)#
    ff <- ff[c(0,diff(ff))==1]#
    message(paste(l-sum(f, na.rm = TRUE)," groups have duplicates"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    ans#
}
duplicates(DT, by= "v1")
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    ff = attr(o, "starts")#
    # change wrt duplicated#
    l <- length(ff)#
    ff <- ff[c(0,diff(ff))==1]#
    message(paste(l-sum(f, na.rm = TRUE)," groups are non unique"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    setcolorder(ans, c(query$by,setdiff(names(ans),query$by))#
    ans#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    ff = attr(o, "starts")#
    # change wrt duplicated#
    l <- length(ff)#
    ff <- ff[c(0,diff(ff))==1]#
    message(paste(l-sum(f, na.rm = TRUE)," groups are non unique"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    setcolorder(ans, c(query$by,setdiff(names(ans),query$by)))#
    ans#
}
duplicates(DT, by= "v1")
DT
DT
DT[DT[.I[.N>2], by= "v1"][[1]]]
DT[DT[.I[.N>2], by= "v1"][[1]]]]
DT[.I[.N>2], by= "v1"]
DT[DT[,.I[.N>2], by= "v1"][[1]]]]
DT[DT[,.I[.N>2], by= "v1"][[1]]]
DT
DT[DT[,.I[.N>2], by= "v1"][[1]]]
DT[,.I[.N>2], by= "v1"][[1]]]
DT[,.I[.N>2], by= "v1"][[1:]]]
DT[,.I[.N>2], by= "v1"][[1L]]
DT[,.I[.N>2], by= "v1"][[length(DT)+1]]
DT[,.I[.N>2], by= "v1"][[length(DT)]]
DT1<- DT[,.I[.N>2], by= "v1"]
DT1[[length(DT1)]]
DT[DT1[[length(DT1)]]]
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    ff = attr(o, "starts")#
    # change wrt duplicated#
    l <- length(ff)#
    ff <- ff[c(0,diff(ff))==1]#
    message(paste(l-sum(f, na.rm = TRUE)," groups are non unique"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    setcolorder(ans, c(query$by,setdiff(names(ans),query$by)))#
    ans#
}
DT[DT1[[length(DT1)]]]
duplicates <- function(x, incomparables = FALSE, fromLast = FALSE, by = key(x)){#
    if (!data.table:::cedta()) #
        return(NextMethod("duplicated"))#
    if (!identical(incomparables, FALSE)) {#
        data.table:::.NotYetUsed("incomparables != FALSE")#
    }#
    if (nrow(x) == 0L || ncol(x) == 0L) #
        return(logical(0))#
    if (is.na(fromLast) || !is.logical(fromLast)) #
        stop("'fromLast' must be TRUE or FALSE")#
    query <- data.table:::.duplicated.helper(x, by)#
    if (!length(query$by)) #
        return(logical(0))#
    res <- rep.int(TRUE, nrow(x))#
    o = data.table:::forderv(x, by = query$by, sort = FALSE, retGrp = TRUE)#
    ff = attr(o, "starts")#
    # change wrt duplicated#
    l <- length(ff)#
    ff <- ff[c(0,diff(ff))==1]#
    message(paste(l-sum(f, na.rm = TRUE)," groups are non unique"))#
    if (length(o)) #
        f = o[f]#
    res[f] = FALSE  #
    ans <- DT[res]  #
    setkeyv(ans, query$by)#
    setcolorder(ans, c(query$by,setdiff(names(ans),query$by)))#
    ans#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if length(by)==0{#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  DT1 <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,N)))#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  DT1 <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,N)))#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  DT1 <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,N), setdiff(names(ans),c(by,N))#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  DT1 <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,N), setdiff(names(ans),c(by,N)))#
}
DT
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,N), setdiff(names(ans),c(by,N)))#
}
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("N already exists")#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N"), setdiff(names(ans),c(by,"N")))#
}
duplicates(DT)
DT
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("N already exists")#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[,N:=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N"), setdiff(names(ans),c(by,"N")))#
}
duplicates(DT)
DT[, N:=NULL]
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("N already exists")#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[,N:=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N"), setdiff(names(ans),c(by,"N")))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
}
DT[, N:=NULL]
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("N already exists")#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N"), setdiff(names(ans),c(by,"N")))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
DT[, N:=NULL]
duplicates(DT)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("N already exists")#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N",setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
duplicates(DT)
names(ans)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if anyDuplicates(names(DT)){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N", setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
DT
debug(duplicates)
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if anyDuplicates(names(DT)){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N", setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(DT)){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N", setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(DT))){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- names(DT)#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N", setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
debug(duplicates)
duplicates(DT)
DT
DT[, N:= NULL]
duplicates(DT)
DT
duplicates(DT)
names(ans)
by
by
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(DT))){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- copy(names(DT))#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N", setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(DT))){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- copy(names(DT))#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c(by,"N", setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups are non unique"))#
  ans#
}
duplicates(DT)
duplicates(DT, by = "v1")
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(DT))){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- copy(names(DT))#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, by)#
  setcolorder(ans, c("N", by, setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups have duplicates"))#
  ans#
}
duplicates(DT, by = "v1")
setwd("/Users/Matthieu/Dropbox/Symlink")#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(DT))){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- copy(names(DT))#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, c("N",by))#
  setcolorder(ans, c("N", by, setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups have duplicates"))#
  ans#
}
duplicates(DT, by = "v1")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' dataset of duplicates#
#'#
#' @param x a data.table#
#' @param by a character vectors. Default is key of data.table#
#' @returns a data.table composed of groups that have duplicates. A new column named "N" displays the number of duplicates#
#' @examples#
#' x <- data.table(a = rep(1:2, each = 3), b=1:6)#
#' duplicates(x, by = "a")#
#' @export#
duplicates <- function(x, by= key(x)){#
  if ("N" %in% names(DT))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(DT))){#
    stop("x has duplicates")#
  }#
  if (length(by)==0){#
    by <- copy(names(DT))#
  }#
  DT[, N := .N-1,  by = by]#
  on.exit(DT[, N :=NULL])#
  ans <- DT[N>0]#
  setkeyv(ans, c("N",by))#
  setcolorder(ans, c("N", by, setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups have duplicates"))#
  ans#
}
x <- data.table(a = rep(1:2, each = 3), b=1:6)
duplicates(x, by = "a")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' dataset of duplicates#
#'#
#' @param x a data.table#
#' @param by a character vectors. Default is key of data.table#
#' @returns a data.table composed of groups that have duplicates. A new column named "N" displays the number of duplicates#
#' @examples#
#' x <- data.table(a = rep(1:2, each = 3), b=1:6)#
#' duplicates(x, by = "a")#
#' @export#
duplicates <- function(x, by = key(x)){#
  if ("N" %in% names(x))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(x))){#
    stop("x has duplicate column names")#
  }#
  if (length(by)==0){#
    by <- copy(names(x))#
  }#
  x[, N := .N-1,  by = by]#
  on.exit(x[, N :=NULL])#
  ans <- x[N>0]#
  setkeyv(ans, c("N",by))#
  setcolorder(ans, c("N", by, setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(-ans))," groups have duplicates"))#
  ans
}
duplicates(x, by = "a")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
duplicates <- function(x, by = key(x)){#
  if ("N" %in% names(x))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(x))){#
    stop("x has duplicate column names")#
  }#
  if (length(by)==0){#
    by <- copy(names(x))#
  }#
  x[, N := .N-1,  by = by]#
  on.exit(x[, N :=NULL])#
  ans <- x[N>0]#
  setkeyv(ans, c("N",by))#
  setcolorder(ans, c("N", by, setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(ans))," groups have duplicates"))#
  ans#
}
duplicates(x, by = "a")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
duplicates <- function(x, by = key(x)){#
  if ("N" %in% names(x))#
    stop("Variable N already exists")#
  if (anyDuplicated(names(x))){#
    stop("x has duplicate column names")#
  }#
  if (length(by)==0){#
    by <- copy(names(x))#
  }#
  x[, N := .N-1,  by = by]#
  on.exit(x[, N :=NULL])#
  ans <- x[N>0]#
  setkeyv(ans, c("N",by))#
  setcolorder(ans, c("N", by, setdiff(names(ans),c(by,"N"))))#
  message(paste(sum(duplicated(ans))," groups have duplicates"))#
  ans#
}
duplicates(x, by = "a")
