felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
n
f
felm(v3 ~ 1|0|(v2~v1), DT)
pform
parseformula(formula,data)
knownargs
sc
sc <- names(sys.call())[-1]
sc
named <- knownargs[pmatch(sc, knownargs)]
formula
f
felm::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
lfe:::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
felm = function (formula, data, iv = NULL, clustervar = NULL, exactDOF = FALSE, #
    subset, na.action, contrasts = NULL, ...) #
{#
    knownargs <- c("iv", "clustervar", "cmethod")#
    sc <- names(sys.call())[-1]#
    named <- knownargs[pmatch(sc, knownargs)]#
    for (arg in c("iv", "clustervar")) {#
        if (!is.null(eval(as.name(arg))) && !(arg %in% named)) {#
            warning("Please specify the '", arg, "' argument by name, or use a multi part formula. Its position in the argument list will change in a later version")#
        }#
    }#
    mf <- match.call(expand.dots = FALSE)#
    cmethod <- "cgm"#
    args <- list(...)#
    ka <- knownargs[pmatch(names(args), knownargs, duplicates.ok = FALSE)]#
    names(args)[!is.na(ka)] <- ka[!is.na(ka)]#
    env <- environment()#
    lapply(intersect(knownargs, ka), function(arg) assign(arg, #
        args[[arg]], pos = env))#
    if (!(cmethod %in% c("cgm", "gaure"))) #
        stop("Unknown cmethod: ", cmethod)#
    unk <- setdiff(names(args), knownargs)#
    if (length(unk) > 0) #
        stop("unknown arguments ", paste(unk, collapse = " "))#
    if (missing(data)) #
        data <- environment(formula)#
    pf <- parent.frame()#
    pform <- parseformula(formula, data)#
    print(formula)#
    print(pform)#
}
felm(v3 ~ 1|0|v2~v1, DT)
parseformula <- function (form, data) #
{#
    f <- as.Formula(form)#
    len <- length(f)[[2]]#
    if (len == 1) #
        return(oldparseformula(form, data))#
    opart <- formula(f, lhs = 1, rhs = 1)#
    if (len == 1) #
        return(list(formula = opart, gpart = ~0, ivpart = ~0, #
            cpart = ~0))#
    gpart <- formula(f, lhs = 0, rhs = 2)#
    if (!nopart(gpart)) {#
        tm <- terms(gpart, keep.order = TRUE)#
        parts <- attr(tm, "term.labels")#
        parts <- parts[parts != "0"]#
        nm <- parts#
        glist <- lapply(paste(".G(", parts, ")", sep = ""), function(e) parse(text = e))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- lapply(glist, eval, list(.G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- lapply(glist, eval, data, as.environment(list(.G = Gfunc, #
                `:` = Ginfunc)))#
        }#
        names(fl) <- nm#
    }#
    else {#
        fl <- NULL#
    }#
    if (len == 2) #
        return(list(formula = opart, fl = fl, gpart = gpart, #
            ivpart = ~0, cpart = ~0))#
    ivparts <- formula(f, lhs = 0, rhs = 3, drop = TRUE)#
    if (!nopart(ivparts) && length(ivparts[[2]]) > 1 && ivparts[[2]][[1]] == #
        "(") {#
        ivspec <- as.Formula(ivparts[[2]][[2]])#
        lhs <- formula(ivspec, rhs = 0)#
        ivpart <- lapply(seq_along(all.vars(lhs)), function(i) formula(ivspec, #
            lhs = i))#
    }#
    else {#
        ivpart <- NULL#
    }#
    if (len == 3 && !is.null(ivpart)) #
        return(list(formula = opart, fl = fl, iv = ivpart, gpart = gpart, #
            ivpart = ivparts, cpart = ~0))#
    if (len == 3 && is.null(ivpart)) {#
        cpart <- ivparts#
        ivparts <- NULL#
    }#
    else {#
        cpart <- formula(f, lhs = 0, rhs = 4, drop = TRUE)#
    }#
    if (!nopart(cpart)) {#
        tm <- terms(cpart, keep.order = TRUE)#
        nm <- parts <- attr(tm, "term.labels")#
        clist <- lapply(paste("factor(", parts, ")", sep = ""), #
            function(e) parse(text = e))#
        cluster <- lapply(clist, eval, data)#
        names(cluster) <- nm#
    }#
    else {#
        cluster <- NULL#
    }#
    list(formula = opart, fl = fl, iv = ivpart, cluster = cluster, #
        gpart = gpart, ivpart = ivparts, cpart = cpart)#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(Formula)
felm(v3 ~ 1|0|v2~v1, DT)
oldparseformula = function (formula, data) #
{#
    trm <- terms(formula, specials = c("G"))#
    feidx <- attr(trm, "specials")$G + 1#
    va <- attr(trm, "variables")#
    festr <- paste(sapply(feidx, function(i) deparse(va[[i]])), #
        collapse = "+")#
    if (festr != "") {#
        formula <- update(formula, paste(". ~ . -(", festr, ") - 1"))#
        felist <- parse(text = paste("list(", gsub("+", ",", #
            festr, fixed = TRUE), ")", sep = ""))#
        nm <- eval(felist, list(G = function(arg) deparse(substitute(arg))))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- eval(felist, list(G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- local({#
                eval(felist, data)#
            }, list(G = Gfunc, `:` = Ginfunc))#
        }#
        names(fl) <- nm#
        gpart <- eval(parse(text = paste("~", paste(nm, collapse = "+"))))#
        if (is.null(names(fl))) #
            names(fl) <- paste("fe", 1:length(fl), sep = "")#
    }#
    else {#
        fl <- NULL#
        gpart <- ~0#
    }#
    return(list(formula = formula, fl = fl, gpart = gpart, ivpart = ~0, #
        cpart = ~0))#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
formula
pform
f <- as.Formula(formula)
f
felm(v3 ~ 1|0|(v2~v1), DT)
s
n
formula
data
p <- as.Formula(formula)
p
length(f)[[2]]
length(p)[[2]]
length(p)[[1]]
names(length(p))
length(p)
p
length(formula)
length(formula)[[2]]
gpart <-  formula(p, lhs = 0, rhs = 2)
nopart(gpart)
ivparts <- formula(p, lhs = 0, rhs = 3, drop = TRUE)
ivparts
f
as.list(body(felm))
trace(felm, print(mf), at = 40)
trace(felm, quote(print(mf)), at = 40)
felm(v3 ~ 1|0|(v2~v1), DT)
g=function(formula,env){eval(formula,env)}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(y~t1, parent.frame())}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f(1:10)
g=function(formula,env){stats::model.frame(formula,env)}
f(1:10)
f=function(){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
x <- 1:10
f(1:10)
f()
ls()
ls(parent.env())
?ls
g=function(formula,env){eval(formula,env)}
g=function(formula,env){stats::model.frame(formula,env)}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f()
lfe::project
library(data.table)
last(c(1,2))
library(statar)
?setcols
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package/R/statar.R")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?saveRDS
x <- data.table(a = rep(1:2, each = 3), b=1:6) y <- data.table(a = 0:1, bb = 10:11)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
library(data.table)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
join(x, y, type = "inner", check = 1~m)
biglm
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
biglm(v1~id)
biglm(v1~id, DT)
library(biglm)
biglm(v1~id, DT)
?biglm
?speedlm
library(speedlm)
library(speedglm)
?speedlm
system.time(speedlm(v1~id,DT))
system.time(speedlm.fit(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
object.size(biglm(v1~id,DT))
object.size(speedlm(v1~id,DT))
ls(getNamespace("lfe"), all.names=TRUE)
C_conncomp
id <- function(){print("1")}
g<- function(x){lazy(x)}
g(id)
library(lazyeval)
g(id)
install.packages("lfe")
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
fllibrary(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
felm
felm::project
lfe::project
lfe:::project
x
?felm
remove.packages("lfe")         # revert back to CRAN
install.packages("data.table")
install.packages("lfe")
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)#
#> "Error in eval(expr, envir, enclos) : object 'v2(fit)' not found”
lfe
sessionInfo()
lfe
felm
project
lfe::project
lfe:::project
doprojols
felm::doprojols
felm:::doprojols
felm::doprojols
lfe:::doprojols
library(statar)
# lag/lead create lag/lead variables (corresponds to Stata L. F.)#
year <- c(1992, 1989, 1991, 1990, 1994, 1992, 1991)#
value <- c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
lag(value, 1, order_by = year) # returns value in previous year, like  dplyr::lag#
lag(value, 1, along_with = year) #  returns value in year - 1#
#
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, months(1), along_with = datem) #
#
# tag (corresponds to Stata tag)#
tag(c(1, 2))#
tag(c(1, 2), fromLast = TRUE)#
#
# sample_mode (corresponds to Stata mode)#
sample_mode(c(1, 2, 2))#
sample_mode(c(1, 2))#
sample_mode(c(NA, NA, 1))#
sample_mode(c(NA, NA, 1), na.rm = TRUE)#
#
# partition creates integer variable for quantile categories (corresponds to Stata xtile)#
v <- sample(c(NA, 1:10), 10, TRUE)                   #
partition(v, nq = 3) # 3 groups based on terciles#
partition(v, cutpoints = c(1, 3)) # 3 groups based on two cutpoints#
#
# winsorize (default based on 5 x interquartile range)#
winsorize(c(1, 2, 99))#
winsorize(c(1, 2, 99), replace = NA)#
winsorize(c(1, 2, 3, 99), cutpoints = quantile(c(1, 2, 3, 99), c(0.01, 0.99), type = 1))
library(data.table)#
library(dplyr)#
#
# sum_up (= Stata summarize)#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE),#
  )#
DT %>% sum_up#
DT %>% sum_up(v2, d=T)#
DT %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
# fill_gap (= Stata tsfill)#
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#
# fill na (in a new dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_na(value, along_with = date) #
DT %>% group_by(id) %>% fill_na(value, along_with = date, roll = "nearest")#
#
# fill na (in the original dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
setkeyv(DT,c("id", "date"))#
setna(DT, "value")#
setna(DT, "value", roll = "nearest")
x <- data.table(a = rep(1:2, each = 3), b = 1:6)#
y <- data.table(a = 0:1, bb = 10:11)#
# outer corresponds to Stata joinby keep(master matched using)#
join(x, y, type = "outer")#
# left corresponds to Stata joinby keep(master matched)#
join(x, y, type = "left")#
# right corresponds to Stata joinby keep(mached using)#
join(x, y, type = "right")#
# inner corresponds to Stata joinby keep(matched)#
join(x, y, type = "inner")#
#
join(x, y, type = "semi")#
join(x, y, type = "anti")#
join(x, y, type = "outer", check = 1~m)#
join(x, y, type = "outer", gen = "_merge")
sessionInfo()
library(lfe)
sessionInfo()
install.packages(lfe)
install.packages(felm)
install.packages("felm")
install.packages("lfe")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repos = NULL, type="source")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("lfe")
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
system.info()
systeminfo()
session.info()
sessionInfo()
library(lfe)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL, type = "source")
library(lfe)
sessionInfo
sessionInfo()
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
?felm
felm
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?graph
library(statar)
?graph
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?bin
library(tidyr)
library(data.table)
spread_.data.table <- function(data, key_col, value_col, fill = NA, convert = FALSE, drop = TRUE) {#
  id <- setdiff(names(data), c(key_col, value_col))#
  length_lhs <- length(id)#
  if (!length_lhs) {#
    id <- tempname("temp", data)#
    data[, (id) := 1] #
    on.exit(data[, (id) := NULL])#
  }#
  if (anyDuplicated(data, by = c(id, key_col))){#
        overall <- dplyr::id(data[,c(id, key_col), with = FALSE])#
        groups <- split(seq_along(overall), overall)#
        groups <- groups[vapply(groups, length, integer(1)) > 1]#
        str <- vapply(groups, function(x) paste0("(", paste0(x, collapse = ", "), ")"),#
             character(1))#
        stop("Duplicate identifiers for rows ", paste(str, collapse = ", "),#
             call. = FALSE)#
  }#
  formula <- reformulate(termlabels = key_col , response = id)#
  data2 <- dcast.data.table(data, formula, value.var = value_col, fill = fill, drop = drop)#
  if (!length_lhs) {#
    data2[, (id) := NULL]#
  }#
  if (convert) {#
     data2[, names(data2) := lapply(.SD,type.convert, as.is = TRUE), .SDcols = names(data2)]#
   }#
  data2#
}
?spread
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
stocksm <- stocks %>% gather(stock, price, -time)#
stocksm %>% spread(stock, price)#
stocksm %>% spread(time, price)#
#
# Spread and gather are complements#
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))#
df %>% spread(x, y) %>% gather(x, y, a:b, na.rm = TRUE)
library(dplyr)
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
stocksm <- stocks %>% gather(stock, price, -time)#
stocksm %>% spread(stock, price)#
stocksm %>% spread(time, price)#
#
# Spread and gather are complements#
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))#
df %>% spread(x, y) %>% gather(x, y, a:b, na.rm = TRUE)
df
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
stocksm <- stocks %>% gather(stock, price, -time)#
stocksm %>% spread(stock, price)#
stocksm %>% spread(time, price)#
#
# Spread and gather are complements#
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))#
df %>% spread(x, y)
df
df %>% select(x,y) %>% spread(x, y)
df %>% select(x,y) %>% dcast(~x, y)
library(reshape2)
df %>% select(x,y) %>% dcast(~x, y)
df %>% select(x,y) %>% dcast(1~x, y)
df %>% select(x,y) %>% dcast(1~x)
df %>% select(x,y) %>% spread(x,y)
df
df %>% select(x,y) %>% dcast(1~x)
setDT(df) %>% select(x,y) %>% dcast(1~x)
setDT(df) %>% select(x,y) %>% dcast(\~x)
setDT(df) %>% select(x,y) %>% dcast(~x)
setDT(df) %>% select(x,y) %>% dcast(NULL~x)
setDT(df) %>% select(x,y) %>% dcast(character(0)~x)
devtools::release("/Users/Matthieu/Dropbox/Github/appliedr")
devtools::load("/Users/Matthieu/Dropbox/Github/appliedr")
?devtools
devtools::load_all("/Users/Matthieu/Dropbox/Github/appliedr")
N <- 10#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(c(1:5), N, TRUE),#
  v2 = rnorm(N, sd = 20),#
  v3 = sample(runif(100, max=100), N, TRUE)#
)#
DT[, v4 := v3 + rnorm(N, sd = 20)]#
graph(DT)
devtools::load_all("/Users/Matthieu/Dropbox/Github/appliedr")
N <- 10#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(c(1:5), N, TRUE),#
  v2 = rnorm(N, sd = 20),#
  v3 = sample(runif(100, max=100), N, TRUE)#
)#
DT[, v4 := v3 + rnorm(N, sd = 20)]#
graph(DT)
`[[.data.table`
`data.table::[[.data.table`
`data.table:::[[.data.table`
N <- 10#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(c(1:5), N, TRUE),#
  v2 = rnorm(N, sd = 20),#
  v3 = sample(runif(100, max=100), N, TRUE)#
)#
DT[, v4 := v3 + rnorm(N, sd = 20)]#
graph(DT)
library(devtools)
library(data.table)
load_all("/Users/Matthieu/Dropbox/Github/appliedr")
library(data.table)#
N <- 10#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(c(1:5), N, TRUE),#
  v2 = rnorm(N, sd = 20),#
  v3 = sample(runif(100, max=100), N, TRUE)#
)#
DT[, v4 := v3 + rnorm(N, sd = 20)]#
graph(DT)#
graph(DT, by = id)#
graph(DT, by = id, facet = TRUE)#
graph(DT, by = id, type = "boxplot")#
graph(DT, v3, v4, along_with = v2)#
graph(DT, v3, v4, along_with = v2, by = id, type = "loess")
library(data.table)#
 N <- 100#
 DT <- data.table(#
   id = sample(c("id1","id2","id3"), N, TRUE),#
   v1 = sample(c(1:5), N, TRUE),#
   v2 = rnorm(N, sd = 20),#
   v3 = sample(runif(100, max=100), N, TRUE)#
 )#
 DT[, v4 := v3 + rnorm(N, sd = 20)]#
 graph(DT)#
 graph(DT, by = id)#
 graph(DT, by = id, facet = TRUE)#
 graph(DT, by = id, type = "boxplot")#
 graph(DT, v3, v4, along_with = v2)#
 graph(DT, v3, v4, along_with = v2, by = id, type = "loess")
release("/Users/Matthieu/Dropbox/Github/appliedr")
devtools::release("/Users/Matthieu/Dropbox/Github/statar")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/texbin",sep=":"))
devtools::release("/Users/Matthieu/Dropbox/Github/statar")
library(data.table)#
library(reshape2)#
df <- data.table(#
    x = factor("a", levels = c("a", "b")),#
    y = factor("b", levels = c("a", "b")),#
    z = 1#
  )#
dcast(df, y~x, drop = FALSE)
dcast.data.table(df, y~x, drop = FALSE)
install_github("hadley/ggcom")
?bin_vector
install_github("hadley/ggcomp")
devtools::install_github("hadley/ggcomp")
devtools::install_github("rstudio/ggcomp")
library(ggcomp)
?bin_vector
install.packages("Rz")
?substitute
NA + 3
setwd("/Users/Matthieu/Dropbox/Symlink")#
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
setwd("/Users/Matthieu/Dropbox/Symlink")#
library(data.table)#
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, ...){#
	dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(as.factor(fe[!is.na(x)]))#
	} else{#
		fe <-  lapply(fe, function(z){as.factor(z[!is.na(x)])})#
	}#
	if (is.integer(x)){#
		x <- as.double(x)#
	}#
	x[!is.na(x)]<- demeanlist(x[!is.na(x)], fe)#
	x#
}
demean(DT[, v2,v3], DT$v1)
library(lfe)
demean(DT[, v2,v3], DT$v1)
demean(DT[, list(v2,v3)], DT$v1)
DT[, list(v2,v3)]
demean(as.matrix(DT[, list(v2,v3)]), DT$v1)
demean(as.matrix(DT[, list(v2,v3)]), as.factor(as.matrix(DT[,list(id, v1)])))
demean(as.matrix(DT[, list(v2,v3)]), as.factor(DT[,list(id, v1)]))
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(as.factor(fe))#
	} else{#
		fe <-  as.factor(as.matrix(fe))#
	}#
	if (is.integer(x)){#
		x <- as.double(x)#
	}#
	x[!is.na(x)]<- demeanlist(x[!is.na(x)], fe)#
	x#
}
demean(c(1,2),c(1,1))
demeanlist(c(1,2),c(1,1))
demeanlist(c(1,2),list(c(1,1)))
demeanlist(c(1,2),as.factor(c(1,1))))
demeanlist(c(1,2),as.factor(c(1,1)))
demeanlist
all <- c(list(c(1,2)),list(c(1,NA)))
na.omit(all)
is.na(all)
na.omit(all)
all
is.data.frame(all)
na.omit
?na.omit
DT
setDF(DT)
DT[,1:2]
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- na.omit(as.data.frame(c(x,fe)))#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])), all[,i] <- as.double(all[,i])#
	}#
	demeanlist(all[,1:l], all[,(l+1),length(all)])#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- na.omit(as.data.frame(c(x,fe)))#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	demeanlist(all[,1:l], all[,(l+1),length(all)])#
}
demean(c(1,2),c(1,1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- na.omit(as.data.frame(c(x,fe)))#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in 1:l){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
#
	demeanlist(all[,1:l], all[,(l+1),length(all)])#
}
demean(c(1,2),c(1,1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- na.omit(as.data.frame(c(x,fe)))#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
#
	demeanlist(all[,1:l], all[,(l+1),length(all)])#
}
demean(c(1,2),c(1,1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- na.omit(as.data.frame(c(x,fe)))#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	demeanlist(all[,1:l], all[,(l+1):length(all)])#
}
demean(c(1,2),c(1,1))
debug(demean)
demean(c(1,2),c(1,1))
all
f
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- na.omit(as.data.frame(c(x,fe)))#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
}
demean(c(1,2),c(1,1))
?na.omit
na.pass(list(c(1,2),c(1,1)))
na.pass(list(c(1,nA),c(1,1)))
na.pass(list(c(1,NA),c(1,1)))
which(c1 = c(1,2,3,NA)#
c2 = c(3,1,NA,3)#
c3 = c(2,1,3,1)#
#
df = data.frame(c1,c2,c3)
c1 = c(1,2,3,NA)#
c2 = c(3,1,NA,3)#
c3 = c(2,1,3,1)
df = data.frame(c1,c2,c3)
which(is.na(df))
is.na(df)
rowMeans(is.na(df))
rowSum(is.na(df))
rowSums(is.na(df))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- row.Sums(is.na(all))#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
}
rowSums(is.na(df))
df = data.frame(c1,c2,c3)
df
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))>0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))>0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))>0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x[rows,] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))>0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	print(x)#
	print(rows)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	print(x)#
	print(rows)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
as.data.frame(c(1,2),c(1,3))
data.frame(c(1,2),c(1,3))
as.data.frame(list(c(1,2)),list(c(1,3)))
as.data.frame
is.na(list(c(1,2)),list(c(1,3))
)
is.na(list(c(1,2),c(1,3)))
is.na(list(c(1,NA),c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x <- as.matrix(x)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
}
is.na(list(c(1,NA),c(1,3)))
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#' @export#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x <- as.matrix(x)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x <- as.matrix(x)#
	print(x)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	print(x)#
	x <- as.matrix(x)#
	print(x)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	print(all)#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	print(x)#
	x <- as.matrix(x)#
	print(x)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x <- matrix(unlist(x))#
	print(x)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	#dots <- lapply(list(...),function(x){if (is.atomic(x)) list(x) else x})#
	#fe <- do.call(c, dots)#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	all <- as.data.frame(c(x,fe))#
	rows <- rowSums(is.na(all))==0#
	l <- length(x)#
	for (i in 1:l){#
		if (!is.double(all[,i])) all[,i] <- as.double(all[,i])#
	}#
	for (i in (l+1):length(all)){#
		if (!is.factor(all[,i])) all[,i] <- as.factor(all[,i])#
	}#
	x <- matrix(unlist(x))#
	print(x)#
	x[rows] <- demeanlist(all[,1:l, drop = FALSE], all[,(l+1):length(all), drop = FALSE])#
	x#
}
demean(list(c1,c2),c3)
x = c("ok","ok1")
condition <- collapse(sapply(c(vars,fe), function(x){paste("is.na(",x,")")}, sep = "&")
)
condition <- paste(sapply(c(vars,fe), function(x){paste("is.na(",x,")")}, collapse = "&")
)
condition <- paste(sapply(c(vars,fe), function(x){paste("is.na(",x,")")}), collapse = "&")
vars <- c("ok","ok1")
condition <- paste(sapply(c(vars,fe), function(x){paste("is.na(",x,")")}), collapse = "&")
fe <- x
condition <- paste(sapply(c(vars,fe), function(x){paste("is.na(",x,")")}), collapse = "&")
condition
as.name(condition)
is.na(DT)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#
demean_ <- function(x, vars, fe){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe)]#
	rows <- rowSums(is.na(ans))==0#
	for (v in vars){#
		if (!is.double(ans[,v, with = FALSE])) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!is.factor(ans[,v, with = FALSE])) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	ans <- x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
demean
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
demean(list(v2,v3), list(id,v1))
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, vars, fe){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe))#
	}#
#
demean_ <- function(x, vars, fe){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe)]#
	rows <- rowSums(is.na(ans))==0#
	for (v in vars){#
		if (!is.double(ans[,v, with = FALSE])) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!is.factor(ans[,v, with = FALSE])) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	ans <- x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
library(dplyr)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
?is.na
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, vars, fe){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe))#
	}#
#
demean_ <- function(x, vars, fe){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe)]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!is.double(ans[,v, with = FALSE])) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!is.factor(ans[,v, with = FALSE])) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	ans <- x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#
demean_ <- function(x, vars, fe){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe)]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	ans <- x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean_ <- function(x, vars, fe){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe)]#
	print(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	ans <- x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean_ <- function(x, vars, fe){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	print(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	ans <- x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	print(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	ans <- x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	print(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
setdemean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
setdemean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	print(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean(DT, list(v2,v3), list(id,v1))
DT
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
setdemean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#' Demean a vector#
#' #
#' @param x List of variables to demean#
#' @param fe List of groups to use#
#' @return data.table with demeaned variables, with suffix "_demean"#
#' @details This function calls felm::demeanlist after checking for missing values and converting group variables into factors#
#' @examples                        #
#' setdemean(#
#
#' @export#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x <- copy(x)#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#' Demean a vector#
#' #
#' @param x List of variables to demean#
#' @param fe List of groups to use#
#' @return data.table with demeaned variables, with suffix "_demean"#
#' @details This function calls felm::demeanlist after checking for missing values and converting group variables into factors#
#' @examples                        #
#' setdemean(#
#
#' @export#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x <- copy(x)#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
	x#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#' Demean a vector#
#' #
#' @param x List of variables to demean#
#' @param fe List of groups to use#
#' @return data.table with demeaned variables, with suffix "_demean"#
#' @details This function calls felm::demeanlist after checking for missing values and converting group variables into factors#
#' @examples                        #
#' setdemean(#
#
#' @export#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x <- copy(x)#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
	x#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#' Demean a vector#
#' #
#' @param x List of variables to demean#
#' @param fe List of groups to use#
#' @return data.table with demeaned variables, with suffix "_demean"#
#' @details This function calls felm::demeanlist after checking for missing values and converting group variables into factors#
#' @examples                        #
#' setdemean(#
#
#' @export#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x <- copy(x)#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
	x#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
demean(DT, list(v2,v3), list(id,v1))
DT
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x <- copy(x)#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
	print(x)#
}#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
demean(DT, list(v2,v3), list(id,v1))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, vars, fe, suffix = "_demean", inplace = FALSE){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean", inplace = FALSE){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	if (!inplace){#
		x <- copy(x)#
	}#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, vars, fe, suffix = "_demean"){#
	  demean_(x, vars = substitute(vars), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, vars, fe, suffix = "_demean"){#
	stopifnot(is.data.table(x))#
	vars <- names(select_vars_(names(x), vars))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x <- copy(x)#
	x[, paste(vars,suffix,sep ="_") := as.list(m)]#
	print(x)#
}#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
demean(DT, list(v2,v3), list(id,v1))
devtools::document("/Users/Matthieu/Dropbox/Github/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar")
is.na("")
c(c(1, 2), c(3, 4))
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF2)#
	#> 25.9 kB#
	object_size(DF,DF2, merge(DF,DF2))#
	#> 40.1 kB#
	object_size(DF,DF2, rbind(DF,DF2))#
	#> 40.1 kB
l <- c("col1", NA, "col3")#
l[l == "col1"] <- "col1"
l
seq(1,1000, by = 2)#
2*(1:500)-1#
2* seq_length(500)-1#
seq(1,999, length.out = 500)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, ..., fe, suffix = "_demean", inplace = FALSE){#
	  demean_(x, .dots = lazy_dots(...), fe = substitute(fe), suffix = suffix)#
	}#
#
demean_ <- function(x, ..., .dots, fe, suffix = "_demean", inplace = FALSE){#
	stopifnot(is.data.table(x))#
	dots <- all_dots(.dots, ...)#
	vars <- names(select_vars_(names(x), dots))#
	fe <- names(select_vars_(names(x), fe))#
	ans <- x[, c(vars, fe), with = FALSE]#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	if (!inplace){#
		x <- copy(x)#
	}#
	x[rows, paste(vars,suffix,sep ="_") := as.list(m)]#
}
N=1e3; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          #
  v2 =  sample(1e6, N, TRUE),                        #
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) #
)#
demean(DT, list(v2,v3), fe = list(id,v1))
library(dplyr)
library(lazyeval)
N=1e3; K=100#
set.seed(1)#
DT <- data.table(#
  id = sample(5, N, TRUE),#
  v1 =  sample(5, N, TRUE),                          #
  v2 =  sample(1e6, N, TRUE),                        #
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) #
)#
demean(DT, list(v2,v3), fe = list(id,v1))
DT
devtools::document("/Users/Matthieu/Dropbox/Github/statar")
?mutate_
mutate_
mutate_.data.table
mutate_.tbl
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	ans <- as.data.table(x, fe)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
data.table(c(1,2), list(c(1,2), c(1,3)))
data.table(c(1,2), unlist(list(c(1,2), c(1,3))))
data.table(c(1,2), list(c(1,2), c(1,3)))
cbind(c(1,2), list(c(1,2), c(1,3)))
c(c(1,2), list(c(1,2), c(1,3)))
c(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	ans <- c(x, fe)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in vars){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
#' @export#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- setDT(c(x, fe))#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- setDT(c(x, fe))#
	print(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in fe){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- setDT(c(x, fe))#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in names(ans)[-1]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	for (v in names(ans)[-1]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[-1]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	print(ans)#
	for (v in names(ans)[-1]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, vars, with = FALSE], ans[, fe, with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	print(ans)#
	for (v in names(ans)[-1]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (i in names(ans)[1:length(x)]){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
#
	for (v in names(ans)[(length(x)+1):length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x <- as.data.table(x)#
	x[rows, paste(vars,suffix,sep ="_") := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	if (is.atomic(x)){#
		x <- list(x)#
	}#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (i in names(ans)[1:length(x)]){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
#
	for (v in names(ans)[(length(x)+1):length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x <- as.data.table(x)#
	x[rows, names(x) := as.list(m)]#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(!is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (i in names(ans)[1:length(x)]){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
#
	for (v in names(ans)[(length(x)+1):length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x <- as.data.table(x)#
	x[rows, names(x) := as.list(m)]#
}
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(!is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (i in names(ans)[1:length(x)]){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in names(ans)[(length(x)+1):length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x[rows] <- m#
}
demean
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (i in names(ans)[1:length(x)]){#
		if (!ans[,is.double(get(v))]) ans[, (v) := as.double(get(v))]#
	}#
	for (v in names(ans)[(length(x)+1):length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x[rows] <- m#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x[rows] <- m#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
x
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	print(m)#
	x[rows] <- m#
	x#
}
x
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	print(m)#
	x <- unlist(x)#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x <- unlist(x)#
	print(x)#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x<- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x <- unlist(x)#
	print(x)#
	print(m)#
	print(rows)#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x <- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE])#
	x <- unlist(x)#
	print(x)#
	print("M")#
	print(m)#
	print("rows")#
	print(rows)#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x <- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	x <- unlist(x)#
	print(x)#
	print("M")#
	print(m)#
	print("rows")#
	print(rows)#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x <- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(as.matrix(is.na(ans)))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	x <- unlist(x)#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
na.omit(DT)
is.na(DT)
rowSums(is.na(DT))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	x <- list(x)#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(x, fe)#
	setDT(ans)#
	rows <- rowSums(is.na(ans))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	x <- unlist(x)#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(list(x), fe)#
	setDT(ans)#
	rows <- rowSums(is.na(ans))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(1,2), c(1,3)))
demean(c(NA,2), list(c(1,2), c(1,3)))
demean(c(1,2), list(c(NA,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(list(x), fe)#
	setDT(ans)#
	print(ans)#
	rows <- rowSums(is.na(ans))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(NA,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(list(x), fe)#
	setDT(ans)#
	print(ans)#
	rows <- rowSums(is.na(ans))==0#
	ans <- ans[rows]#
	print(ans)#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	x[rows] <- m#
	x#
}
demean(c(1,2), list(c(NA,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	ans <- c(list(x), fe)#
	setDT(ans)#
	print(ans)#
	rows <- rowSums(is.na(ans))==0#
	ans <- ans[rows]#
	print(ans)#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	out <- rep(NA, length(x))#
	out[rows] <- m#
	out#
}
demean(c(1,2), list(c(NA,2), c(1,3)))
demean(c(1,2), c(1,1))  #
demean(c(NA), list(c(1,2), c(1,3)))           #
demean(c(1,2), list(c(NA,2), c(1,3)))
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	ans <- c(list(x), fe)#
	setDT(ans)#
	rows <- rowSums(is.na(ans))==0#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	out <- rep(NA, length(x))#
	out[rows] <- m#
	out#
}
demean(c(1,2), c(1,1))  #
demean(c(NA), list(c(1,2), c(1,3)))           #
demean(c(1,2), list(c(NA,2), c(1,3)))
demean(c(NA,2), list(c(1,2), c(1,3)))
devtools::document("/Users/Matthieu/Dropbox/Github/statar")
rows <- -data.table:::is_na(DT)
rows
rows <- data.table:::is_na(DT)
data.table:::is_na(DT)
-data.table:::is_na(DT)
!data.table:::is_na(DT)
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	ans <- c(list(x), fe)#
	setDT(ans)#
	rows <- !data.table:::is_na(ans)#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	out <- rep(NA, length(x))#
	out[rows] <- m#
	out#
}
data.table:::is_na(DT)
setwd("/Users/Matthieu/Dropbox/Github/statar/R")#
demean <- function(x, fe){#
	stopifnot(is.atomic(x))#
	if (is.double(x)){#
		x <- as.double(x)#
	}#
	if (is.atomic(fe)){#
		fe <- list(fe)#
	}#
	ans <- c(list(x), fe)#
	setDT(ans)#
	rows <- !data.table:::is_na(ans)#
	ans <- ans[rows]#
	for (v in names(ans)[2:length(ans)]){#
		if (!ans[,is.factor(get(v))]) ans[, (v) := as.factor(get(v))]#
	}#
	m <- unlist(demeanlist(ans[, "V1", with = FALSE], ans[, names(ans)[-1], with = FALSE]))#
	out <- rep(NA, length(x))#
	out[rows] <- m#
	out#
}
data.table:::is_na(DT)
