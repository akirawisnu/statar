DT[ ,paste("v1",f,sep="_"):=get(f)(v1)]
f="mean"
DT[ ,paste("v1",f,sep="_"):=get(f)(v1)]
f=as.name("mean")
DT[ ,paste("v1",f,sep="_"):=get(f)(v1)]
eval(substitute(DT[ ,paste("v1",f,sep="_"):=f(v1)]))
eval(substitute(DT[ ,"v1":=f(v1)]))
eval(substitute(DT[ ,v2:=f(v1)]))
eval(subs(DT[ ,v2:=f(v1)]))
subset2 <- function(x, condition) {#
  condition_call <- substitute(condition)#
  r <- eval(condition_call, x, parent.frame())#
  x[r, ]#
}#
#
scramble <- function(x) x[sample(nrow(x)), ]#
#
subscramble <- function(x, condition) {#
  scramble(subset2(x, condition))#
}
?as.name
subset2 <- function(x, condition) {#
  condition_call <- substitute(condition)#
  r <- eval(condition_call, x, parent.frame())#
  x[r, ]#
}#
#
scramble <- function(x) x[sample(nrow(x)), ]#
#
subscramble <- function(x, condition) {#
  scramble(subset2(x, condition))#
}
subscramble(sample_df,a>=4)
rm(a)
subset2 <- function(x, condition) {#
  condition_call <- substitute(condition)#
  r <- eval(condition_call, x, parent.frame())#
  x[r, ]#
}#
#
scramble <- function(x) x[sample(nrow(x)), ]#
#
subscramble <- function(x, condition) {#
  scramble(subset2(x, condition))#
}
subscramble(sample_df,a>=4)
f=function(i){ii=subs(i),DT[i]}
f=function(i){subs(DT[i])}
f(a==1)
f=function(i){eval(subs(DT[i]))}
f(a==1)
f=function(i){eval(subs(DT[i]))}
DT
DT[id==1]
DT[id==id01]
DT[id=="id01"]
condition=quote(id=="id01")#
	eval(subs(DT[condition]))
f=function(i){DT[i]}
DT[id=="id01"]
f[id=="id01"]
quote(,w=3)
a=quote(,w=3)
a=quote(w=3)
a=quote(w\=3)
N<-1000#
DT <- data.table(#
  id = sample(c("id01","id02","id03"),N, TRUE),     #
  v1 = sample(5, N, TRUE),                          #
  v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
  )
library(data.table)
N<-1000#
DT <- data.table(#
  id = sample(c("id01","id02","id03"),N, TRUE),     #
  v1 = sample(5, N, TRUE),                          #
  v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
  )
DT[,c("a","b"):=range(v1)]
DT
DT[,list(c("a","b"):=range(v1))]
DT[,`:=`(c("a","b")=range(v1))]
DT[,`:=`(list("a","b")=range(v1))]
DT[,list("a","b"):=range(v1))]
DT[,c("a","b"):=as.list(range(v1))]
DT
DT[,list(a,b):=as.list(range(v1))]
library(data.table)
N <-1e3#
DT <- data.table(#
 			id = sample(c("id01","id02","id03"),N, TRUE),     #
 			v1 = sample(5, N, TRUE),                          #
			v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
 			)
DT
varname <- "id"#
   	D[,v1_mean:=mean(v1),by=varname]
N <-1e3#
DT <- data.table(#
 			id = sample(c("id01","id02","id03"),N, TRUE),     #
 			v1 = sample(5, N, TRUE),                          #
			v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
 			)
f=mean
DT[,v:=f(v2)]
DT
as.character(f)
tempvar("name",envir=DT)
library(R.utils)
tempvar("name",DT)
tempvar("name",envir=DT)
tempvar("name",envir=as.environment(DT))
f<-mean
f
as.character(mean)
DT[,v2:=mean(v3*v1)]
DT[,v4:=mean(v2*v1)]
DT
function(i){stopif(i>5)}
f=function(i){stopif(i>5)}
apply(f,1:100)
apply(1:100,f)
sapply(1:100,f)
f=function(i){stopifnot(i>5)}
sapply(1:100,f)
debug(sapply)
sapply(1:100,f)
traceback(sapply(1:100,f))
undebug(sapply)
traceback(sapply(1:100,f))
sapply(1:100,f)
traceback()
f=function(i){stopifnot(i<5)}
sapply(1:100,f)
traceback()
options(error = browser)
sapply(1:100,f)
sapply(1:100,function(i){try(f(i)))
sapply(1:100,function(i){try(f(i))))
sapply(1:100,function(i){try(f(i)}))
sapply(1:100,function(i){try(f(i))}))
sapply(1:100,function(i){try(f(i))})
library(plm
)
?plm
DT
str(DT)
names(str(DT)(
))
names(str(DT))
str(DT)$v1
?str
atrr(DT)
attr(DT)
traceback()
attr(DT)
library(data.table)
attr(DT)
N<-1000#
DT <- data.table(#
  id = sample(c("id01","id02","id03"),N, TRUE),     #
  v1 = sample(5, N, TRUE),                          #
  v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
  )
attr(DT)
attributes(DT)
typeof(DT$v1)
typeof(DT$v2)
typeof(DT$v3)
typeof(DTid)
typeof(DT$id)
as.date("1990-01-01")
t=as.Date("1990-01-01")
typeof(t)
library(data.table)
DT <- data.table(id=sample(10,100,replace=T),v=runif(100))
DT[, as.list(quantile(v, c(0.2, 0.8))), by = id]
DT[, setnames(as.list(quantile(v, c(0.2, 0.8))),c("p20","p80"), by = id]
DT[, setnames(as.list(quantile(v, c(0.2, 0.8))),c("p20","p80")), by = id]
DT[, setNames(as.list(quantile(v, c(0.2, 0.8))),c("p20","p80")), by = id]
DT
DT[v2=runif()]
DT[v2=runif(100)]
DT[,list(v2=runif(100))]
DT[,v2:=runif(100)]
DT
v=quote(v2)
DT %>%group_by(id) %>% mutate(eval(subs(v3=v)))
DT %>% group_by(id) %>% mutate(eval(subs(v3=v)))
librar(dplyr)
library(dplyr)
DT %>% group_by(id) %>% mutate(eval(subs(v3=v)))
library(dpryr)
library(pryr)
DT %>% group_by(id) %>% mutate(eval(subs(v3=v)))
DT %>% group_by(id) %>% mutate(v3=v2)
DT[,c("v1","v2"):=quantile(v,c(0.1,0.9))]
DT
eval(substitute(v<-5),list(v="a"))#
    a
eval(substitute(v<-5),list(v="a"))
a
eval(subs(v<-5),list(v="a"))
a
eval(subs(v<-5),list(v=as.name("a")))
a
eval(subs(v<-5,list(v=as.name("a")))
)
a
eval(subs(v<-5,list(v=as.name("a"))))
a
assign("a",6)
a
DT
N<-1000#
DT <- data.table(#
  id = sample(c("id01","id02","id03"),N, TRUE),     #
  v1 = sample(5, N, TRUE),                          #
  v2 =  sample(round(runif(100,max=100),4), N, TRUE) #
  )
DT %>% group_by(id) %>% do(lm(v2~v1),.)
DT %>% group_by(id) %>% do(lm,v2~v1,.)
DT %>% group_by(id) %>% do(lm(v2~v1,.))
DT %>% group_by(id) %>% do(lm,formula=v2~v1))
DT %>% group_by(id) %>% do(lm,formula=v2~v1)
?do
print
felm
library(lfe)
felm
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(setdiff(names(DT), cols), names(DT)) else ansvars = cols#
#
  if (!length(ansvar)) DT[,ansvars:=NULL]#
}
setwd("/Users/Matthieu/Dropbox/Symlink")#
suppressMessages(library("magrittr"))#
suppressMessages(library("data.table"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(setdiff(names(DT), cols), names(DT)) else ansvars = cols#
#
  if (!length(ansvar)) DT[,ansvars:=NULL]#
}
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(setdiff(names(DT), cols), names(DT)) else ansvars = cols#
#
  if (!length(ansvar)) DT[,ansvars:=NULL]#
}
setwd("/Users/Matthieu/Dropbox/Github/rvsstata")#
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT[,"v*
]
'
]
keep(DT,"v*")
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(setdiff(names(DT), cols), names(DT)) else ansvars = cols#
#
  if (!length(ansvars)) DT[,ansvars:=NULL]#
}
keep(DT,"v*")
debug(keep)
keep(DT,"v*")
ansvars
cols
names(DT)
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols)) else ansvars = cols#
#
  if (!length(ansvars)) DT[,ansvars:=NULL]#
}
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
#
  if (!length(ansvars)) DT[,ansvars:=NULL]#
}
keep(DT,"v*")
DT
debug(keep)
keep(DT,"v*")
ansvars
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
#
  if (length(ansvars)) DT[,ansvars:=NULL]#
}
keep(DT,"v*")
DT
ansvar="id"
DT[,ansvars:=NULL]
DT
DT[,(ansvars):=NULL]
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
#
  if (length(ansvars)) DT[,c(ansvars):=NULL] #
}
DT[,ansvars:=NULL]
DT
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
#
keep=function(DT,cols){#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
#
  if (length(ansvars)) DT[,c(ansvars):=NULL] #
}
DT[,ansvars:=NULL]
ansvars="id"
DT[,ansvars:=NULL]
DT
DT[,ansvars:=NULL]
DT
DT[,(ansvars):=NULL]
DT
colVar = "col1"
DT[, colVar:=1, with=FALSE]
DT
DT[, colVar:=1, with=FALSE,verbose=T]
DT[, colVar:=1, with=FALSE,verbose=T]
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
#
make=function(DT,fun,cols=names(DT),...){#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
      DT[,(ansvars):=NULL] #
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
}
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
# DT %>% set(order,"v*")#
# DT %>% set(sort,"v*")#
# DT %>% set(sort,"v?")#
# DT %>% set(rename,"v1","v11")#
make=function(DT,fun,cols=names(DT),...){#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
      DT[,(ansvars):=NULL] #
  }#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
#
make=function(DT,fun,cols=names(DT),...){#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD),.SDcols=colsc,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
#
}
DT %>% make(keep,"v1")
DT
setwd("/Users/Matthieu/Dropbox/Github/rvsstata")#
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% makes(summarize,"v*"))
DT %>% make(summarize,"v*"))
DT %>% make(summarize,"v*")
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
# DT %>% make(order,"v*")#
# DT %>% make(sort,"v*")#
# DT %>% make(rename,"v1","v11")#
# DT %>% make(keep,"v?")#
make=function(DT,fun,cols=names(DT),...){#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
#
}
DT %>% make(summarize,"v*")
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
#
## describe#
describe=function(M,details = FALSE,na.rm = TRUE,mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
      x.original <- x#
      first.part <- ""#
      if (is.na(x) | is.null(x)) {#
          return("")#
      }#
      if (simply.output == TRUE) {#
          if (!is.numeric(x)) {#
              return(.remove.special.chars(x))#
          }#
      }#
      if (x.original < 0) {#
          x <- abs(x)#
      }#
      if (!is.na(decimal.places)) {#
          if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
              0)) {#
              round.result <- round(x, digits = decimal.places)#
          }#
          else {#
              temp.places <- decimal.places#
              if (!.is.all.integers(x)) {#
                while ((round(x, digits = temp.places) == 0) & #
                  (temp.places < (decimal.places + .format.max.extra.digits))) {#
                  temp.places <- temp.places + 1#
                }#
              }#
              round.result <- round(x, digits = temp.places)#
              decimal.places <- temp.places#
          }#
          if ((round.up.positive == TRUE) & (round.result < #
              x)) {#
              if (x > (10^((-1) * (decimal.places + 1)))) {#
                round.result <- round.result + 10^((-1) * decimal.places)#
              }#
              else {#
                round.result <- 0#
              }#
          }#
      }#
      else {#
          round.result <- x#
      }#
      round.result.char <- as.character(format(round.result, #
          scientific = FALSE))#
      split.round.result <- unlist(strsplit(round.result.char, #
          "\\."))#
      for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
          if (.format.digit.separator.where[i] <= 0) {#
              .format.digit.separator.where[i] <<- -1#
          }#
      }#
      separator.count <- 1#
      length.integer.part <- nchar(split.round.result[1])#
      digits.in.separated.unit <- 0#
      for (i in seq(from = length.integer.part, to = 1)) {#
          if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
              (substr(split.round.result[1], i, i) != "-")) {#
              first.part <- paste(.format.digit.separator, #
                first.part, sep = "")#
              if (separator.count < length(.format.digit.separator.where)) {#
                separator.count <- separator.count + 1#
              }#
              digits.in.separated.unit <- 0#
          }#
          first.part <- paste(substr(split.round.result[1], #
              i, i), first.part, sep = "")#
          digits.in.separated.unit <- digits.in.separated.unit + #
              1#
      }#
      if (x.original < 0) {#
          if (.format.dec.mark.align == TRUE) {#
              first.part <- paste("-", first.part, sep = "")#
          }#
          else {#
              first.part <- paste("$-$", first.part, sep = "")#
          }#
      }#
      if (!is.na(decimal.places)) {#
          if (decimal.places <= 0) {#
              return(first.part)#
          }#
      }#
      if (.format.initial.zero == FALSE) {#
          if ((round.result >= 0) & (round.result < 1)) {#
              first.part <- ""#
          }#
      }#
      if (length(split.round.result) == 2) {#
          if (is.na(decimal.places)) {#
              return(paste(first.part, .format.decimal.character, #
                split.round.result[2], sep = ""))#
          }#
          if (nchar(split.round.result[2]) < decimal.places) {#
              decimal.part <- split.round.result[2]#
              for (i in seq(from = 1, to = (decimal.places - #
                nchar(split.round.result[2])))) {#
                decimal.part <- paste(decimal.part, "0", sep = "")#
              }#
              return(paste(first.part, .format.decimal.character, #
                decimal.part, sep = ""))#
          }#
          else {#
              return(paste(first.part, .format.decimal.character, #
                split.round.result[2], sep = ""))#
          }#
      }#
      else if (length(split.round.result) == 1) {#
          if (is.na(decimal.places)) {#
              return(paste(first.part, .format.decimal.character, #
                decimal.part, sep = ""))#
          }#
          decimal.part <- ""#
          for (i in seq(from = 1, to = decimal.places)) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
          }#
          return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
      }#
      else {#
          return(NULL)#
      }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
#
  if (details==FALSE) {#
   sum_mean <-as.data.frame(mclapply(M ,function(x){c(length(x),sum(is.na(x)),mean(x,na.rm=na.rm),sd(x,na.rm= na.rm),quantile(x,c(0,1),type=1,na.rm=na.rm))}))#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <- c("N","NA","Mean","Sd","Min","Max")#
  } else {#
    N <- nrow(M)#
    sum_mean <- colMeans(M ,na.rm=na.rm)#
    f=function(x,m){#
      sum_higher <- colMeans(DT[,list((x-m)^2,(x-m)^3,(x-m)^4)],na.rm=na.rm)#
      sum_higher[1] <- sqrt(sum_higher[1])#
      sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
      sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
      sum_quantile=quantile(x,c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type=1,na.rm=na.rm,names=FALSE)#
      sum <- c(N,sum(is.na(x)),m,sum_higher,sum_quantile)#
    }#
    sum <- do.call(cbind,mcMap(f,M,sum_mean))#
    rownames(sum) <- c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),function(x){#
    y <- .iround(x,decimal.places=3)#
    y<- str_replace(y,"0+$","")#
    if (y==""){#
      y <- "0"#
    }#
    y<- str_replace(y,"\\.$","")#
    y<- str_replace(y,"-0","0")#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
}
DT %>% make(summarize,"v*")
DT %>% make(summarize,"v*",d=T)
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
make=function(DT,fun,cols=names(DT),...){#
  a=eval(substitute(alist(...)))#
#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
#
}
debug(make)
DT %>% make(summarize,"v*",d=T)
a
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
make=function(DT,fun,cols=names(DT),...,i=NULL,by=NULL,d=FALSE){#
  options=eval(substitute(alist(...)))#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (!colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD,d),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
DT %>% make(summarize,"v*",d=T)
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
#
make=function(DT,fun,cols=names(DT),...,i=NULL,by=NULL,d=FALSE){#
  options=eval(substitute(alist(...)))#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
    if (colm) ansvars = setdiff(names(DT), ansvars) else ansvars = ansvars#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD,d),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
DT %>% make(summarize,"v*",d=T)
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
make=function(DT,fun=c("sort","order","rename","summarize","balance"),cols=names(DT),...,i=NULL,by=NULL,d=FALSE){#
  options=eval(substitute(alist(...)))#
  func=as.character(substitute(fun))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
    if (colm) ansvars = setdiff(names(DT), ansvars) else ansvars = ansvars#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD,d),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
make(DT,so,"v2")
?glob2rx
?deparse
summary(DT)
?r
?match.arg
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
r=function(DT,fun,cols=names(DT),...,i=NULL,by=NULL,d=FALSE){#
  func=as.character(substitute(fun))#
  func <-match.arg(func,c("sort","order","rename","summarize","balance"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
    if (colm) ansvars = setdiff(names(DT), ansvars) else ansvars = ansvars#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD,d),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
DT $>$ rmake=function(DT,fun,cols=names(DT),...,i=NULL,by=NULL,d=FALSE){#
  func=as.character(substitute(fun))#
  func <-match.arg(func,c("sort","order","rename","summarize","balance"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
    if (colm) ansvars = setdiff(names(DT), ansvars) else ansvars = ansvars#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD,d),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/stataR/R")#
make=function(DT,fun,cols=names(DT),...,i=NULL,by=NULL,d=FALSE){#
  func=as.character(substitute(fun))#
  func <-match.arg(func,c("sort","order","rename","summarize","balance"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  if (is.call(colsub) && colsub[[1L]] == "-") {#
      colm = TRUE#
      cols = eval(colsub[[2L]], parent.frame(), parent.frame())#
  } else colm = FALSE#
  if (!is.character(cols)) stop("cols should be column numbers or names")#
  if (any(is.na(cols))) stop("Some items of cols are NA)")#
  if (any(!cols %chin% names(DT))){#
      #try wildcard #
      if (length(cols) !=1L) stop("Some items of cols are not column names")#
      cols_vector <- strsplit(cols, "\\s+")[[1]]#
      cols=NULL#
       for (c in cols_vector){#
          temp <- grep(glob2rx(c),names(DT),value=TRUE)#
          if (!length(temp)) stop("Some items of cols are not column names")#
          cols <- c(cols,temp)#
      }#
  }#
  if (colm) ansvars = setdiff(names(DT), cols) else ansvars = cols#
  if (func=="sort"){#
    eval(substitute(setkeyv(DT,ansvars,...)))#
  }#
  if (func=="order"){#
    eval(substitute(setcolorder(DT,c(ansvars,setdiff(names(DT),ansvars),...))))#
  }#
  if (func=="rename"){#
    eval(substitute(setnames(DT,ansvars,...)))#
  }#
  if (func=="keep"){#
    if (colm) ansvars = setdiff(names(DT), ansvars) else ansvars = ansvars#
      DT[,(ansvars):=NULL] #
  }#
#
  if (func=="summarize"){#
      eval(substitute(DT[,describe(.SD,d),.SDcols=ansvars,...]))#
  }#
#
  if (func=="balance"){#
    setkeyv(DT,c(by,ansvars))#
    ans <- DT[, seq.int(get(ansvars)[1L], get(ansvars)[.N]), by = by]#
    setnames(ans,"V1",ansvars)#
    setkeyv(ans,c(by,ansvars))#
    DT[ans,allow.cartesian=TRUE]#
  }#
}
DT %>% make(summarize,"v*",d=T)
DT %>% make(summ,"v*",d=T)
