l
condition = l== "col1"
condition
l[condition] <- c("col1")
l[c(TRUE,NA,FALSE) <- c("col1")
)
l[c(TRUE,NA,FALSE)] <- c("col1")
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(l == "col1")
]
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(condition)] <- c("col1")
l
l[NA,1]
l[c(NA,1)]
l <- c("col1", "col2", "col3")#
    l[c(NA,1)]
l[c(TRUE, NA, TRUE)]
l[c(NA, TRUE)]
l <- c("col1", NA, "col3")#
	l[which(l == "col1" | l == "col3")]
l <- c("col1", NA, "col3")#
	l[l == "col1"]
l[which(l == "col1")]
DT
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
lm(v2~v1,DT)
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
lm(v2~v1,DT)
result <- lm(v2~v1,DT)
names(result)
result$coefficients
result$model
result
names(result)
summary(result)
list(summary(result))
names(summary(result))
result <- felm(v2~v1,DT)
library(lfe)
result <- felm(v2~v1,DT)
names(result)
names(result)$se
result$se
result$coefficients
result$robustvcv
summary(result)
names(summary(result))
?summary
object_size(summary(result))
library(pryr)
object_size(summary(result))
object_size(result)
result <- lm(y ~ x)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- lm(v3 ~ v2, DT)
pryr::object_size(results)
pryr::object_size(result)
pryr::object_size(summary(results))
pryr::object_size(summary(result))
names(result)
result$coefficients
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2, DT)
vcov(result)
result
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|||v1, DT)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|0|0|v1, DT)
names(result)
vcov(result)
result$vcv
result$robustvcv
object_size(results)
object_size(result)
result <- felm(v3~v2|0|0|v1, DT)
stargazer(result, type = "text")
library(stargazer)
stargazer(result, type = "text")
devtools::install_github("matthieugomez/statar")
lazy(date)
library(lazyeval)
lazy(date0
)
lazy(date)
lazy_eval(lazy(date))
lazy_eval(lazy(date1))
select_vars(names(df),lazy(ok))
library(dplyr)
select_vars(names(df),lazy(ok))
select_vars(names(df), args = lazy(ok))
lazydots
lazy_dots
lazykeep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}(date)
df
df <- data.frame(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
 )
keep(df,id)
keep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}
keep(df,id)
lazy(date)
lazy(date1)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
dt <- data.table(id = c(1,2), date = c(1999, 2000))#
setcolorder(dt, "date", 1)#
setcolorder(dt, 2, 1)#
setcolorder(dt, "id", 2)#
setcolorder(dt, 1, 2)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ v2, DT)
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
n
f
felm(v3 ~ 1|0|(v2~v1), DT)
pform
parseformula(formula,data)
knownargs
sc
sc <- names(sys.call())[-1]
sc
named <- knownargs[pmatch(sc, knownargs)]
formula
f
felm::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
lfe:::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
felm = function (formula, data, iv = NULL, clustervar = NULL, exactDOF = FALSE, #
    subset, na.action, contrasts = NULL, ...) #
{#
    knownargs <- c("iv", "clustervar", "cmethod")#
    sc <- names(sys.call())[-1]#
    named <- knownargs[pmatch(sc, knownargs)]#
    for (arg in c("iv", "clustervar")) {#
        if (!is.null(eval(as.name(arg))) && !(arg %in% named)) {#
            warning("Please specify the '", arg, "' argument by name, or use a multi part formula. Its position in the argument list will change in a later version")#
        }#
    }#
    mf <- match.call(expand.dots = FALSE)#
    cmethod <- "cgm"#
    args <- list(...)#
    ka <- knownargs[pmatch(names(args), knownargs, duplicates.ok = FALSE)]#
    names(args)[!is.na(ka)] <- ka[!is.na(ka)]#
    env <- environment()#
    lapply(intersect(knownargs, ka), function(arg) assign(arg, #
        args[[arg]], pos = env))#
    if (!(cmethod %in% c("cgm", "gaure"))) #
        stop("Unknown cmethod: ", cmethod)#
    unk <- setdiff(names(args), knownargs)#
    if (length(unk) > 0) #
        stop("unknown arguments ", paste(unk, collapse = " "))#
    if (missing(data)) #
        data <- environment(formula)#
    pf <- parent.frame()#
    pform <- parseformula(formula, data)#
    print(formula)#
    print(pform)#
}
felm(v3 ~ 1|0|v2~v1, DT)
parseformula <- function (form, data) #
{#
    f <- as.Formula(form)#
    len <- length(f)[[2]]#
    if (len == 1) #
        return(oldparseformula(form, data))#
    opart <- formula(f, lhs = 1, rhs = 1)#
    if (len == 1) #
        return(list(formula = opart, gpart = ~0, ivpart = ~0, #
            cpart = ~0))#
    gpart <- formula(f, lhs = 0, rhs = 2)#
    if (!nopart(gpart)) {#
        tm <- terms(gpart, keep.order = TRUE)#
        parts <- attr(tm, "term.labels")#
        parts <- parts[parts != "0"]#
        nm <- parts#
        glist <- lapply(paste(".G(", parts, ")", sep = ""), function(e) parse(text = e))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- lapply(glist, eval, list(.G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- lapply(glist, eval, data, as.environment(list(.G = Gfunc, #
                `:` = Ginfunc)))#
        }#
        names(fl) <- nm#
    }#
    else {#
        fl <- NULL#
    }#
    if (len == 2) #
        return(list(formula = opart, fl = fl, gpart = gpart, #
            ivpart = ~0, cpart = ~0))#
    ivparts <- formula(f, lhs = 0, rhs = 3, drop = TRUE)#
    if (!nopart(ivparts) && length(ivparts[[2]]) > 1 && ivparts[[2]][[1]] == #
        "(") {#
        ivspec <- as.Formula(ivparts[[2]][[2]])#
        lhs <- formula(ivspec, rhs = 0)#
        ivpart <- lapply(seq_along(all.vars(lhs)), function(i) formula(ivspec, #
            lhs = i))#
    }#
    else {#
        ivpart <- NULL#
    }#
    if (len == 3 && !is.null(ivpart)) #
        return(list(formula = opart, fl = fl, iv = ivpart, gpart = gpart, #
            ivpart = ivparts, cpart = ~0))#
    if (len == 3 && is.null(ivpart)) {#
        cpart <- ivparts#
        ivparts <- NULL#
    }#
    else {#
        cpart <- formula(f, lhs = 0, rhs = 4, drop = TRUE)#
    }#
    if (!nopart(cpart)) {#
        tm <- terms(cpart, keep.order = TRUE)#
        nm <- parts <- attr(tm, "term.labels")#
        clist <- lapply(paste("factor(", parts, ")", sep = ""), #
            function(e) parse(text = e))#
        cluster <- lapply(clist, eval, data)#
        names(cluster) <- nm#
    }#
    else {#
        cluster <- NULL#
    }#
    list(formula = opart, fl = fl, iv = ivpart, cluster = cluster, #
        gpart = gpart, ivpart = ivparts, cpart = cpart)#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(Formula)
felm(v3 ~ 1|0|v2~v1, DT)
oldparseformula = function (formula, data) #
{#
    trm <- terms(formula, specials = c("G"))#
    feidx <- attr(trm, "specials")$G + 1#
    va <- attr(trm, "variables")#
    festr <- paste(sapply(feidx, function(i) deparse(va[[i]])), #
        collapse = "+")#
    if (festr != "") {#
        formula <- update(formula, paste(". ~ . -(", festr, ") - 1"))#
        felist <- parse(text = paste("list(", gsub("+", ",", #
            festr, fixed = TRUE), ")", sep = ""))#
        nm <- eval(felist, list(G = function(arg) deparse(substitute(arg))))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- eval(felist, list(G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- local({#
                eval(felist, data)#
            }, list(G = Gfunc, `:` = Ginfunc))#
        }#
        names(fl) <- nm#
        gpart <- eval(parse(text = paste("~", paste(nm, collapse = "+"))))#
        if (is.null(names(fl))) #
            names(fl) <- paste("fe", 1:length(fl), sep = "")#
    }#
    else {#
        fl <- NULL#
        gpart <- ~0#
    }#
    return(list(formula = formula, fl = fl, gpart = gpart, ivpart = ~0, #
        cpart = ~0))#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
formula
pform
f <- as.Formula(formula)
f
felm(v3 ~ 1|0|(v2~v1), DT)
s
n
formula
data
p <- as.Formula(formula)
p
length(f)[[2]]
length(p)[[2]]
length(p)[[1]]
names(length(p))
length(p)
p
length(formula)
length(formula)[[2]]
gpart <-  formula(p, lhs = 0, rhs = 2)
nopart(gpart)
ivparts <- formula(p, lhs = 0, rhs = 3, drop = TRUE)
ivparts
f
as.list(body(felm))
trace(felm, print(mf), at = 40)
trace(felm, quote(print(mf)), at = 40)
felm(v3 ~ 1|0|(v2~v1), DT)
g=function(formula,env){eval(formula,env)}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(y~t1, parent.frame())}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f(1:10)
g=function(formula,env){stats::model.frame(formula,env)}
f(1:10)
f=function(){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
x <- 1:10
f(1:10)
f()
ls()
ls(parent.env())
?ls
g=function(formula,env){eval(formula,env)}
g=function(formula,env){stats::model.frame(formula,env)}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f()
lfe::project
library(data.table)
last(c(1,2))
library(statar)
?setcols
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package/R/statar.R")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?saveRDS
x <- data.table(a = rep(1:2, each = 3), b=1:6) y <- data.table(a = 0:1, bb = 10:11)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
library(data.table)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
join(x, y, type = "inner", check = 1~m)
biglm
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
biglm(v1~id)
biglm(v1~id, DT)
library(biglm)
biglm(v1~id, DT)
?biglm
?speedlm
library(speedlm)
library(speedglm)
?speedlm
system.time(speedlm(v1~id,DT))
system.time(speedlm.fit(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
object.size(biglm(v1~id,DT))
object.size(speedlm(v1~id,DT))
ls(getNamespace("lfe"), all.names=TRUE)
C_conncomp
id <- function(){print("1")}
g<- function(x){lazy(x)}
g(id)
library(lazyeval)
g(id)
install.packages("lfe")
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
fllibrary(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
felm
felm::project
lfe::project
lfe:::project
x
?felm
remove.packages("lfe")         # revert back to CRAN
install.packages("data.table")
install.packages("lfe")
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)#
#> "Error in eval(expr, envir, enclos) : object 'v2(fit)' not found”
lfe
sessionInfo()
lfe
felm
project
lfe::project
lfe:::project
doprojols
felm::doprojols
felm:::doprojols
felm::doprojols
lfe:::doprojols
library(statar)
# lag/lead create lag/lead variables (corresponds to Stata L. F.)#
year <- c(1992, 1989, 1991, 1990, 1994, 1992, 1991)#
value <- c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
lag(value, 1, order_by = year) # returns value in previous year, like  dplyr::lag#
lag(value, 1, along_with = year) #  returns value in year - 1#
#
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, months(1), along_with = datem) #
#
# tag (corresponds to Stata tag)#
tag(c(1, 2))#
tag(c(1, 2), fromLast = TRUE)#
#
# sample_mode (corresponds to Stata mode)#
sample_mode(c(1, 2, 2))#
sample_mode(c(1, 2))#
sample_mode(c(NA, NA, 1))#
sample_mode(c(NA, NA, 1), na.rm = TRUE)#
#
# partition creates integer variable for quantile categories (corresponds to Stata xtile)#
v <- sample(c(NA, 1:10), 10, TRUE)                   #
partition(v, nq = 3) # 3 groups based on terciles#
partition(v, cutpoints = c(1, 3)) # 3 groups based on two cutpoints#
#
# winsorize (default based on 5 x interquartile range)#
winsorize(c(1, 2, 99))#
winsorize(c(1, 2, 99), replace = NA)#
winsorize(c(1, 2, 3, 99), cutpoints = quantile(c(1, 2, 3, 99), c(0.01, 0.99), type = 1))
library(data.table)#
library(dplyr)#
#
# sum_up (= Stata summarize)#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE),#
  )#
DT %>% sum_up#
DT %>% sum_up(v2, d=T)#
DT %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
# fill_gap (= Stata tsfill)#
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#
# fill na (in a new dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_na(value, along_with = date) #
DT %>% group_by(id) %>% fill_na(value, along_with = date, roll = "nearest")#
#
# fill na (in the original dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
setkeyv(DT,c("id", "date"))#
setna(DT, "value")#
setna(DT, "value", roll = "nearest")
x <- data.table(a = rep(1:2, each = 3), b = 1:6)#
y <- data.table(a = 0:1, bb = 10:11)#
# outer corresponds to Stata joinby keep(master matched using)#
join(x, y, type = "outer")#
# left corresponds to Stata joinby keep(master matched)#
join(x, y, type = "left")#
# right corresponds to Stata joinby keep(mached using)#
join(x, y, type = "right")#
# inner corresponds to Stata joinby keep(matched)#
join(x, y, type = "inner")#
#
join(x, y, type = "semi")#
join(x, y, type = "anti")#
join(x, y, type = "outer", check = 1~m)#
join(x, y, type = "outer", gen = "_merge")
sessionInfo()
library(lfe)
sessionInfo()
install.packages(lfe)
install.packages(felm)
install.packages("felm")
install.packages("lfe")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repos = NULL, type="source")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("lfe")
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
system.info()
systeminfo()
session.info()
sessionInfo()
library(lfe)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL, type = "source")
library(lfe)
sessionInfo
sessionInfo()
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
?felm
felm
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?graph
library(statar)
?graph
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by, graph = graph))#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign(DT, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
        } else{#
          group <- byvars#
        }#
        if (!length(w)){#
          w <- NULL#
        }#
        # theme#
        DT <- DT[, c(group, vars, w)]#
        DT <- gather_(DT, "variable", "value", gather_cols = vars)#
#
        theme = theme_set(theme_minimal())#
        theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
        theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
        theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
        #Data#
        ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
        + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      DT <- DT[, c(vars, w)]#
      DT <- gather_(DT, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
  if (!length(byvars)){#
    invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
  } else{#
    invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by, graph = graph))#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign(DT, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
        } else{#
          group <- byvars#
        }#
        if (!length(w)){#
          w <- NULL#
        }#
        # theme#
        DT <- DT[, c(group, vars, w)]#
        DT <- gather_(DT, "variable", "value", gather_cols = vars)#
#
        theme = theme_set(theme_minimal())#
        theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
        theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
        theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
        #Data#
        ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
        + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      DT <- DT[, c(vars, w)]#
      DT <- gather_(DT, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1)
setwd("/Users/Matthieu/Dropbox/Symlink")#
devtools::install_github("matthieugomez/statar")#
#
suppressMessages(library("data.table"))#
suppressMessages(library("statar"))#
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))#
assignInNamespace("cedta.override",#
                  c(data.table:::cedta.override,"IRkernel"),#
                  "data.table")
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign(DT, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
        } else{#
          group <- byvars#
        }#
        if (!length(w)){#
          w <- NULL#
        }#
        # theme#
        DT <- DT[, c(group, vars, w)]#
        DT <- gather_(DT, "variable", "value", gather_cols = vars)#
#
        theme = theme_set(theme_minimal())#
        theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
        theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
        theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
        #Data#
        ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
        + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      DT <- DT[, c(vars, w)]#
      DT <- gather_(DT, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1)
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign_var(DT, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      DT <- DT[, c(group, vars, w)]#
      DT <- gather_(DT, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      DT <- DT[, c(vars, w)]#
      DT <- gather_(DT, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
dt_env <- function(dt, env) {#
  env <- new.env(parent = env, size = 2L)#
  env$dt <- dt#
  env$vars <- deparse_all(groups(dt))#
  env#
}#
#
deparse_all <- function(x) {#
  deparse2 <- function(x) paste(deparse(x, width.cutoff = 500L), collapse = "")#
  vapply(x, deparse2, FUN.VALUE = character(1))#
}#
assign_var <- function(x, ..., env = parent.frame(), inherits = FALSE){#
    names <- sapply(lazy_dots(...), function(x){as.character(x$expr)})#
    assign_var_(x = x, names = names, inherits = inherits, env = parent.frame())#
}#
#
assign_var_ <- function(x, names, env = parent.frame(), inherits=TRUE) {#
    for (name in names){#
        tempname <- tempname(paste("temp",name,sep="_"), where = env, inherits = inherits)#
        assign(name, tempname, env)#
    }#
}#
#
evaldt <- function(x, env = parent.frame()){#
    x <- substitute(x)#
    names <- ls(all.names = TRUE, envir = env)#
    L <- NULL#
    names_l <- NULL#
    for (name in names){#
        if (exists(name, envir = env, inherits = FALSE, mode = "character")){#
            get_name <- get(name, envir = env)#
            # suppress NULL but also character vector because I'm not sure how to replace list(a,.x) when length(.x) is >1#
            if (length(get_name)==1){#
                L <- c(L, as.name(get_name))#
                names_l <- c(names_l, name)#
            }#
        }#
    }#
    names(L) <- names_l#
    # replace names, even in LHS of list#
    replace_name <- function(x, lenv, env){#
        i <- 0#
        if (is.atomic(x) | is.symbol(x)){#
            if (str_detect(as.character(x),"*\\.")){#
                xx <- str_replace(as.character(x),".","")#
                if (exists(xx, envir = env, inherits = FALSE, mode = "character")){#
                    get_name <- get(xx, envir = env)#
                    if (length(get_name)==1){#
                      return(as.name(get_name))#
                    }#
                } else{#
                  return(x)#
                }#
            } else{#
                return(x)#
            }#
        }#
        else{#
            out <- NULL#
            for (i in 1:length(x)){#
                if (!is.null(x[[i]])){#
                    x[[i]] <- replace_name(x[[i]], lenv, env)#
                }#
            }#
            names <- NULL#
            if (x[[1]] == quote(list)){#
                for (name in names(x)){#
                    if (str_detect(name,"\\.")) {#
                        namename <- str_replace(as.character(name),".","")#
                        if (exists(namename, envir = env, inherits = FALSE, mode = "character")){#
                            names <- c(names, get(namename, env = env))#
                        } else{#
                            names <- c(names, name)#
                        }#
                    } #
                    else{#
                        names <- c(names, name)#
                    }#
                }#
                names(x) <- names#
            }#
        }#
        x#
    }#
    call <- replace_name(x, as.list(L), env = env)#
    eval(call, env)#
}
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w)]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w)]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w)]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w)]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, mapping=aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, mapping=aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
tracebak()
traceback()
sum_up(DT, id, v1, graph = T)
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (!length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
      + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(DT, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group ))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, id, v1, graph = T)
sum_up(DT, v1, graph = T, by = id)
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      DT[, group := as.factor(.group)]#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
      #Data#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
      #Data#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
      #Data#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
traceback()
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)  # + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- gather_(x[, c(group, vars, w), with = FALSE], "variable", "value", gather_cols = vars)#
#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group , fill = group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)  # + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    theme = theme_set(theme_minimal())#
    theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
    theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
    theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group , fill = group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)  # + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour=group , fill=group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group , fill = group))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)  # + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group , fill = group)) #
      # +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group ), fill = "white", fun.data =  mean_cl_boot)  # + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w, colour = "variable")) + geom_boxplot(outlier.colour = NULL, aes_string(fill = "variable")) +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)  # + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      ggplot(x, aes_string(y = "value", x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      print(ggplot(x, aes_string(y = "value", x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") )#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      print(ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      #Data#
      print(x)#
      print(ggplot(x, aes_string(y = "value", x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") )#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, "variable", "value", gather_cols = vars)#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
      #Data#
      print(ggplot(x, aes_string(y = "value" , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "variable"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value)#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, #
      print(x)#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      print(ggplot(x, aes_string(y = value , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value)#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(x)#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      print(ggplot(x, aes_string(y = value , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value)#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      print(x)#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(x)#
      print(glimpse(x))#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(ggplot(x, aes_string(y = value , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value)#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(x)#
      print(glimpse(x))#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(ggplot(x, aes_string(y = value , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
sum_up(DT, v2, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value, group)#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(x)#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }#
    else{#
      evaldt(x[, .group := 1])#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(ggplot(x, aes_string(y = value , x = group, weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value, group)#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)]#
      print(x)#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }  else{#
      evaldt(x[, .group := 1])#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)])#
      print(ggplot(x, aes_string(y = value , x = group, weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value, group)#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)])#
      print(x)#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }  else{#
      evaldt(x[, .group := 1])#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)])#
      print(ggplot(x, aes_string(y = value , x = group, weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value, group)#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)])#
      print(x)#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
    }  else{#
      evaldt(x[, .group := 1])#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, .variable := as.factor(.variable)])#
      print(ggplot(x, aes_string(y = value , x = group, weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T)
sum_up(DT, v2, graph = T, by = v1)
sum_up(DT, v2, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value, group)#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    # theme#
    x <- gather_(x, variable, value, gather_cols = vars)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))) #
      #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
DT
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value, group)#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    # theme#
    x <- gather_(x, variable, value, gather_cols = vars)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))) #
      #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, v2, graph = T, by = v1)
sum_up(DT, v2, graph = T)
sum_up(DT, graph = T, by = v1`)
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value, group)#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    # theme#
    x <-       suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))) #
      #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~", variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    assign_var(x, variable, value)#
    if (length(byvars)){#
      assign_var(x, group)#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
      if (!length(w)){#
        w <- NULL#
      }#
      # theme#
      x <- x[, c(group, vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      evaldt(x[, #
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group)) #
        #+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") )#
    }#
    else{#
      x <- x[, c(vars, w), with = FALSE]#
      x <- gather_(x, variable, value, gather_cols = vars)#
      print(ggplot(x, aes_string(y = value , weight = w)) + geom_boxplot(outlier.colour = NULL)  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = variable), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)}))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
#
      if (!length(w)){#
        w <- NULL#
      }#
      x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))      evaldt(x[, #
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
#
      if (!length(w)){#
        w <- NULL#
      }#
      x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
      evaldt(x[, .variable := as.factor(.variable)])#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
#
      if (!length(w)){#
        w <- NULL#
      }#
      x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
      print(x)#
      evaldt(x[, .variable := as.factor(.variable)])#
      print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ paste0("~",variable), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w, colour = group)) + geom_boxplot(outlier.colour = NULL, aes_string(fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, id, v1, graph = T)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = colour), fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = colour), fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.7)   + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.7)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.7)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = colour), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      theme= theme_update(axis.title.x=element_blank(),#
         axis.text.x=element_blank(),#
         axis.ticks.x=element_blank())#
    }#
    print(x)#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    print(x)#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
      groupp <- group#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
      groupp <- NULL#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = groupp, fill = groupp))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = groupp), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = groupp), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)>1{#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL )+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)>1{#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, color = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)>1{#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)>1{#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, fill = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)>1{#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black", fill = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if ((length(byvars)>1){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black", fill = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if ((length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black", fill = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black", fill = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black", fill = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = "black")+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(=15,l=65,c=100), fill = hcl(=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") )+stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = id)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
DT
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = id)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v2)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, v2, d = T, graph = TRUE)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT, graph = T, by = v1)
sum_up(DT, by = v1, graph = TRUE)
N <- 1000; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT)#
sum_up(DT, v2, d = T)#
sum_up(DT, starts_with("v"), by = v1)#
sum_up(DT, by = v1, graph = TRUE)
N <- 1000; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT)#
sum_up(DT, v2, d = T)#
sum_up(DT, starts_with("v"), by = v1)#
sum_up(DT, graph = TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 1000; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' sum_up(DT, by = v1, graph = TRUE)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 1000; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT)#
sum_up(DT, v2, d = T)#
sum_up(DT, starts_with("v"), by = v1)#
sum_up(DT, graph = TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @examples#
#' N <- 1000; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' sum_up(DT, by = v1, graph = TRUE)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by), graph = graph, minimal = minimal)#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL, graph = FALSE, minimal = TRUE) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
  if (graph){#
    x <- x[, c(byvars, vars, w), with = FALSE]#
    assign_var(x, variable, value, group)#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
  }#
}#
describe_matrix <- function(M, details = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (details==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm)), Hmisc::wtd.quantile(x, c(0, 0.5, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "50%", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm, w = w)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
  cat("\n")#
}
N <- 1000; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT)#
sum_up(DT, v2, d = T)#
sum_up(DT, starts_with("v"), by = v1)#
sum_up(DT, graph = TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param along_with Replace x axis by this variable (ie estimate regression models instead of density).#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph amonx "density", "boxplot", "line", "lm", "loeless"#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density" else "lm")) {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density" else "lm")) {#
#
  type <- match.arg(type, c("density", "boxplot", "line","lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
          evaldt(N <- ans[, sum(.w)])#
          ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              evaldt(ans2[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
  if (length(g)==1){#
    if (verbose){#
      print(g[[1]])#
    } else{#
      suppressWarnings(suppressMessages(print(g[[1]])))#
    }#
  } else{#
    if (verbose){#
      do.call(multiplot, g)#
    }#
    suppressWarnings(suppressMessages(do.call(multiplot, g)))#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
library(ggplot2)#
library(tidyr)#
#
N=1e4; K=100#
DT <- data.table(#
  id = sample(2, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT[, id:= as.factor(id)]#
DT <- gather(DT, variable, value, starts_with("v"))#
#
# theme#
theme = theme_set(theme_minimal())#
theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
#
#Data#
ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param along_with Replace x axis by this variable (ie estimate regression models instead of density).#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph amonx "density", "boxplot", "line", "lm", "loeless"#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm")) {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm")) {#
  type <- match.arg(type, c("density", "boxplot", "line","lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
          evaldt(N <- ans[, sum(.w)])#
          ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              evaldt(ans2[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
  if (length(g)==1){#
    if (verbose){#
      print(g[[1]])#
    } else{#
      suppressWarnings(suppressMessages(print(g[[1]])))#
    }#
  } else{#
    if (verbose){#
      do.call(multiplot, g)#
    }#
    suppressWarnings(suppressMessages(do.call(multiplot, g)))#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
library(ggplot2)#
library(tidyr)#
#
N=1e4; K=100#
DT <- data.table(#
  id = sample(2, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT[, id:= as.factor(id)]#
DT <- gather(DT, variable, value, starts_with("v"))#
#
# theme#
theme = theme_set(theme_minimal())#
theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
#
#Data#
ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param along_with Replace x axis by this variable (ie estimate regression models instead of density).#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph amonx "density", "boxplot", "line", "lm", "loeless"#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm") {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm"){#
  type <- match.arg(type, c("density", "boxplot", "line","lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
          evaldt(N <- ans[, sum(.w)])#
          ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              evaldt(ans2[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
  if (length(g)==1){#
    if (verbose){#
      print(g[[1]])#
    } else{#
      suppressWarnings(suppressMessages(print(g[[1]])))#
    }#
  } else{#
    if (verbose){#
      do.call(multiplot, g)#
    }#
    suppressWarnings(suppressMessages(do.call(multiplot, g)))#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
library(ggplot2)#
library(tidyr)#
#
N=1e4; K=100#
DT <- data.table(#
  id = sample(2, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT[, id:= as.factor(id)]#
DT <- gather(DT, variable, value, starts_with("v"))#
#
# theme#
theme = theme_set(theme_minimal())#
theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
#
mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
#
#Data#
ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~ variable, scales = "free") #
#
+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param along_with Replace x axis by this variable (ie estimate regression models instead of density).#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph amonx "density", "boxplot", "line", "lm", "loeless"#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm") {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm"){#
  type <- match.arg(type, c("density", "boxplot", "line","lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(x)#
    print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
          evaldt(N <- ans[, sum(.w)])#
          ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              evaldt(ans2[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
  if (length(g)==1){#
    if (verbose){#
      print(g[[1]])#
    } else{#
      suppressWarnings(suppressMessages(print(g[[1]])))#
    }#
  } else{#
    if (verbose){#
      do.call(multiplot, g)#
    }#
    suppressWarnings(suppressMessages(do.call(multiplot, g)))#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
#library(ggplot2)#
#library(tidyr)#
##
#N=1e4; K=100#
#DT <- data.table(#
#  id = sample(2, N, TRUE),#
#  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
#  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
#  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
#)#
#DT[, id:= as.factor(id)]#
#DT <- gather(DT, variable, value, starts_with("v"))#
##
## theme#
#theme = theme_set(theme_minimal())#
#theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=#element_blank())#
#theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = #element_blank(), axis.title.x=element_blank())#
#theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = #element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
##
#mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
##
##Data#
#ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, #aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, #aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~# variable, scales = "free") #
##
#+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param along_with Replace x axis by this variable (ie estimate regression models instead of density).#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph amonx "density", "boxplot", "line", "lm", "loeless"#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm") {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm"){#
  type <- match.arg(type, c("density", "boxplot", "line","lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
          evaldt(N <- ans[, sum(.w)])#
          ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              evaldt(ans2[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
    if (length(g)==1){#
      if (verbose){#
        print(g[[1]])#
      } else{#
        suppressWarnings(suppressMessages(print(g[[1]])))#
      }#
    } else{#
      if (verbose){#
        do.call(multiplot, g)#
      }#
      suppressWarnings(suppressMessages(do.call(multiplot, g)))#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
#library(ggplot2)#
#library(tidyr)#
##
#N=1e4; K=100#
#DT <- data.table(#
#  id = sample(2, N, TRUE),#
#  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
#  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
#  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
#)#
#DT[, id:= as.factor(id)]#
#DT <- gather(DT, variable, value, starts_with("v"))#
##
## theme#
#theme = theme_set(theme_minimal())#
#theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=#element_blank())#
#theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = #element_blank(), axis.title.x=element_blank())#
#theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = #element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
##
#mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
##
##Data#
#ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, #aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, #aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~# variable, scales = "free") #
##
#+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param along_with Replace x axis by this variable (ie estimate regression models instead of density).#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph amonx "density", "boxplot", "line", "lm", "loeless"#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm") {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm"){#
  type <- match.arg(type, c("density", "boxplot", "line","lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
          evaldt(N <- ans[, sum(.w)])#
          ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              evaldt(ans2[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
    if (length(g)==1){#
      if (verbose){#
        print(g[[1]])#
      } else{#
        suppressWarnings(suppressMessages(print(g[[1]])))#
      }#
    } else{#
      if (verbose){#
        do.call(multiplot, g)#
      }#
      suppressWarnings(suppressMessages(do.call(multiplot, g)))#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
#library(ggplot2)#
#library(tidyr)#
##
#N=1e4; K=100#
#DT <- data.table(#
#  id = sample(2, N, TRUE),#
#  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
#  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
#  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
#)#
#DT[, id:= as.factor(id)]#
#DT <- gather(DT, variable, value, starts_with("v"))#
##
## theme#
#theme = theme_set(theme_minimal())#
#theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=#element_blank())#
#theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = #element_blank(), axis.title.x=element_blank())#
#theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = #element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
##
#mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
##
##Data#
#ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, #aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, #aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~# variable, scales = "free") #
##
#+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
N <- 10000#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(c(1:5), N, TRUE),#
  v2 = rnorm(N, sd = 20),#
  v3 = sample(runif(100, max=100), N, TRUE)#
)#
DT[, v4 := (id=="id1")* v2 + rnorm(N, sd = 5)]#
graph(DT)
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph among "density", "boxplot", "line", "lm", "loeless"#
#' @param along_with When "type" is "line", "lm", "loeless", replace x axis by this variable (ie estimate regression models instead of density).#
#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm") {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm"){#
  type <- match.arg(type, c("density", "boxplot", "line", "lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            if (type == "line"){#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_line() #
            } else{#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
            }#
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          if (type == "line"){#
            if (!facet){#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, colour = group)) + geom_line() #
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
              if (!facet){#
                evaldt(ans[, .group:= as.factor(.group)])#
                evaldt(ans2[, .group:= as.factor(.group)])#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
              } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
    if (length(g)==1){#
      if (verbose){#
        print(g[[1]])#
      } else{#
        suppressWarnings(suppressMessages(print(g[[1]])))#
      }#
    } else{#
      if (verbose){#
        do.call(multiplot, g)#
      }#
      suppressWarnings(suppressMessages(do.call(multiplot, g)))#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
#library(ggplot2)#
#library(tidyr)#
##
#N=1e4; K=100#
#DT <- data.table(#
#  id = sample(2, N, TRUE),#
#  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
#  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
#  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
#)#
#DT[, id:= as.factor(id)]#
#DT <- gather(DT, variable, value, starts_with("v"))#
##
## theme#
#theme = theme_set(theme_minimal())#
#theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=#element_blank())#
#theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = #element_blank(), axis.title.x=element_blank())#
#theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = #element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
##
#mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
##
##Data#
#ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, #aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, #aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~# variable, scales = "free") #
##
#+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
N <- 10000#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(c(1:5), N, TRUE),#
  v2 = rnorm(N, sd = 20),#
  v3 = sample(runif(100, max=100), N, TRUE)#
)#
DT[, v4 := (id=="id1")* v2 + rnorm(N, sd = 5)]#
graph(DT)
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph among "density", "boxplot", "line", "lm", "loeless"#
#' @param along_with When "type" is "line", "lm", "loeless", replace x axis by this variable (ie estimate regression models instead of density).#
#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm") {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, typte = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm"){#
  print(type)#
  type <- match.arg(type, c("density", "boxplot", "line", "lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            if (type == "line"){#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_line() #
            } else{#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
            }#
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          if (type == "line"){#
            if (!facet){#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, colour = group)) + geom_line() #
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
              if (!facet){#
                evaldt(ans[, .group:= as.factor(.group)])#
                evaldt(ans2[, .group:= as.factor(.group)])#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
              } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
    if (length(g)==1){#
      if (verbose){#
        print(g[[1]])#
      } else{#
        suppressWarnings(suppressMessages(print(g[[1]])))#
      }#
    } else{#
      if (verbose){#
        do.call(multiplot, g)#
      }#
      suppressWarnings(suppressMessages(do.call(multiplot, g)))#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
#library(ggplot2)#
#library(tidyr)#
##
#N=1e4; K=100#
#DT <- data.table(#
#  id = sample(2, N, TRUE),#
#  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
#  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
#  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
#)#
#DT[, id:= as.factor(id)]#
#DT <- gather(DT, variable, value, starts_with("v"))#
##
## theme#
#theme = theme_set(theme_minimal())#
#theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=#element_blank())#
#theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = #element_blank(), axis.title.x=element_blank())#
#theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = #element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
##
#mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
##
##Data#
#ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, #aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, #aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~# variable, scales = "free") #
##
#+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param x A data.table.#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the category with the most count be printed first?#
#' @param facet Should different groups graphed in different windows?#
#' @param winsorize Should variables winsorized?#
#' @param type type of graph among "density", "boxplot", "line", "lm", "loeless"#
#' @param along_with When "type" is "line", "lm", "loeless", replace x axis by this variable (ie estimate regression models instead of density).#
#
#' @param verbose Should warnings (regarding missing values, outliers, etc) be printed?#
#
#' @examples#
#' N <- 10000#
#' DT <- data.table(#
#'   id = sample(c("id1","id2","id3"), N, TRUE),#
#'   v1 = sample(c(1:5), N, TRUE),#
#'   v2 = rnorm(N, sd = 20),#
#'   v3 = sample(runif(100, max=100), N, TRUE)#
#' )#
#' DT[, v4 := v3 + rnorm(N, sd = 20)]#
#' graph(DT)#
#' graph(DT, by = id)#
#' graph(DT, by = id, facet = TRUE)#
#' graph(DT, v3, v4, along_with = v2)#
#' graph(DT, v3, v4, along_with = v2, by = id)#
#' @export#
graph <- function(x, ..., along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm") {#
  graph_(x, .dots = lazy_dots(...) , along_with = substitute(along_with), by = substitute(by), w = substitute(w), reorder = reorder, winsorize = winsorize, facet = facet, size = size, verbose = verbose, type = type)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots , along_with = NULL, by = NULL, w = NULL, reorder = TRUE, winsorize = TRUE , facet = FALSE, size = 1, verbose = FALSE, type = if (is.null(along_with)) "density"#
 else "lm"){#
  print(type)#
  type <- match.arg(type, c("density", "boxplot", "line", "lm", "loeless"))#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x),w))#
  along_with <- names(select_vars_(names(x), along_with))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = c(byvars,w,along_with)))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars, along_with, w))#
  }#
  if (length(along_with) | type == "boxplot"){#
    nums <- sapply(x, is.numeric)#
    nums_name <- names(nums[nums==TRUE])#
    vars = intersect(vars,nums_name)#
  }#
  name_list <- function(x){#
    if (length(x)){#
      x <- sapply(x, as.name)#
    }#
    unlist(x)#
  }#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  assign_var(x, bin, group, count,  variable, value)#
  if (type == "boxplot"){#
    if (minimal){#
      theme = theme_set(theme_minimal())#
      theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=element_blank())#
      theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = element_blank(), axis.title.x=element_blank())#
      theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
    }#
    if (length(byvars)){#
      if (length(byvars)>1){#
          setkeyv(x, byvars)#
          x[, .group := 0]#
          x[unique(x), .group := 1]#
          evaldt(x[, .group:= cumsum(.group)])#
      } else{#
        group <- byvars#
      }#
      evaldt(x[, .group := as.factor(.group)])#
    } else{#
      group <- factor(0)#
      evaldt(x[, .group := 1])#
    }#
    if (!length(w)){#
      w <- NULL#
    }#
    x <-  suppressWarnings(suppressMessages(gather_(x, variable, value, gather_cols = vars)))#
    evaldt(x[, .variable := as.factor(.variable)])#
    if (length(byvars)){#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, aes_string(colour = group, fill = group))+  stat_summary(geom = "crossbar", width=0.65, fatten=0, fill = "white", aes_string(colour = group), fun.data =  mean_cl_boot, alpha = 0.3)  + stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(color = group), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7) + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free") + stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    } else{#
      print(ggplot(x, aes_string(y = value, x = group , weight = w)) + geom_boxplot(outlier.colour = NULL, colour = hcl(h=15,l=65,c=100), fill = hcl(h=15,l=65,c=100), width = 0.5)+  stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fill = "white", fun.data =  mean_cl_boot, alpha = 0.3)+ stat_summary(geom = "crossbar", width=0.65/2, fatten=0, color = hcl(h=15,l=65,c=100), fun.data =  function(x){m <- mean(x); c(ymin = m, ymax = m, y = m)}, alpha = 0.7)  + facet_wrap(facets = as.formula(paste0("~",variable)), scales = "free")  +stat_summary(geom = "crossbar", width=0.65, fatten=0, color = "white", fun.data =  function(x){m <- median(x, na.rm = TRUE); c(ymin = m, ymax = m, y = m)}, alpha = 0.7))#
    }#
  } else{#
    x <- x[, c(byvars, vars, along_with, w), with = FALSE]#
    if (!length(w)){#
      assign_var(x, w)#
      evaldt(x[, .w := 1])#
      ww <- NULL#
    } else{#
      ww <- as.name(paste0(w,"/sum(",w,")"))#
    }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
        if (length(along_with)){#
          ans <- evaldt(x[, list(.along_with, .v, .w)])#
          nums <- sapply(x, is.numeric)#
          nums_name <- names(nums[nums==TRUE])#
          vars=intersect(vars,nums_name)#
          if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
              evaldt(ans[, .along_with:= winsorize(.along_with, verbose = verbose)])#
            }#
            if (type == "line"){#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_line() #
            } else{#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE)), by = bin])#
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = type) + geom_point(data=ans2, aes_string(x = along_with, y = v)) #
            }#
        } else{#
        ans <- evaldt(x[, list(.v, .w)])#
        dummy <- evaldt(is.integer(ans[,.v]) + is.character(ans[,.v]))#
          if (dummy) {#
            if (reorder){ #
              ans <- evaldt(ans[, list(.w, .count = .N), by = .v])#
              setkeyv(ans,c(count, v))#
              evaldt(ans[, .v := factor(.v, levels = unique(.v), ordered = TRUE)])#
            } else{#
              evaldt(ans[, .v := as.factor(.v)])#
            }#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v:= winsorize(.v, verbose = verbose)])#
            }#
            evaldt(ans[, .bin := .bincode(.v, breaks = seq(min(.v, na.rm = TRUE), max(.v, na.rm = TRUE), length = 100))])#
            evaldt(N <- ans[, sum(.w)])#
            ans <- evaldt(ans[, list(.v = mean(.v, na.rm = TRUE), count = sum(.w / N, na.rm = TRUE)), by = .bin])#
            # g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line")#
             g[[i]] <-  ggplot(ans, aes_string(x = v, y= "count")) + geom_point()#
          }#
        }#
      } #
  } else{#
    if (length(byvars)>1){#
      setkeyv(x, byvars)#
      x[, .group := 0]#
      x[unique(x), .group := 1]#
      evaldt(x[, .group:= cumsum(.group)])#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        ans <- x[, c(group, v, w, along_with), with = FALSE]#
        i <- i+1#
        if (length(along_with)){#
          if (winsorize){#
            evaldt(ans <- ans[, list(.group, .along_with = winsorize(.along_with, verbose = verbose), .v = winsorize(.v, verbose = verbose), .w)])#
          } #
          if (type == "line"){#
            if (!facet){#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, colour = group)) + geom_line() #
            } else{#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{#
            evaldt(ans[, .bin := .bincode(.along_with, breaks = seq(min(.along_with, na.rm = TRUE), max(.along_with, na.rm = TRUE), length = 20))])#
            evaldt(N <- ans[, sum(.w)])#
            ans2 <- evaldt( ans[, list(.along_with = mean(.along_with), .v = weighted.mean(.v,  .w, na.rm = TRUE), .group), by = list(.group, .bin)])#
              if (!facet){#
                evaldt(ans[, .group:= as.factor(.group)])#
                evaldt(ans2[, .group:= as.factor(.group)])#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v, color = group)) + geom_point(data = ans2, aes_string(x = along_with, y = v, color = group), alpha = 0.6) + stat_smooth(method = type)#
              } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = along_with, y = v)) + geom_point(data = ans2, aes_string(weight = ww, x = along_with, y = v)) + stat_smooth(method = method) + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            } #
        } else{#
          dummy <- evaldt(is.integer(ans[,.v])+ is.character(ans[,.v]))#
          if (dummy) {#
            # same order across groups#
            setkeyv(ans, c(v, group))#
            evaldt(ans[, .v := as.factor(.v)])#
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, fill = group)) + geom_bar(width = 0.5, position = "dodge")+ coord_flip() #
            } else{#
                g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + geom_point(stat="bin") + coord_flip() + expand_limits(y = 0)+ facet_grid(as.formula(paste0(group,"~.")))#
            }#
          } else{ #
            if (winsorize){#
              evaldt(ans[, .v := winsorize(.v, verbose = verbose)])#
            } #
            if (!facet){#
              evaldt(ans[, .group:= as.factor(.group)])#
              g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(weight = ww, x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
        }#
      } #
  }#
    if (length(g)==1){#
      if (verbose){#
        print(g[[1]])#
      } else{#
        suppressWarnings(suppressMessages(print(g[[1]])))#
      }#
    } else{#
      if (verbose){#
        do.call(multiplot, g)#
      }#
      suppressWarnings(suppressMessages(do.call(multiplot, g)))#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
#library(ggplot2)#
#library(tidyr)#
##
#N=1e4; K=100#
#DT <- data.table(#
#  id = sample(2, N, TRUE),#
#  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
#  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
#  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
#)#
#DT[, id:= as.factor(id)]#
#DT <- gather(DT, variable, value, starts_with("v"))#
##
## theme#
#theme = theme_set(theme_minimal())#
#theme = theme_update(legend.position="top", legend.title=element_blank(), panel.grid.major.x=#element_blank())#
#theme = theme_update(axis.text.x=element_blank(), axis.ticks.x = element_blank(), axis.line.x = #element_blank(), axis.title.x=element_blank())#
#theme = theme_update(axis.line.y = element_blank(), axis.title.y=element_blank(), axis.text.y = #element_text(colour="grey"), axis.ticks.y= element_line(colour="grey"))#
##
#mean.n <- function(x){ return(c(y = median(x)*0.97, label = round(mean(x),2))) }#
##
##Data#
#ggplot(DT, mapping=aes_string(y = "value", x = "id")) + geom_boxplot(outlier.colour = NULL, #aes_string(colour="id", fill="id"))  +  stat_summary(geom = "crossbar", width=0.65, fatten=0, #aes_string(colour = "id"), fill = "white", fun.data =  mean_cl_boot)   + facet_wrap(facets = ~# variable, scales = "free") #
##
#+ stat_summary(geom = "crossbar", width=0.65, fatten=0, aes_string(colour = "id"), fun.data =  function(x){m <- mean(x); c(y=m,ymin=m,ymax=m)})
N <- 10000#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(c(1:5), N, TRUE),#
  v2 = rnorm(N, sd = 20),#
  v3 = sample(runif(100, max=100), N, TRUE)#
)#
DT[, v4 := (id=="id1")* v2 + rnorm(N, sd = 5)]#
graph(DT)
