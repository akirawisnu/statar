library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(1))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(2))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
mtcars %>% mutate(mean(1))
library(dplyr)#
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) ) %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) %>% mutate(mean(2))
library(dplyr)#
as.data.table(mtcars) %>% mutate(mean(2))#
mtcars %>% mutate(mean(2))
?mutate
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(statar)
?edo
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(data.table)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(dplyr)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(statar)
?edo
library(data.table)#
library(dplyr)#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)#
DT %>% edo(sum, "v*", i = v1 == 1)#
DT %>% edo(sum, "v*", d = TRUE, by = "v1")
devtools::install_github("matthieugomez/statar")
?edo
library(statar)
?edo
library(data.table)#
library(dplyr)#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)#
DT %>% edo(sum, "v*", i = v1 == 1)#
DT %>% edo(sum, "v*", d = TRUE, by = "v1")
DT %>% edo(summarize, "v2")
?eset
library(data.table)#
library(dplyr)#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% eset(order, cols = "v*")#
DT %>% eset(sort, c("v1", "v2"))#
DT %>% eset(rename, "v1", "v11")#
DT %>% eset(keep, -"id*")#
DT %>% eset(keep, "v?")
DT
?edo
library(statar)
?edo
?epanel
library(data.table)
library(dplyr)
# edo: stata commands that modify dataset#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% eset(order, cols = "v*")#
DT %>% eset(sort, c("v1", "v2"))#
DT %>% eset(rename, "v1", "v11")#
DT %>% eset(keep, -"id*")#
DT %>% eset(keep, "v?")#
#
# eset: stata commands that don't modify dataset#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)#
#
# epanel #
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT <- DT %>% epanel(cols = "id", t = "date", L1.value)#
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = TRUE)#
DT <- DT %>% epanel(cols = "id", t = "date", fill)#
#
## ejoin #
ejoin(DTm, DTu, m:1)#
ejoin(DTm, DTu, type = 1:1, keep = "matched", gen = "_merge")#
ejoin(DTm, DTu, m:m, keep = c("master", "matched"), gen = FALSE)#
#
# tempname creates a name not assigned in the environment specified by the second variable#
tempvar <- tempname("temp", DT)#
tempname <- tempname("temp", globalenv())
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT <- DT %>% epanel(cols = "id", t = "date", L1.value)
DT
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
DT %>% epanel(cols = "id", t = "date", L1.value)
DT
DT <- DT %>% epanel(cols = "id", t = "date", L1.value)
DT
DT %>% epanel(cols = "id", t = "date", L1.value)
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = TRUE)
DT
.data <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)
.data %>% mutate(mean=mean(value))
.data %>% mutate(mean=mean(v1)))
.data %>% mutate(mean=mean(v1))
function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT[,mean(v1)]}
f <- function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT[,mean(v1)]}
f(DT, inplace = FALSE)
f <- function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT}
f(DT, inplace = FALSE)
f <- function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT[,v1:=1]}
f(DT, inplace = FALSE)
DT
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = TRUE)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = FALSE)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L1.value", inplace = FALSE)
devtools::document(/Users/Matthieu/Dropbox/Github/statar-package)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(statar)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L1.value", inplace = FALSE)
DT %>% epanel(cols = "id", t = "date", mevalue, gen = "L1.value", inplace = FALSE)
library(tidyr)
?gather
library(dplyr)#
# From http://stackoverflow.com/questions/1181060#
stocks <- data.frame(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
#
gather(stocks, stock, price, -time)
library(data.table)#
# From http://stackoverflow.com/questions/1181060#
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
#
gather(stocks, stock, price, -time)
M <- gather(stocks, stock, price, -time)
is.data.table(M)
?spread
M %>% spread(stock, price)
debug(gather)
M <- gather(stocks, stock, price, -time)
s
devtools::install_github("matthieugomez/statar")
library(statar)
M <- gather(stocks, stock, price, -time)
n
s
gather_data.frame
gather_.data.frame
gather_.data.tabke
tidyr::gather_.data.frame
devtools::install_github("matthieugomez/statar")
suppressMessages(library("data.table"))
library("tidyr")
library(statar)
?spread
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
stocksm <- stocks %>% gather(stock, price, -time)
library(dplyr)
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
stocksm <- stocks %>% gather(stock, price, -time)
?include.lowest
?cut
quantile
?quantile
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
x=DT$v1
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
nq=3
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
breaks
?quantile
#' xtile - Create variable containing quantiles#
#' @param x A vector#
#' @param nq Number of quantiles. Quantiles are computed as the inverse of empirical distribution function#
#' @param cutpoints Cutpoints to use if nq is not specified.  For instance 0.4 creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4#
#' @examples #
#' library(dplyr)#
#' DT <- DT %>% group_by(id) %>% mutate(new = xtile(date, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))#
#' @export#
#
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)#
      return(xtile(x, cutpoints = breaks, include.lowest = include.lowest))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length), include.lowest = include.lowest)#
}
xtile(DT$v1,nq=3)
#' xtile - Create variable containing quantiles#
#' @param x A vector#
#' @param nq Number of quantiles. Quantiles are computed as the inverse of empirical distribution function#
#' @param cutpoints Cutpoints to use if nq is not specified.  For instance 0.4 creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4#
#' @examples #
#' library(dplyr)#
#' DT <- DT %>% group_by(id) %>% mutate(new = xtile(date, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))#
#' @export#
#
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)#
      return(xtile(x, cutpoints = breaks))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length))#
}
xtile(DT$v1,nq=3)
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
breaks
quantile(x, seq(0, 1, length = nq + 1), type = 1)
head(quantile(x, seq(0, 1, length = nq + 1), type = 1),-1)
head(quantile(x, seq(0, 1, length = nq + 1), type = 1),1)
?head
tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1),1),1)
tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1),-1),-1)
#' xtile - Create variable containing quantiles#
#' @param x A vector#
#' @param nq Number of quantiles. Quantiles are computed as the inverse of empirical distribution function#
#' @param cutpoints Cutpoints to use if nq is not specified.  For instance 0.4 creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4#
#' @examples #
#' library(dplyr)#
#' DT <- DT %>% group_by(id) %>% mutate(new = xtile(date, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))#
#' @export#
#
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1),-1)#
      return(xtile(x, cutpoints = breaks))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length))#
}
tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1),-1),-1)
quantile(x, seq(0, 1, length = nq + 1), type = 1)
xtile(DT$v1,nq=3)
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1),-1)#
      return(xtile(x, cutpoints = breaks))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length), include.lowest=TRUE)#
}
quantile(x, seq(0, 1, length = nq + 1), type = 1)
xtile(DT$v1,nq=3)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
order
?dplyr
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
DT
DT %>% select(v1)
library(dplyr)
DT %>% select(v1)
DT
DT %>% select(v1,inplace = TRUE)
mutate
select
debug(select)
DT %>% select(v1,inplace = TRUE)
s
n
inplace
DT %>% mutate(mean(v1),inplace = TRUE)
debug(mutate)
DT %>% mutate(mean(v1),inplace = TRUE)
s
inplace
q
f
?lazy_eval::all_dots
?lazyeval::all_dots
DT %>% mutate(mean(v1),inplace = TRUE)
s
n
dots
inplace
DT %>% mutate(mean(v1),inplace = TRUE)
DT
f
setdiff
DT %>% mutate_each(mean,inplace = TRUE)
DT %>% mutate_each(funs(mean),inplace = TRUE)
?select
DT %>% select(v1,inplace = TRUE)
s
n
vars
setdiff(vars,names(.data))
names(.data)
setdiff(names(.data),vars)
DT %>% select(v1,inplace = TRUE)
s
n
dots
dots$inplace
dots$inplace==TRUE
dots$inplace$code==TRUE
dots$inplace$code
dots$inplace
ls(dots$inplace)
names(dots$inplace)
is.env(dots$inplace)
dots$inplace
attr(dots$inplace)
attributes(dots$inplace)
dots$inplace$expr
names(dots)
dots$inplace <- NULL
dots$inplace
dots[[2]] <- NULL
dots
DT %>% select(v1,inplace = TRUE)
s
dots
n
dots
match("inplace",dots)
match("inplace",names(dots))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
DT %>% select(v1,inplace = TRUE)
library(dplyr)
DT %>% select(v1,inplace = TRUE)
s
]]]]]
f
ff
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% select(v1,inplace = TRUE)
DT
DT %>% select(v1,inplace = TRUE)
s
f
library(plyr)
suppressMessages(library("data.table"))
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1,inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(mean, inplace = TRUE)
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT %>% mutate_each(funs(mean))
DT
DT %>% mutate(mean(v1),inplace=TRUE)
DT
debug(mutate_each)
DT %>% mutate_each(funs(mean))
s
f
n
s
n
dots
f
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
s
n
vars
vars$inplace
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% mutate_each(funs(mean),inplace=TRUE)
n
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
suppressMessages(library("dplyr"))
suppressMessages(library("data.table"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
#sink.reset
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
vars
DT %>% mutate_each(funs(mean), inplace = TRUE)
debug(mutate_each)
DT %>% mutate_each(funs(mean), inplace = TRUE)
s
f
n
vars
length(TRUE)
is.atomic(TRUE)
is.atomic(c(TRUE.TRUE))
is.atomic(c(TRUE,TRUE))
dots
l=llist(1="ok")
l=list(1="ok")
l=list(ok = "ok")
l$NA
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
suppressMessages(library("data.table"))
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean))
DT
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
suppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean), inplace = FALSE)
DT
DT %>% select(v2, inplace = FALSE)
library(dpsuppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
suppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1)
DT
DT %>% select(v1, inplace = TRUE)
DT
#' Gives summary statistics (Stata command summarize)#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude in s You can use same specifications as in select. If missing, defaults to all non-grouping variables.#
#' @param inplace Change data.table in place or not#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 =  sample(5, N, TRUE),                          #
#'   v2 =  sample(1e6, N, TRUE),                       #
#'   v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) #
#' )#
#' DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#' @export#
colorder <- function(.data, ..., inplace = FALSE) {#
  colorder_(.data, vars = lazyeval::lazy_dots(...) , inplace = inplace)#
}#
#' @export#
colorder_ <- function(.data, vars, inplace = FALSE ) {#
  if (length(vars) == 0) {#
     vars <- lazyeval::lazy_dots(everything())#
   }#
  vars <- select_vars_(tbl_vars(.data), vars)#
  if (!inplace) .data <- copy(.data)#
  setcolorder(.data,vars,setdiff(names(.data),vars))#
  .data#
}
DT  %>% colorder(starts_with("v"), inplace = TRUE)
#' Gives summary statistics (Stata command summarize)#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude in s You can use same specifications as in select. If missing, defaults to all non-grouping variables.#
#' @param inplace Change data.table in place or not#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 =  sample(5, N, TRUE),                          #
#'   v2 =  sample(1e6, N, TRUE),                       #
#'   v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) #
#' )#
#' DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#' @export#
colorder <- function(.data, ..., inplace = FALSE) {#
  colorder_(.data, vars = lazyeval::lazy_dots(...) , inplace = inplace)#
}#
#' @export#
colorder_ <- function(.data, vars, inplace = FALSE ) {#
  if (length(vars) == 0) {#
     vars <- lazyeval::lazy_dots(everything())#
   }#
  vars <- select_vars_(tbl_vars(.data), vars)#
  if (!inplace) .data <- copy(.data)#
  setcolorder(.data,c(vars,setdiff(names(.data),vars)))#
  .data#
}
DT  %>% colorder(starts_with("v"), inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT  %>% colorder(starts_with("v"), inplace = TRUE)
DT
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(dplyr)#
library(statar)#
#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
      id = 1:N,#
      v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
      v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
      v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
    )#
#
### quantile category (=Stata xtile)#
DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))
DT %>% group_by(id) %>% mutate(lag(value, order_by = time)) # Balanced dataset#
DT %>% group_by(id) %>% mutate(lag(value, along_with = time)) # Unbalanced dataset
DT %>% group_by(id) %>% mutate(lag(value, order_by = time)) # Balanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, order_by = time)) # Balanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, along_with = time)) # Unbalanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, order_by = v1))
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
library(data.table)#
#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
### col_order (= Stata order)#
DT  %>% col_order(starts_with("v"))#
DT  %>% col_order(starts_with("v"), inplace = TRUE)#
#
### sum_up (= Stata summarize)#
DT  %>% sum_up#
DT  %>% sum_up(v3, d=T)#
DT  %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
### expand (= Stata tsfill)#
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% expand(date)#
DT %>% expand(date)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?spread
?gather
library(tidyr)
?gather
stocks <- data.frame(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)
stocks
socks %>% gather(type, price)
library(dplyr)
socks %>% gather(type, price)
stocks %>% gather(type, price)
DT_long <- DT_wide %>% gather(variable, value, -time)
DT_long <- stocks %>% gather(variable, value, -time)
DT_long
DT_long <- DT_wide %>% spread (variable, value, -time)
DT_wide <- DT_long %>% spread (variable, value, -time)
?spread
DT_wide <- DT_long %>% spread(variable, value, -time)
DT_wide <- DT_long %>% spread(variable, value)
DT_wide
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0)))
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0))
library(data.table)
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0))
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2=c(4.5,3.0))
DT_wide
DT_wide %>% gather(variable, value, -i)
DT_long <- DT_wide %>% gather(variable, value, -i)
DT_long %>% spread(variable, value)
options(mc.cores=4) #
# writing and reading#
system.time( DT <- fread("temp_1e7.csv") )
setwd("/Users/Matthieu/Dropbox/Github/abandonned github code")#
options(mc.cores=4)#
library(speedglm)#
library(biglm)#
#
# writing and reading#
system.time( DT <- fread("temp_1e7.csv") )
setwd("/Users/Matthieu/Dropbox/Symlink")#
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
setwd("/Users/Matthieu/Dropbox/Github/abandonned github code")#
system.time( DT <- fread("temp_1e7.csv") )
setwd("/Users/Matthieu/Dropbox/Github/abandonned github code")#
system.time( DT[, a:=sum(v1,na.rm=TRUE), by=id1] )
system.time( DT[v1==1, a:=sum(v1,na.rm=TRUE), by=id1] )
system.time( DT[v1==2, a:=sum(v1,na.rm=TRUE), by=id1] )
system.time( DT <- fread("temp_1e8.csv") )
system.time( DT[, a:=sum(v1,na.rm=TRUE), by=id1] )
system.time( DT[v1>=3, a:=sum(v1,na.rm=TRUE), by=id1] )
system.time( DT[v1>=3, a:=sum(v1,na.rm=TRUE), by=id1] )
system.time( DT[, a:=sum(v1*(v1>=3),na.rm=TRUE), by=id1] )
system.time( DT[, a:=sum(v1*(v1>=3),na.rm=TRUE), by=id1] )
gc()
system.time( DT[v1>=3, a:=sum(v1,na.rm=TRUE), by=id1] )
gc()
system.time( DT[v1>=3, a:=sum(v1,na.rm=TRUE), by=id1] )
gc()
system.time( DT[, a:=sum(v1*(v1>=3),na.rm=TRUE), by=id1] )
DT[v1>=3, a:=sum(v2,na.rm=TRUE), by=id1]
DT[, a:=sum(v1*(v2>=3),na.rm=TRUE), by=id1]
DT[, a:=sum(v1*(v2>=3),na.rm=TRUE)]
gc()
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
setwd("/Users/Matthieu/Dropbox/Symlink")#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  vid = 1:N,#
  vv1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  vv2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  vv3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  vvid = 1:N,#
  vvv1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  vvv2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  vvv3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
gc()
DT[v1>=3, a:=sum(v2,na.rm=TRUE), by=id1]
DT[v1>=3, a:=sum(v2,na.rm=TRUE), by=id]
DT[v1>=3, a:=sum(v2,na.rm=TRUE), by=id]
system.time(DT[v1>=3,lm(v3~v2,.SD),.SDcols=names(DT)])
system.time(DT[v1>=3,lm(v3~v2,.SD),.SDcols=c(])
system.time(DT[v1>=3,lm(v3~v2,.SD),.SDcols=c("v2","v3")])
setwd("/Users/Matthieu/Dropbox/Symlink")#
N=1e7; K=100#
set.seed(1)#
DT <- matrix(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  vid = 1:N,#
  vv1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  vv2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  vv3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  vvid = 1:N,#
  vvv1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  vvv2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  vvv3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
setwd("/Users/Matthieu/Dropbox/Symlink")#
N=1e7; K=100#
set.seed(1)#
DT <- as.matrix(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  vid = 1:N,#
  vv1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  vv2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  vv3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  vvid = 1:N,#
  vvv1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  vvv2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  vvv3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT <- as.matrix(DT)
DT1 <- DT[,1:3]
names(DT1)
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
v2 =  sample(1e6, N, TRUE)
D=cbindlist(rep(v2,4))
D=cbindlist(v2,v2,v2,v2,v2,v2)
D=cbind(v2,v2,v2,v2,v2,v2)
D
M <- 1e8 #
v =  sample(1e6, N, TRUE)
M <- 8e7 #
v =  sample(1e6, N, TRUE)#
DT <- matrix(v,ncol=8)
dim(DT)
N <- 8e7 #
v =  sample(1e6, N, TRUE)#
DT <- matrix(v,ncol=8)
dim(DT)
object_size(DT,DT[,1:3])
object_size(DT)
object_size(DT,DT[1:5e6])
object_size(DT,DT[1:(5e6)])
object_size(DT,DT[1:(8e6)])
object_size(DT,DT[1:(8e6).])
object_size(DT,DT[1:(8e6),])
object_size(DT,DT[1:(5e6),])
DF <- as.data.frame(M)#
object_size(DF)
N <- 8e7 #
v =  sample(1e6, N, TRUE)#
M <- matrix(v,ncol=8)#
object_size(M)#
#> 320 MB#
object_size(M,M[,1:3])#
#> 440 MB#
object_size(M,M[1:(5e6),])#
#> 480 MB
DF <- as.data.frame(M)#
object_size(DF)
object_size(DF,DF[,1:3])
object_size(DF,DF[1:(5e6),])
library(pryr)#
v =  sample(1e6, 8e7, TRUE)#
M <- matrix(v,ncol=8)#
object_size(M)#
#> 320 MB#
object_size(M,M[,1:3])#
#> 440 MB#
object_size(M,M[1:(5e6),])#
#> 480 MB#
#
DF <- as.data.frame(M)#
object_size(DF)#
#> 320 MB#
object_size(DF,DF[,1:3])#
#> 320 MB#
object_size(DF,DF[1:(5e6),])#
#> 480 MB
setwd("/Users/Matthieu/Dropbox/Symlink")#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
?lm
lm(v3~v2, subset=v1>=3)
lm(v3~v2, subset=v1>=3,data = DT)
lm(v3~v2, data = DT[v1>=3])
system.time(lm(v3~v2, data = DT[v1>=3]))
system.time(lm(v3~v2, subset=v1>=3,data = DT))
install.packages("rmarkdown")
setwd("/Users/Matthieu/Dropbox/Github/abandonned github code")#
system.time( DT <- fread("temp_1e7.csv") )
# Need RCurl for install_github#
install.packages('RCurl')#
library(devtools)#
install_github('armstrtw/rzmq#8')#
install_github("takluyver/IRdisplay")#
install_github("takluyver/IRkernel")
IRkernel::installspec()
IRkernel::installspec()
setwd("/Users/Matthieu/Dropbox/Github/abandonned github code")#
system.time( DT <- fread("temp_1e7.csv") )
?biglm
library(statar)
?ejoin
a <- factor(c("1990q1","1990q2"), levels=c(1,2))
a
a <- factor(c("1990q1","1990q2"), labals=c(1,2))
a <- factor(c("1990q1","1990q2"), labels=c(1,2))
a[1]
a[2]
a[1]+1
as.numeric(a)
unclass(a)
as.numeric(levels(a))
as.numeric(levels(a))[a]
a
a
1
a[1]
a[1]
a[2]
setwd("/Users/Matthieu/Dropbox/Symlink")#
devtools::install_github("matthieugomez/statar")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
lead <- function(x, n = 1L, default = NA, order_by = NULL, period = c(1,"month","quarter","year"), ...) {#
  if (!is.null(order_by))  & !is.null(period){#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(period)) {#
    if (period==1){#
      index <- match(along_with + n, along_with, incomparable = NA)#
      out <- x[index]#
      if (!is.na(default)) out[which(is.na(index))] <- default#
    } else if (period == "month"){#
      date_origin = as.Date('1900-01-01')#
      order_by_elapsed = as.period(order_by-date_origin)  %/% weeks(1)#
      return(lead(order_by, lead, x, n = n, default = default, period = 1))#
    }  #
    else if (period == "week"){#
      date_origin = as.Date('1900-01-01')#
      order_by_elapsed = as.period(order_by-date_origin)  %/% months(1)#
      return(lead(order_by, lead, x, n = n, default = default, period = 1))#
    } else if (period == "quarter"){#
      date_origin = as.Date('1900-01-01')#
      order_by_elapsed = as.period(order_by-date_origin)  %/% 3*months(1)#
      return(lead(order_by, lead, x, n = n, default = default, period = 1))#
    } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
lead <- function(x, n = 1L, default = NA, order_by = NULL, along_with = NULL, period = c("month","quarter","year"), ...) {#
  if (!is.null(order_by))  & !is.null(period){#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(along_with)) {#
#
    if (!is.null(period)) {#
        index <- match(along_with + n, along_with, incomparable = NA)#
        out <- x[index]#
        if (!is.na(default)) out[which(is.na(index))] <- default#
        xlen <- length(x)#
        n <- pmin(n, xlen)#
        out <- c(x[-seq_len(n)], rep(default, n))#
      } else if (period == "month"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% weeks(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      }  #
      else if (period == "week"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } else if (period == "quarter"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% 3*months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } #
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
lead <- function(x, n = 1L, default = NA, order_by = NULL, along_with = NULL, period = c("month","quarter","year"), ...) {#
  if (!is.null(order_by))  & !is.null(along_with){#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(along_with)) {#
    if (!is.null(period)) {#
        index <- match(along_with + n, along_with, incomparable = NA)#
        out <- x[index]#
        if (!is.na(default)) out[which(is.na(index))] <- default#
        xlen <- length(x)#
        n <- pmin(n, xlen)#
        out <- c(x[-seq_len(n)], rep(default, n))#
      } else if (period == "month"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% weeks(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      }  #
      else if (period == "week"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } else if (period == "quarter"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% 3*months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } #
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
lead <- function(x, n = 1L, default = NA, order_by = NULL, along_with = NULL, units = c("month","quarter","year"), ...) {#
  if (!is.null(order_by))  & !is.null(along_with){#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)) {#
        index <- match(along_with + n, along_with, incomparable = NA)#
        out <- x[index]#
        if (!is.na(default)) out[which(is.na(index))] <- default#
        xlen <- length(x)#
        n <- pmin(n, xlen)#
        out <- c(x[-seq_len(n)], rep(default, n))#
      } else if (units == "month"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% weeks(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      }  #
      else if (units == "week"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } else if (units == "quarter"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% 3*months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } #
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
lead <- function(x, n = 1L, default = NA, order_by = NULL, along_with = NULL, units = c("month","quarter","year"), ...) {#
  if (!is.null(order_by)) {#
    if (!is.null(along_with)) stop("order_by and along_with cannot be specified together")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)) {#
        index <- match(along_with + n, along_with, incomparable = NA)#
        out <- x[index]#
        if (!is.na(default)) out[which(is.na(index))] <- default#
        xlen <- length(x)#
        n <- pmin(n, xlen)#
        out <- c(x[-seq_len(n)], rep(default, n))#
      } else if (units == "month"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% weeks(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      }  #
      else if (units == "week"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } else if (units == "quarter"){#
        date_origin = as.Date('1900-01-01')#
        order_by_elapsed = as.period(order_by-date_origin)  %/% 3*months(1)#
        return(lead(order_by, lead, x, n = n, default = default, period = 1))#
      } #
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
lead <- function(x, n = 1L, default = NA, order_by = NULL, along_with = NULL, units = c("month","quarter","year"), ...) {#
  if (!is.null(order_by)) {#
    if (!is.null(along_with)) stop("order_by and along_with cannot be specified together")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)) {#
        index <- match(along_with + n, along_with, incomparable = NA)#
        out <- x[index]#
        if (!is.na(default)) out[which(is.na(index))] <- default#
        xlen <- length(x)#
        n <- pmin(n, xlen)#
        out <- c(x[-seq_len(n)], rep(default, n))#
      } else if (units == "month"){#
        date_origin = as.Date('1900-01-01')#
        along_with_elapsed = as.period(along_with-date_origin)  %/% weeks(1)#
        return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
      }  #
      else if (units == "week"){#
        date_origin = as.Date('1900-01-01')#
        along_with_elapsed = as.period(along_with-date_origin)  %/% months(1)#
        return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
      } else if (units == "quarter"){#
        date_origin = as.Date('1900-01-01')#
        along_with_elapsed = as.period(along_with-date_origin)  %/% 3*months(1)#
        return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
      } #
  }#
  attributes(out) <- attributes(x)#
  out#
}
DT = data.table(id    = c(1,1,1,1,1),#
                 date  = c("01031992","03041992","05051992","21081992),#
                 value = c(4.1,4.5,3.3,5.3,3.0)#
                )
DT = data.table(id    = c(1,1,1,1,1),#
                 date  = c("01031992","03041992","05051992","21081992"),#
                 value = c(4.1,4.5,3.3,5.3,3.0)#
                )
DT = data.table(id    = c(1,1,1,1,1),#
                 date  = c("01031992","03041992","05051992","21081992"),#
                 value = c(4.1,4.5,3.3,5.3)#
                )
DT = data.table(id    = c(1,1,1,1),#
                 date  = c("01031992","03041992","05051992","21081992"),#
                 value = c(4.1,4.5,3.3,5.3)#
                )
DT
DT[,date_date:=dmy(date)]
DT
lead <- function(x, n = 1L, default = NA, order_by = NULL, along_with = NULL, unit , ...) {#
  if (!is.null(order_by)) {#
    if (!is.null(along_with)) stop("order_by and along_with cannot be specified together")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  if (!is.null(along_with)) {#
    if (!is.null(unit)) {#
        index <- match(along_with + n, along_with, incomparable = NA)#
        out <- x[index]#
        if (!is.na(default)) out[which(is.na(index))] <- default#
        xlen <- length(x)#
        n <- pmin(n, xlen)#
        out <- c(x[-seq_len(n)], rep(default, n))#
      } else{#
        unitc <-match.arg(unit,c("month","quarter","year"))#
         if (unitc == "month"){#
          date_origin = as.Date('1900-01-01')#
          along_with_elapsed = as.period(along_with-date_origin)  %/% weeks(1)#
          return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
        }  #
        else if (unitc == "week"){#
          date_origin = as.Date('1900-01-01')#
          along_with_elapsed = as.period(along_with-date_origin)  %/% months(1)#
          return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
        } else if (unitc == "quarter"){#
          date_origin = as.Date('1900-01-01')#
          along_with_elapsed = as.period(along_with-date_origin)  %/% 3*months(1)#
          return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
        } #
      }#
  }#
  attributes(out) <- attributes(x)#
  out#
}
library(lubridate)
lag(DT$value,1,along_with=DT$date_date,unit="month")
lead(DT$value,1,along_with=DT$date_date,unit="month")
lead <- function(x, n = 1L, default = NA, order_by = NULL, along_with = NULL, unit , ...) {#
  if (!is.null(order_by)) {#
    if (!is.null(along_with)) stop("order_by and along_with cannot be specified together")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  if (!is.null(along_with)) {#
    if (!is.null(unit)) {#
        index <- match(along_with + n, along_with, incomparable = NA)#
        out <- x[index]#
        if (!is.na(default)) out[which(is.na(index))] <- default#
        xlen <- length(x)#
        n <- pmin(n, xlen)#
        out <- c(x[-seq_len(n)], rep(default, n))#
      } else{#
        unitc <-match.arg(unit,c("month","quarter","year"))#
         if (unitc == "week"){#
          date_origin = as.Date('1900-01-01')#
          along_with_elapsed = as.period(along_with-date_origin)  %/% weeks(1)#
          return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
        }  #
        else if (unitc == "month"){#
          date_origin = as.Date('1900-01-01')#
          along_with_elapsed = as.period(along_with-date_origin)  %/% months(1)#
          return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
        } else if (unitc == "quarter"){#
          date_origin = as.Date('1900-01-01')#
          along_with_elapsed = as.period(along_with-date_origin)  %/% 3*months(1)#
          return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
        } #
      }#
  }#
  attributes(out) <- attributes(x)#
  out#
}
lead(DT$value,1,along_with=DT$date_date,unit="month")
DT
years
date_origin = as.Date('0001-01-01')
date_origin
min(DT$date_date)
?floor
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
#' The statar package.#
#' @docType package#
#' @name statar#
#' @import data.table#
#' @import lubridate#
#' @importFrom tidyr spread_#
#' @importFrom stats lag#
NULL
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
lead <- function(x, n = 1L, default = NA, order_by , along_with , units , ...) {#
  if (!is.null(order_by)) {#
    if (!is.null(along_with)) stop("order_by and along_with cannot be specified together")#
    if (!is.null(units)) stop("order_by and units cannot be specified together")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    date_origin = as.Date('0001-01-01')#
    if (unitsc=="day"){#
      return(lead(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-date_origin)  %/% weeks(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-date_origin)  %/% months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-date_origin)  %/% 3*months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-date_origin)  %/% years(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(along_with)) {#
      index <- match(along_with + n, along_with, incomparable = NA)#
      out <- x[index]#
      if (!is.na(default)) out[which(is.na(index))] <- default#
    } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}
lag_along <- function(x, n = 1L, along_with){#
         index <- match(along_with + n, along_with, incomparable = NA)#
         out <- x[index]#
         attributes(out) <- attributes(x)#
         out#
        }
df <- data.frame(#
  id = c(1, 1, 1, 1, 1, 2, 2), #
  date = c(1992, NA, 1991, 1990, 1994, 1992, 1991), #
  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
df %>% group_by(id) %>% mutate(lag_var=lag_along(var, 1, along_with = date))
library(dplyr)
df %>% group_by(id) %>% mutate(lag_var=lag_along(var, 1, along_with = date))
df %>% group_by(id) %>% mutate(lag_var=lag_along(value, 1, along_with = date))
lag_along <- function(x, n = 1L, along_with){#
         index <- match(along_with - n, along_with, incomparable = NA)#
         out <- x[index]#
         attributes(out) <- attributes(x)#
         out#
        }
DT %>% group_by(id) %>% mutate(lag_var=lag_along(value, 1, along_with = date))
lag_along <- function(x, n = 1L, along_with){#
         index <- match(along_with - n, along_with, incomparable = NA)#
         out <- x[index]#
         attributes(out) <- attributes(x)#
         out#
        }
DT %>% group_by(id) %>% mutate(lag_var=lag_along(value, 1, along_with = date))
df %>% group_by(id) %>% mutate(lag_var=lag_along(value, 1, along_with = date))
lag_along <- function(x, n = 1L, time){#
         index <- match(time - n, time, incomparable = NA)#
         out <- x[index]#
         attributes(out) <- attributes(x)#
         out#
        }
df %>% group_by(id) %>% mutate(lag_var=lag_along(value, 1, time = date))
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
