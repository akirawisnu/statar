dt=3
mtcars %>% filter(cyl==dt)
mtcars
dt=6
mtcars %>% filter(cyl==dt)
devtools::install_github("hadley/dplyr",vignettes=FALSE)
devtools::install_github("hadley/dplyr")
library(dplyr)
dt=6#
    setDT(mtcars) %>% filter(cyl==dt)
library(data.table)
dt=6#
    setDT(mtcars) %>% filter(cyl==dt)
setDT(mtcars)
DT <- as.data.table(mtcars)
setDT(mtcars) %>% filter(cyl==dt)
DT <- as.data.table(mtcars) #
    dt=6#
   DT %>% filter(cyl==dt)
library(dplyr)
dt=6
mtcars %>% filter(cyl==dt)
mtcars %>% mutate(mean(3))
mtcars %>% mutate(mean(c(3)))
mtcars %>% mutate(mean(3))
env$`_DT` <- mtcars
`_dt`=1
env$`_dt` <- mtcars
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)#
   library(data.table)#
   DT <- as.data.table(mtcars) #
   dt <- 6#
   DT %>% filter(cyl==dt)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(dplyr)#
   library(data.table)#
   DT <- as.data.table(mtcars) #
   dt <- 6#
   DT %>% filter(cyl==dt)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
DT = fread("\"ok\" \"1993\"\n\"ok\" \"1993\"", colClasses = c("character", "numeric"))
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502)
DT %>% group_by(V1) %>% filter(ArrTime==1502)
DT
DT <- as.data.table(mtcars)
DT
DT %>% group_by(V1) %>% filter(ArrTime==1502)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502)
setnames(DT,"DayOfWeek","V1")
DT %>% group_by(V1) %>% filter(ArrTime==1502)
library(dplyr)
mtcars %>% mutate(mean(1))
remove.packages("dplyr")#
install.packages("dplyr")
library(dplyr)
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(c(1)))
mtcars %>% mutate(mean(1))
library(dplyr)
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(2))
mtcars %>% mutate(mean(3))
mtcars %>% mutate(mean(c(3)))
mtcars %>% mutate(3)
mtcars %>% mutate(1)
mean(3)
mtcars %>% mutate(1)
mtcars %>% mutate(mean(1))
mtcars_dt=as.data.table
mtcars_dt=as.data.table(mtcars)
mtcars_dt %>% mutate(mean(1))
library(data.table)
mtcars_dt=as.data.table(mtcars)
mtcars_dt %>% mutate(mean(1))
mtcars %>% group_by(cyl) %>% mutate(mean(1))
library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(1))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(2))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
mtcars %>% mutate(mean(1))
library(dplyr)#
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) ) %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) %>% mutate(mean(2))
library(dplyr)#
as.data.table(mtcars) %>% mutate(mean(2))#
mtcars %>% mutate(mean(2))
?mutate
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(statar)
?edo
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(data.table)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(dplyr)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(statar)
?edo
library(data.table)#
library(dplyr)#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)#
DT %>% edo(sum, "v*", i = v1 == 1)#
DT %>% edo(sum, "v*", d = TRUE, by = "v1")
devtools::install_github("matthieugomez/statar")
?edo
library(statar)
?edo
library(data.table)#
library(dplyr)#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)#
DT %>% edo(sum, "v*", i = v1 == 1)#
DT %>% edo(sum, "v*", d = TRUE, by = "v1")
DT %>% edo(summarize, "v2")
?eset
library(data.table)#
library(dplyr)#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% eset(order, cols = "v*")#
DT %>% eset(sort, c("v1", "v2"))#
DT %>% eset(rename, "v1", "v11")#
DT %>% eset(keep, -"id*")#
DT %>% eset(keep, "v?")
DT
?edo
library(statar)
?edo
?epanel
library(data.table)
library(dplyr)
# edo: stata commands that modify dataset#
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% eset(order, cols = "v*")#
DT %>% eset(sort, c("v1", "v2"))#
DT %>% eset(rename, "v1", "v11")#
DT %>% eset(keep, -"id*")#
DT %>% eset(keep, "v?")#
#
# eset: stata commands that don't modify dataset#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)#
#
# epanel #
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT <- DT %>% epanel(cols = "id", t = "date", L1.value)#
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = TRUE)#
DT <- DT %>% epanel(cols = "id", t = "date", fill)#
#
## ejoin #
ejoin(DTm, DTu, m:1)#
ejoin(DTm, DTu, type = 1:1, keep = "matched", gen = "_merge")#
ejoin(DTm, DTu, m:m, keep = c("master", "matched"), gen = FALSE)#
#
# tempname creates a name not assigned in the environment specified by the second variable#
tempvar <- tempname("temp", DT)#
tempname <- tempname("temp", globalenv())
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT <- DT %>% epanel(cols = "id", t = "date", L1.value)
DT
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
DT %>% epanel(cols = "id", t = "date", L1.value)
DT
DT <- DT %>% epanel(cols = "id", t = "date", L1.value)
DT
DT %>% epanel(cols = "id", t = "date", L1.value)
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = TRUE)
DT
.data <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)
.data %>% mutate(mean=mean(value))
.data %>% mutate(mean=mean(v1)))
.data %>% mutate(mean=mean(v1))
function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT[,mean(v1)]}
f <- function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT[,mean(v1)]}
f(DT, inplace = FALSE)
f <- function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT}
f(DT, inplace = FALSE)
f <- function(DT,inplace){if (!inplace) DT <- copy(DT) ; DT[,v1:=1]}
f(DT, inplace = FALSE)
DT
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = TRUE)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L3.value", inplace = FALSE)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L1.value", inplace = FALSE)
devtools::document(/Users/Matthieu/Dropbox/Github/statar-package)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(statar)
DT %>% epanel(cols = "id", t = "date", L3.value, gen = "L1.value", inplace = FALSE)
DT %>% epanel(cols = "id", t = "date", mevalue, gen = "L1.value", inplace = FALSE)
library(tidyr)
?gather
library(dplyr)#
# From http://stackoverflow.com/questions/1181060#
stocks <- data.frame(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
#
gather(stocks, stock, price, -time)
library(data.table)#
# From http://stackoverflow.com/questions/1181060#
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
#
gather(stocks, stock, price, -time)
M <- gather(stocks, stock, price, -time)
is.data.table(M)
?spread
M %>% spread(stock, price)
debug(gather)
M <- gather(stocks, stock, price, -time)
s
devtools::install_github("matthieugomez/statar")
library(statar)
M <- gather(stocks, stock, price, -time)
n
s
gather_data.frame
gather_.data.frame
gather_.data.tabke
tidyr::gather_.data.frame
devtools::install_github("matthieugomez/statar")
suppressMessages(library("data.table"))
library("tidyr")
library(statar)
?spread
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
stocksm <- stocks %>% gather(stock, price, -time)
library(dplyr)
stocks <- data.table(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)#
stocksm <- stocks %>% gather(stock, price, -time)
?include.lowest
?cut
quantile
?quantile
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
x=DT$v1
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
nq=3
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
breaks
?quantile
#' xtile - Create variable containing quantiles#
#' @param x A vector#
#' @param nq Number of quantiles. Quantiles are computed as the inverse of empirical distribution function#
#' @param cutpoints Cutpoints to use if nq is not specified.  For instance 0.4 creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4#
#' @examples #
#' library(dplyr)#
#' DT <- DT %>% group_by(id) %>% mutate(new = xtile(date, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))#
#' @export#
#
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)#
      return(xtile(x, cutpoints = breaks, include.lowest = include.lowest))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length), include.lowest = include.lowest)#
}
xtile(DT$v1,nq=3)
#' xtile - Create variable containing quantiles#
#' @param x A vector#
#' @param nq Number of quantiles. Quantiles are computed as the inverse of empirical distribution function#
#' @param cutpoints Cutpoints to use if nq is not specified.  For instance 0.4 creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4#
#' @examples #
#' library(dplyr)#
#' DT <- DT %>% group_by(id) %>% mutate(new = xtile(date, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))#
#' @export#
#
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)#
      return(xtile(x, cutpoints = breaks))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length))#
}
xtile(DT$v1,nq=3)
breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1)-1)
breaks
quantile(x, seq(0, 1, length = nq + 1), type = 1)
head(quantile(x, seq(0, 1, length = nq + 1), type = 1),-1)
head(quantile(x, seq(0, 1, length = nq + 1), type = 1),1)
?head
tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1),1),1)
tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1),-1),-1)
#' xtile - Create variable containing quantiles#
#' @param x A vector#
#' @param nq Number of quantiles. Quantiles are computed as the inverse of empirical distribution function#
#' @param cutpoints Cutpoints to use if nq is not specified.  For instance 0.4 creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4#
#' @examples #
#' library(dplyr)#
#' DT <- DT %>% group_by(id) %>% mutate(new = xtile(date, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
#' DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))#
#' @export#
#
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1),-1)#
      return(xtile(x, cutpoints = breaks))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length))#
}
tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1),-1),-1)
quantile(x, seq(0, 1, length = nq + 1), type = 1)
xtile(DT$v1,nq=3)
xtile <- function(x, nq = NULL, cutpoints = NULL){#
  if (!is.null(nq)){#
  if (!is.null(cutpoints)) stop("Only one option out of nq and cutpoints can be used")#
      breaks <- tail(head(quantile(x, seq(0, 1, length = nq + 1), type = 1), -1),-1)#
      return(xtile(x, cutpoints = breaks))#
  } #
  length=length(cutpoints)+1#
  cut(x, breaks = c(min(x), cutpoints ,max(x)) , labels = seq_len(length), include.lowest=TRUE)#
}
quantile(x, seq(0, 1, length = nq + 1), type = 1)
xtile(DT$v1,nq=3)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
order
?dplyr
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
DT
DT %>% select(v1)
library(dplyr)
DT %>% select(v1)
DT
DT %>% select(v1,inplace = TRUE)
mutate
select
debug(select)
DT %>% select(v1,inplace = TRUE)
s
n
inplace
DT %>% mutate(mean(v1),inplace = TRUE)
debug(mutate)
DT %>% mutate(mean(v1),inplace = TRUE)
s
inplace
q
f
?lazy_eval::all_dots
?lazyeval::all_dots
DT %>% mutate(mean(v1),inplace = TRUE)
s
n
dots
inplace
DT %>% mutate(mean(v1),inplace = TRUE)
DT
f
setdiff
DT %>% mutate_each(mean,inplace = TRUE)
DT %>% mutate_each(funs(mean),inplace = TRUE)
?select
DT %>% select(v1,inplace = TRUE)
s
n
vars
setdiff(vars,names(.data))
names(.data)
setdiff(names(.data),vars)
DT %>% select(v1,inplace = TRUE)
s
n
dots
dots$inplace
dots$inplace==TRUE
dots$inplace$code==TRUE
dots$inplace$code
dots$inplace
ls(dots$inplace)
names(dots$inplace)
is.env(dots$inplace)
dots$inplace
attr(dots$inplace)
attributes(dots$inplace)
dots$inplace$expr
names(dots)
dots$inplace <- NULL
dots$inplace
dots[[2]] <- NULL
dots
DT %>% select(v1,inplace = TRUE)
s
dots
n
dots
match("inplace",dots)
match("inplace",names(dots))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
DT %>% select(v1,inplace = TRUE)
library(dplyr)
DT %>% select(v1,inplace = TRUE)
s
]]]]]
f
ff
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% select(v1,inplace = TRUE)
DT
DT %>% select(v1,inplace = TRUE)
s
f
library(plyr)
suppressMessages(library("data.table"))
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1,inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(mean, inplace = TRUE)
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT %>% mutate_each(funs(mean))
DT
DT %>% mutate(mean(v1),inplace=TRUE)
DT
debug(mutate_each)
DT %>% mutate_each(funs(mean))
s
f
n
s
n
dots
f
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
s
n
vars
vars$inplace
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% mutate_each(funs(mean),inplace=TRUE)
n
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
suppressMessages(library("dplyr"))
suppressMessages(library("data.table"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
#sink.reset
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
vars
DT %>% mutate_each(funs(mean), inplace = TRUE)
debug(mutate_each)
DT %>% mutate_each(funs(mean), inplace = TRUE)
s
f
n
vars
length(TRUE)
is.atomic(TRUE)
is.atomic(c(TRUE.TRUE))
is.atomic(c(TRUE,TRUE))
dots
l=llist(1="ok")
l=list(1="ok")
l=list(ok = "ok")
l$NA
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
suppressMessages(library("data.table"))
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean))
DT
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
suppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean), inplace = FALSE)
DT
DT %>% select(v2, inplace = FALSE)
library(dpsuppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
suppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1)
DT
DT %>% select(v1, inplace = TRUE)
DT
#' Gives summary statistics (Stata command summarize)#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude in s You can use same specifications as in select. If missing, defaults to all non-grouping variables.#
#' @param inplace Change data.table in place or not#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 =  sample(5, N, TRUE),                          #
#'   v2 =  sample(1e6, N, TRUE),                       #
#'   v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) #
#' )#
#' DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#' @export#
colorder <- function(.data, ..., inplace = FALSE) {#
  colorder_(.data, vars = lazyeval::lazy_dots(...) , inplace = inplace)#
}#
#' @export#
colorder_ <- function(.data, vars, inplace = FALSE ) {#
  if (length(vars) == 0) {#
     vars <- lazyeval::lazy_dots(everything())#
   }#
  vars <- select_vars_(tbl_vars(.data), vars)#
  if (!inplace) .data <- copy(.data)#
  setcolorder(.data,vars,setdiff(names(.data),vars))#
  .data#
}
DT  %>% colorder(starts_with("v"), inplace = TRUE)
#' Gives summary statistics (Stata command summarize)#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude in s You can use same specifications as in select. If missing, defaults to all non-grouping variables.#
#' @param inplace Change data.table in place or not#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 =  sample(5, N, TRUE),                          #
#'   v2 =  sample(1e6, N, TRUE),                       #
#'   v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) #
#' )#
#' DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#' @export#
colorder <- function(.data, ..., inplace = FALSE) {#
  colorder_(.data, vars = lazyeval::lazy_dots(...) , inplace = inplace)#
}#
#' @export#
colorder_ <- function(.data, vars, inplace = FALSE ) {#
  if (length(vars) == 0) {#
     vars <- lazyeval::lazy_dots(everything())#
   }#
  vars <- select_vars_(tbl_vars(.data), vars)#
  if (!inplace) .data <- copy(.data)#
  setcolorder(.data,c(vars,setdiff(names(.data),vars)))#
  .data#
}
DT  %>% colorder(starts_with("v"), inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT  %>% colorder(starts_with("v"), inplace = TRUE)
DT
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(dplyr)#
library(statar)#
#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
      id = 1:N,#
      v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
      v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
      v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
    )#
#
### quantile category (=Stata xtile)#
DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))
DT %>% group_by(id) %>% mutate(lag(value, order_by = time)) # Balanced dataset#
DT %>% group_by(id) %>% mutate(lag(value, along_with = time)) # Unbalanced dataset
DT %>% group_by(id) %>% mutate(lag(value, order_by = time)) # Balanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, order_by = time)) # Balanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, along_with = time)) # Unbalanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, order_by = v1))
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
library(data.table)#
#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
### col_order (= Stata order)#
DT  %>% col_order(starts_with("v"))#
DT  %>% col_order(starts_with("v"), inplace = TRUE)#
#
### sum_up (= Stata summarize)#
DT  %>% sum_up#
DT  %>% sum_up(v3, d=T)#
DT  %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
### expand (= Stata tsfill)#
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% expand(date)#
DT %>% expand(date)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?spread
?gather
library(tidyr)
?gather
stocks <- data.frame(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)
stocks
socks %>% gather(type, price)
library(dplyr)
socks %>% gather(type, price)
stocks %>% gather(type, price)
DT_long <- DT_wide %>% gather(variable, value, -time)
DT_long <- stocks %>% gather(variable, value, -time)
DT_long
DT_long <- DT_wide %>% spread (variable, value, -time)
DT_wide <- DT_long %>% spread (variable, value, -time)
?spread
DT_wide <- DT_long %>% spread(variable, value, -time)
DT_wide <- DT_long %>% spread(variable, value)
DT_wide
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0)))
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0))
library(data.table)
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0))
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2=c(4.5,3.0))
DT_wide
DT_wide %>% gather(variable, value, -i)
DT_long <- DT_wide %>% gather(variable, value, -i)
DT_long %>% spread(variable, value)
assignInNamespace("cedta.override", c(data.table:::cedta.override,"IRkernel#
                                      "), "data.table")
showMethods(expand)
library(matrix)
showMethods(expand)
library(Matrix)
showMethods(expand)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(statar)
library(data.table)
?hour
library(matrix)
library(Matrix)
?expand
showMethods(Matrix)
is.object(expand) & !isS4(expand)
is.object(expand
)
!isS4(expand)
isS4(expand)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(lubridate)
weeks
months
months(1)
years(1)
years
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
library(biglm)#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
?expand
?expand_
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
lag
?lag
?lead
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
library(biglm)#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
?lag
?lead
?expand
?xtile
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?sum_up
library(statar)
?sum_up
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
library(statar)
?sum_up
library(statar)
?sum_up
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
lead_along <- function(x, n = 1L, units = NULL, date, default = NA) {#
  if (!is.null(units)) {#
    if (is.null(date)) stop("units cannot be used without order_by")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    date_origin <- as.Date('0001-01-01')#
    if (unitsc=="day"){#
      return(lead_along(x = x, n = n, default = default, date = along))#
    }#
    if (unitsc == "week"){#
      date_elapsed <- as.period(date-date_origin)  %/% weeks(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    }  #
    else if (unitsc == "month"){#
      date_elapsed <- as.period(date-date_origin)  %/% months(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    } else if (unitsc == "quarter"){#
      date_elapsed <- as.period(date-date_origin)  %/% 3*months(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    } else if (unitsc == "year"){#
      date_elapsed <- as.period(date-date_origin)  %/% years(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    }#
  }#
#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  index <- match(date + n, date, incomparable = NA)#
  out <- x[index]#
  if (!is.na(default)) out[which(is.na(index))] <- default#
  attributes(out) <- attributes(x)#
  out#
}
lag_along <- function(x, n = 1L,  units = NULL, date = NULL, default = NA) {#
    if (!is.null(units)) {#
      if (is.null(date)) stop("units cannot be used without order_by")#
      unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
      date_origin <- as.Date('0001-01-01')#
      if (unitsc=="day"){#
        return(lag_along(x = x, n = n, default = default, date = along))#
      }#
      if (unitsc == "week"){#
        date_elapsed <- as.period(date-date_origin)  %/% weeks(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      }  #
      else if (unitsc == "month"){#
        date_elapsed <- as.period(date-date_origin)  %/% months(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      } else if (unitsc == "quarter"){#
        date_elapsed <- as.period(date-date_origin)  %/% 3*months(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      } else if (unitsc == "year"){#
        date_elapsed <- as.period(date-date_origin)  %/% years(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      }#
    }#
#
    if (n == 0) return(x)#
    if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
    index <- match(date - n, date, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
    attributes(out) <- attributes(x)#
    out#
  }
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
date := as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%y")
date = as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%y")
date+1
date
date = as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%y")
date
?as.Date
date = as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%Y")
date
devtools::install_github("matthieugomez/tidyr")#
devtools::install_github("matthieugomez/lazyeval")#
devtools::install_github("matthieugomez/dplyr")#
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
setwd("/Users/Matthieu/Dropbox/Symlink")#
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
library(dplyr)#
library(data.table)#
library(statar)#
#
# partition creates quantile categories (corresponds to Stata xtile)#
v2 <-   sample(1e6, 1e6, TRUE)                   #
v2_categorized <- partition(v2, nq = 3) # 3 groups based on terciles#
v2_categorized <- partition(v2, cutpoints = c(1e5, 5e5)) # 3 groups based on two cutpoints#
#
# lag_along (corresponds to Stata L. F.)#
## Unbalanced panel#
DT <- data.frame(#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% mutate(lag(value, 1, order_by = date)) # wrong#
DT %>% mutate(lag(value, 1, along_with = date)) # right#
## You can use periods instead of an integer, as defined in lubridate#
library(lubridate)#
df <- data.frame(#
    id = c("1", "1", "1", "1"),#
  date = as.Date(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y"),#
 value = c(4.1, 4.5, 3.3, 5.3)#
)#
df <- df %>% mutate(date = floor_date(date, "month"))#
df %>% group_by(id) %>% mutate(lag(value, months(1), along_with = date))
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' floor_date #
#' Round date-times down.#
#'#
#' floor_date takes a date-time object and rounds it down to the nearest integer #
#' value of the specified time unit. Users can specify whether to round down to #
#' the nearest second, minute, hour, day, week, month, quarter or year.#
#'#
#' @export floor_date#
#' @param x a vector of date-time objects #
#' @param unit a character string specifying the time unit to be rounded to. Should be one of #
#'   "second","minute","hour","day", "week", "month", or "year."#
#' @return x with the appropriate units floored#
#' @seealso \code{\link{ceiling_date}}, \code{\link{round_date}}#
#' @keywords manip chron#
#' @examples#
#' x <- as.POSIXct("2009-08-03 12:01:59.23")#
#' floor_date(x, "second")#
#' # "2009-08-03 12:01:59 CDT"#
#' floor_date(x, "minute")#
#' # "2009-08-03 12:01:00 CDT"#
#' floor_date(x, "hour")#
#' # "2009-08-03 12:00:00 CDT"#
#' floor_date(x, "day")#
#' # "2009-08-03 CDT"#
#' floor_date(x, "week")#
#' # "2009-08-02 CDT"#
#' floor_date(x, "month")#
#' # "2009-08-01 CDT"#
#' floor_date(x, "quarter")#
#' # "2009-07-01 CDT"#
#' floor_date(x, "year")#
#' # "2009-01-01 CST"#
#
floor_date <- function (x, unit = c("second", "minute", "hour", "day", "week",  #
    "month","quarter", "year")) {#
    unit <- match.arg(unit)   #
    unit_temp <- unit#
    if (unit=="quarter")  unit_temp <-  "month" #
    new <- switch(unit_temp,#
        second = update(x, seconds = floor(second(x))),#
        minute = update(x, seconds = 0),#
        hour =   update(x, minutes = 0, seconds = 0),#
        day =    update(x, hours = 0, minutes = 0, seconds = 0),#
        week =   update(x, wdays = 1, hours = 0, minutes = 0, seconds = 0),#
        month =  update(x, mdays = 1, hours = 0, minutes = 0, seconds = 0),#
        year =   update(x, ydays = 1, hours = 0, minutes = 0, seconds = 0)#
        )#
    if (unit == "quarter"){#
      modulo <- (month(new)-1) %% 3 #
      new <- ifelse(modulo==1, new - months(1), ifelse(modulo==2, new - months(2),new))#
      attributes(new) <- attributes(x)#
    }#
    new#
}
