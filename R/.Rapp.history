install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
DT[,id1:=4] %>% mutate(m=mean(id))
call
library(dplyr)
DT[,id1:=4] %>% mutate(m=mean(id))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT[,id1:=4] %>% mutate(m=mean(id))
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% DT[,mean(id)]
DT %>% mutate(mean(id))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% mutate(mean(id))
library(dplyr)
DT %>% mutate(mean(id))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
DT %>% mutate(mean(id))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate(mean(id))
DT %>% mutate(mean(cols))
f=function(x){y<-1g(x)}#
g=function(x){eval(x)}
f=function(x){y<-1; g(x)}#
g=function(x){eval(x)}
f=function(x){y<-1; g(x)}#
g=function(x){eval(x)}#
#
f(quote(y))
y<-3#
f=function(x){y<-1; g(x)}#
g=function(x){eval(x)}#
f(quote(y))
debug(g)
y<-3#
f=function(x){y<-1; g(x)}#
g=function(x){eval(x)}#
f(quote(y))
debug(g)
f(quote(y))
x
eval(y)
y<-3#
f=function(x){y<-1; g(x)}#
g=function(x){y<-1; eval(x)}#
f(quote(y))
y<-3#
f=function(x){y<-1; g(x)}#
g=function(x){y<-1; eval(x)}
y<-3#
f=function(x){g(x)}#
g=function(x){y<-1; eval(x)}
f(quote(y))
y<-3#
    z<-3#
    f=function(x){y<-1; g(x)}#
    g=function(x){z<-1; eval(x)}#
    f(quote(y))#
    f(quote(z))
y<-3#
z<-3#
f=function(x){y<-1; g(x)}#
g=function(x){z<-1; eval(x)}#
f(quote(z))
f(quote(y))
g(quote(z)
)
g(quote(z))
y<-3#
z<-3#
f=function(x){y<-1; g(x)}#
g=function(x){z<-1; eval(x)}#
f(quote(z))
f(quote(y))
y<-3#
z<-3#
f=function(x){y<-1; g(x)}#
g=function(x){z<-1; print(x)}
g(quote(z))
y<-3#
z<-3#
f=function(x){y<-1; g(x)}#
g=function(x){z<-1; eval(x)}
y<-3#
z<-3#
f=function(x){y<-1; g(x)}#
g=function(w){z<-1; eval(w)}
f(quote(z))
f(quote(y))
y<-3#
z<-3#
f=function(x){x<-1; g(x)}#
g=function(x){z<-1; eval(x)}
f(quote(y))
f(quote(z))
y<-3#
z<-3#
f=function(){y<-1; g(x)}#
g=function(){z<-1; print(x)}
f()
y<-3#
z<-3#
f=function(x){y<-1; g(x)}#
g=function(x){z<-1; print(x)}
f(z)
y<-3#
x <-3#
f=function(x){y<-1; g(x)}#
g=function(x){y<-1; eval(x)}
f()
f(quote(y))
f(quote(x))
y<-3#
x <-3#
f=function(x){y<-1; g(x)}#
g=function(x){y<-1; eval(x)}
f()
y<-3#
z <-3#
f=function(x){y<-1; g(x)}#
g=function(x){z<-1; eval(x)}#
f(quote(y))#
f(quote(z))
y<-1
f(quote(y))
y<-3#
z <-3#
f=function(x){y<-1; g(x)}#
g=function(x){z<-1; eval	x <-5#
	f=function(y){#
		print(a)#
		a <-5#
		print(a)#
		g(x)#
	}#
	g=function(x){#
		print(a)#
	}(x)}#
f(quote(y))#
f(quote(z))
x <-5#
	f=function(y){#
		print(a)#
		a <-5#
		print(a)#
		g(x)#
	}#
	g=function(x){#
		print(a)#
	}
f(5)
a <-5#
	f=function(y){#
		print(a)#
		a <-5#
		print(a)#
		g()#
	}#
	g=function(){#
		print(a)#
	}#
	f(1)
a <-3#
	f=function(y){#
		print(a)#
		a <-5#
		print(a)#
		g()#
	}#
	g=function(){#
		print(a)#
	}#
	f()
a<-6#
	f()
library(dplyr)
DT
DT %>% mutate(mean(v1))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% mutate(mean(v1))
debug(mutate.data.table)
debug(dplyr::mutate.data.table)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
debug(dplyr::mutate.data.table)
DT %>% mutate(mean(v1))
library(dplyr)
DT %>% mutate(mean(v1))
traceback()
DT
DT=setDT(DT)
DT %>% mutate(mean(v1))
debug(dplyr::mutate.data.table)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% mutate(mean(v1))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate(mean(v1))
ok<-4
DT %>% mutate(mean(v1))
?parent.frame
f=function(){a<-1; eval(a,globalenv())}
f(a)
f(x)
f()
a
f=function(){a<-1; eval(a,globalenv(),globalenv())}
f()
a
?eval
f=function(){a<-1; eval(a,enclos=globalenv())
}
f()
f=function(){a<-1; eval(a,enclos=parent.frame())
}
f()
f=function(){a<-1; eval(a,envir=parent.frame())
}
f()
f=function(){a<-1; eval(a,envir=parent.frame())
)
f=function(){a<-1; eval(a,envir=parent.frame())}
f()
f=function(){a<-1; eval(a,envir=parent.frame(1))}
f()
f=function(){a<-1; eval(a,envir=parent.frame(2))}
f()
f=function(){a<-1; eval(quote(a),envir=parent.frame(2))}
f()
f=function(){a<-1; eval(quote(a),envir=parent.frame())}
f()
f=function(){a<-1; eval(quote(a))}
f()
f=function(){a<-1; eval(quote(a),parent.frame())}
f()
f=function(x){a<-1; eval(x)}#
f()
f=function(x){a<-1; eval(x)}#
f(quote(a))
f=function(x){a<-1; eval(x,parent.frame())}
f(quote(a))
a=3
library(R)
library(pryr)
subs(a)
?new.env
f=function(x){a<-1; eval(x,parent.frame())}
f=function(DT){eval(DT[,mean(a)],parent.frame())}
f(DT)
DT
f(DT[,a:=4))
f(DT[,a:=4]))
f(DT[,a:=4])
f(DT[,a:=1:N])
a
library(pryr)
pryr::call_true
DT
DT[,mean(b)]
b<-5
DT[,mean(b)]
DT %>%mutate(mean(b))
library(devtools)#
devtools::install_github("hadley/dplyr")
DT %>% mutate(mean(b))
library(dplyr)
DT %>% mutate(mean(b))
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate(mean(b))
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr")]
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr")
library(dplyr)
DT %>% mutate(mean(b))
library(dplyr)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate(mean(b))
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr",vignettes=FALSE)
install_github("Rdatatable/data.table", build_vignettes=FALSE)
debtools:install_github("hadley/dplyr", build_vignettes=FALSE)
devtools:install_github("hadley/dplyr", build_vignettes=FALSE)
devtools::install_github("hadley/dplyr", build_vignettes=FALSE)
DT
library(data.table)
DT
subset
test = function(arg1,arg2, verbose=0) {   #
  r1 = mean(arg1)#
  r2 = mean(arg2)#
#
  res = (2/pi * r1 *cos(r2))#
  if (verbose>1) browser()#
  return(res)#
}
test(3,2,verbose=2)
library(data.table)
test(3,2,verbose=2)
re
test = function(arg1,arg2, verbose=0) {   #
  r1 = mean(arg1)#
  r2 = mean(arg2)#
#
  res = (2/pi * r1 *cos(r2))#
  if (verbose>1) recover()#
  return(res)#
}
test(3,2,verbose=2)
0
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
body(mutate_each)
library(dplyr)
body(mutate_each)
trace(mutate_each,quote(recover(),at=3,print=F)
)
trace(mutate_each,quote(recover()),at=3,print=F)
mutate_eacch(DT,funs(mean))
mutate_each(DT,funs(mean))
trace(mutate_each,quote(recover()),at=3)
as.list(body(mutate_each))
untrace(mutate_each)
trace(mutate_each,quote(recover()),at=4)
trace(mutate_each,quote(recover()),at=3)
as.list(body(mutate_each))
mutate_each(DT,funs(mean))
untrace(mutate_each)
browseOnce <- function() {#
  old <- getOption("error")#
  function() {#
    options(error = old)#
    browser()#
  }#
}#
options(error = browseOnce())
mutate_each(DT,funs(f))
mutate_each(DT,funs(asfew))
summarise_each(DT,funs(asfew))
f <- function(x) {#
    r <- x - g(x)#
    r#
}#
g <- function(y) {#
    r <- y * h(y)#
    r#
}#
h <- function(z) {#
    r <- log(z)#
    if (r < 10) #
        r^2 else r^3#
}
trace(h, exist=recover)
trace(h, exit=recover)
untrace(h)
trace(f, exit=recover)
f(4)
trace(f, exit=browser)
f(4)
untrace(f)
f(4)
trace(f, exit=recover)
f(4)
debug(mutate_each)
f <- function(x) {#
        r <- x - g(x)#
        r#
    }#
    g <- function(y) {#
        r <- y * h(y)#
        r#
    }#
    h <- function(z) {#
        r <- log(z)#
        if (r < 10) #
            r^2 else r^3#
    }
trace(f, exit=recover)
f(4)
trace(f, exit=entry)
trace(f, entry=recover)
?trace
f(4)
recover()
f("a")
debug(mutate_each)
mutate_each(DT,funs(mean))
debug(dplyr::mutate_each_q)
mutate_each(DT,funs(mean))
undebug(dplyr::mutate_each_q)
undebug(mutate_each)
mutate_each(DT,funs(mean))
?debug
?borwser
?browser
debug(dplyr::mutate_each_q)
debug(dplyr::mutate_each)
mutate_each(DT,funs(mean))
s
?browser
mutate_each(DT,funs(mean))
s
n
s
n
f
?browser
x <- 1#
		quote(x)
library(speedglm)
?speedlm
library(dplyr)
n_group
ngroup
n_groups
set.seed(123)
x=matrix(rnorm(10^6),10^4,100)
system.time({svd(x)})
library(data.table)#
N=2e6; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time(speedlm(v3~v2,DT) )
library(speedlm)
library(speedglm)
system.time(speedlm(v3~v2,DT) )
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
library(biglm)
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
library(data.table)#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
> system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
rm(ls())
rm(list=ls())
library(data.table)#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
rm(list=ls())
library(data.table)#
N=2e6; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
dplyr:::unique_name("dt",globalenv())
unique_name <- function(prefix,env){#
  i <- 0L#
  name <- prefix#
  while (exists(name,env)) {#
    i <- i + 1L#
    name <- paste0(prefix,as.character(i))#
    }#
  name#
}
unique_name("dt",globalenv())
unique_name23("dt",globalenv())
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
?unique_name
?dplyr:::unique_name
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
library(dplyr)
debug(filter_data.table)
debug(dplyr:::filter_data.table)
debug(dplyr::::filter_data.table)
debug(filter)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
s
n
dots_env
exists("dt",dots_env)
exists("dt1",dots_env)
unique_name("dt1",dots_env)
s
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
s
n
s
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
debug(filter)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
s
n
dt_unique
vars_unique
call
env
ls(env)
DT
v=Year
v="Year"
DT$c(v)
?assign
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
DT
DT[,3,with=FALSE]
DT[,3,with=FALSE,drop=TRUE]
?data.table
setDF(table)[,length(table)-1]
setDF(DT)[,length(DT)]
library(dplyr)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==) %>% nrow
mtcars %>% filter(cyl==dt)
dt=3
mtcars %>% filter(cyl==dt)
mtcars
dt=6
mtcars %>% filter(cyl==dt)
devtools::install_github("hadley/dplyr",vignettes=FALSE)
devtools::install_github("hadley/dplyr")
library(dplyr)
dt=6#
    setDT(mtcars) %>% filter(cyl==dt)
library(data.table)
dt=6#
    setDT(mtcars) %>% filter(cyl==dt)
setDT(mtcars)
DT <- as.data.table(mtcars)
setDT(mtcars) %>% filter(cyl==dt)
DT <- as.data.table(mtcars) #
    dt=6#
   DT %>% filter(cyl==dt)
library(dplyr)
dt=6
mtcars %>% filter(cyl==dt)
mtcars %>% mutate(mean(3))
mtcars %>% mutate(mean(c(3)))
mtcars %>% mutate(mean(3))
env$`_DT` <- mtcars
`_dt`=1
env$`_dt` <- mtcars
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)#
   library(data.table)#
   DT <- as.data.table(mtcars) #
   dt <- 6#
   DT %>% filter(cyl==dt)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(dplyr)#
   library(data.table)#
   DT <- as.data.table(mtcars) #
   dt <- 6#
   DT %>% filter(cyl==dt)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
DT = fread("\"ok\" \"1993\"\n\"ok\" \"1993\"", colClasses = c("character", "numeric"))
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502)
DT %>% group_by(V1) %>% filter(ArrTime==1502)
DT
DT <- as.data.table(mtcars)
DT
DT %>% group_by(V1) %>% filter(ArrTime==1502)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502)
setnames(DT,"DayOfWeek","V1")
DT %>% group_by(V1) %>% filter(ArrTime==1502)
library(dplyr)
mtcars %>% mutate(mean(1))
remove.packages("dplyr")#
install.packages("dplyr")
library(dplyr)
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(c(1)))
mtcars %>% mutate(mean(1))
library(dplyr)
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(2))
mtcars %>% mutate(mean(3))
mtcars %>% mutate(mean(c(3)))
mtcars %>% mutate(3)
mtcars %>% mutate(1)
mean(3)
mtcars %>% mutate(1)
mtcars %>% mutate(mean(1))
mtcars_dt=as.data.table
mtcars_dt=as.data.table(mtcars)
mtcars_dt %>% mutate(mean(1))
library(data.table)
mtcars_dt=as.data.table(mtcars)
mtcars_dt %>% mutate(mean(1))
mtcars %>% group_by(cyl) %>% mutate(mean(1))
library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(1))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(2))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
mtcars %>% mutate(mean(1))
library(dplyr)#
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) ) %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) %>% mutate(mean(2))
library(dplyr)#
as.data.table(mtcars) %>% mutate(mean(2))#
mtcars %>% mutate(mean(2))
?mutate
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(statar)
?edo
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(data.table)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(dplyr)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
devtools:document("/Users/Matthieu/Dropbox/Github/statar-package"_
devtools:document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
library(data.table)
library(dplyr)
N <- 100; K <- 10#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),#
  v2 =  sample(1e6, N, TRUE),#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE)#
)#
DT %>% edo(summarize, "v2")#
DT %>% edo(sum, "v*", d = TRUE)
lazyeval
edo=function(DT,cmd,cols=names(DT),...,i=NULL,by=NULL){#
  if (!is.data.table(DT)){#
    stop(paste0("First argument is not a data.table. Convert it first using setDT()"))#
  }#
  cmdc=as.character(substitute(cmd))#
  cmdc <-match.arg(cmdc,c("summarize"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  colvars = idvars_q(colsub,names(DT))#
  bysub <- substitute(by)#
  byvars <- idvars_q(bysub,names(DT))#
  if (cmdc=="summarize"){#
      eval(substitute(invisible(DT[i,describe(.SD,...),by = byvars,.SDcols=colvars])))#
  }#
}
edo(DT,sum,by="id1")
idvars_q=function(id,l){#
    if (is.call(id) && id[[1L]] == "-") {#
        idm = TRUE#
        id = id[[2L]]#
    }#
    else{#
        idm = FALSE#
    }#
    id <- eval(id,parent.frame())#
    if (!is.character(id)) stop("ids should be column numbers or names")#
    if (any(is.na(id))) stop("Some items of ids are NA)")#
    if (any(!id %chin%  l)){#
        #try wildcard #
        if (length(id) !=1L) stop("Some items of ids are not column names")#
        id_vector <- strsplit(id, "\\s+")[[1]]#
        id=NULL#
         for (c in id_vector){#
            temp <- grep(glob2rx(c),l,value=TRUE)#
            if (!length(temp)) stop("Some items of ids are not column names")#
            id <- c(id,temp)#
        }#
    }#
    if (idm) idvars = setdiff(l, id) else idvars = id#
    return(idvars)#
}
edo(DT,sum,by="id1")
debug(edo)
edo(DT,sum,by="id1")
bysub
DT
edo(DT,sum,by="id")
edo(DT,sum)
bysub
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
edo=function(DT,cmd,cols=names(DT),...,i=NULL,by=NULL){#
  if (!is.data.table(DT)){#
    stop(paste0("First argument is not a data.table. Convert it first using setDT()"))#
  }#
  cmdc=as.character(substitute(cmd))#
  cmdc <-match.arg(cmdc,c("summarize"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  colvars = idvars_q(colsub,names(DT))#
  bysub <- substitute(by)#
  byvars <- NULL#
  if (length(bysub)) { byvars <- idvars_q(bysub,names(DT))}#
  if (cmdc=="summarize"){#
      eval(substitute(invisible(DT[i,describe(.SD,...),by = byvars,.SDcols=colvars])))#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
edo=function(DT,cmd,cols=names(DT),...,i=NULL,by=NULL){#
  if (!is.data.table(DT)){#
    stop(paste0("First argument is not a data.table. Convert it first using setDT()"))#
  }#
  cmdc=as.character(substitute(cmd))#
  cmdc <-match.arg(cmdc,c("summarize"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  colvars = idvars_q(colsub,names(DT))#
  bysub <- substitute(by)#
  byvars <- NULL#
  if (length(bysub)) { byvars <- idvars_q(bysub,names(DT))}#
  if (cmdc=="summarize"){#
      eval(substitute(invisible(DT[i,describe(.SD,...),by = byvars,.SDcols=colvars])))#
  }#
}
edo(DT,sum,by="id1")
edo(DT,sum,by="id")
debug(edo)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
edo=function(DT,cmd,cols=names(DT),...,i=NULL,by=NULL){#
  if (!is.data.table(DT)){#
    stop(paste0("First argument is not a data.table. Convert it first using setDT()"))#
  }#
  cmdc=as.character(substitute(cmd))#
  cmdc <-match.arg(cmdc,c("summarize"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  colvars = idvars_q(colsub,names(DT))#
  bysub <- substitute(by)#
  byvars <- NULL#
  if (length(bysub)) { byvars <- idvars_q(bysub,names(DT))}#
  if (cmdc=="summarize"){#
      eval(substitute(invisible(DT[i,describe(.SD,...), by = byvars, .SDcols = colvars])))#
  }#
}
debug(edo)
edo(DT,sum,by="id")
cmdc
substitute(invisible(DT[i, describe(.SD, ...), by = byvars, #
        .SDcols = colvars]))
DT[NULL, describe(.SD), by = "id", .SDcols = c("id", #
"v1", "v2", "v3")])
DT[NULL, describe(.SD), by = "id", .SDcols = c("id", #
"v1", "v2", "v3")]
DT[, describe(.SD), by = "id", .SDcols = c("id", #
"v1", "v2", "v3")]
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
describe <- function(M,details = FALSE,na.rm = TRUE,mc.cores=getOption("mc.cores", 2L)){#
  # import from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
      x.original <- x#
      first.part <- ""#
      if (is.na(x) | is.null(x)) {#
          return("")#
      }#
      if (simply.output == TRUE) {#
          if (!is.numeric(x)) {#
              return(.remove.special.chars(x))#
          }#
      }#
      if (x.original < 0) {#
          x <- abs(x)#
      }#
      if (!is.na(decimal.places)) {#
          if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
              0)) {#
              round.result <- round(x, digits = decimal.places)#
          }#
          else {#
              temp.places <- decimal.places#
              if (!.is.all.integers(x)) {#
                while ((round(x, digits = temp.places) == 0) & #
                  (temp.places < (decimal.places + .format.max.extra.digits))) {#
                  temp.places <- temp.places + 1#
                }#
              }#
              round.result <- round(x, digits = temp.places)#
              decimal.places <- temp.places#
          }#
          if ((round.up.positive == TRUE) & (round.result < #
              x)) {#
              if (x > (10^((-1) * (decimal.places + 1)))) {#
                round.result <- round.result + 10^((-1) * decimal.places)#
              }#
              else {#
                round.result <- 0#
              }#
          }#
      }#
      else {#
          round.result <- x#
      }#
      round.result.char <- as.character(format(round.result, #
          scientific = FALSE))#
      split.round.result <- unlist(strsplit(round.result.char, #
          "\\."))#
      for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
          if (.format.digit.separator.where[i] <= 0) {#
              .format.digit.separator.where[i] <<- -1#
          }#
      }#
      separator.count <- 1#
      length.integer.part <- nchar(split.round.result[1])#
      digits.in.separated.unit <- 0#
      for (i in seq(from = length.integer.part, to = 1)) {#
          if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
              (substr(split.round.result[1], i, i) != "-")) {#
              first.part <- paste(.format.digit.separator, #
                first.part, sep = "")#
              if (separator.count < length(.format.digit.separator.where)) {#
                separator.count <- separator.count + 1#
              }#
              digits.in.separated.unit <- 0#
          }#
          first.part <- paste(substr(split.round.result[1], #
              i, i), first.part, sep = "")#
          digits.in.separated.unit <- digits.in.separated.unit + #
              1#
      }#
      if (x.original < 0) {#
          if (.format.dec.mark.align == TRUE) {#
              first.part <- paste("-", first.part, sep = "")#
          }#
          else {#
              first.part <- paste("$-$", first.part, sep = "")#
          }#
      }#
      if (!is.na(decimal.places)) {#
          if (decimal.places <= 0) {#
              return(first.part)#
          }#
      }#
      if (.format.initial.zero == FALSE) {#
          if ((round.result >= 0) & (round.result < 1)) {#
              first.part <- ""#
          }#
      }#
      if (length(split.round.result) == 2) {#
          if (is.na(decimal.places)) {#
              return(paste(first.part, .format.decimal.character, #
                split.round.result[2], sep = ""))#
          }#
          if (nchar(split.round.result[2]) < decimal.places) {#
              decimal.part <- split.round.result[2]#
              for (i in seq(from = 1, to = (decimal.places - #
                nchar(split.round.result[2])))) {#
                decimal.part <- paste(decimal.part, "0", sep = "")#
              }#
              return(paste(first.part, .format.decimal.character, #
                decimal.part, sep = ""))#
          }#
          else {#
              return(paste(first.part, .format.decimal.character, #
                split.round.result[2], sep = ""))#
          }#
      }#
      else if (length(split.round.result) == 1) {#
          if (is.na(decimal.places)) {#
              return(paste(first.part, .format.decimal.character, #
                decimal.part, sep = ""))#
          }#
          decimal.part <- ""#
          for (i in seq(from = 1, to = decimal.places)) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
          }#
          return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
      }#
      else {#
          return(NULL)#
      }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
#
  if (details==FALSE) {#
   sum_mean <-as.data.frame(parallel::mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a,mean(x,na.rm=na.rm),sd(x,na.rm= na.rm),quantile(x,c(0,1),type=1,na.rm=na.rm))}))#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("Rows","N","Mean","Sd","Min","Max")#
#
  } else {#
    N <- nrow(M)#
    sum_mean <- colMeans(M ,na.rm=na.rm)#
    f=function(x,m){#
      sum_higher <- colMeans(DT[,list((x-m)^2,(x-m)^3,(x-m)^4)],na.rm=na.rm)#
      sum_higher[1] <- sqrt(sum_higher[1])#
      sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
      sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
      sum_quantile=quantile(x,c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type=1,na.rm=na.rm,names=FALSE)#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- do.call(cbind,parallel::mcMap(f,M,sum_mean))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
   # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- stringr::str_replace(y,"0+$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- stringr::str_replace(y,"\\.$","")#
      y <- stringr::str_replace(y,"-0","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  print(noquote(format(print,justify="right")),right=TRUE)#
}
DT[, describe(.SD), by = "id", .SDcols = c("id", #
"v1", "v2", "v3")]
?data.table
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
edo=function(DT,cmd,cols=names(DT),...,i = TRUE,by = NULL){#
  if (!is.data.table(DT)){#
    stop(paste0("First argument is not a data.table. Convert it first using setDT()"))#
  }#
  cmdc=as.character(substitute(cmd))#
  cmdc <-match.arg(cmdc,c("summarize"))#
  options=eval(substitute(alist(...)))#
  colsub = substitute(cols)#
  colvars = idvars_q(colsub,names(DT))#
  bysub <- substitute(by)#
  byvars <- NULL#
  if (length(bysub)) { byvars <- idvars_q(bysub,names(DT))}#
  if (cmdc=="summarize"){#
      eval(substitute(invisible(DT[i,describe(.SD,...), by = byvars, .SDcols = colvars])))#
  }#
}
edo(DT,sum,by="id")
DT %>% edo(sum, "v*", d = TRUE,i= v1==1,by="v1")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?edo
library(statar)
?edo
?eset
devtools::install_github("matthieugomez/statar")
