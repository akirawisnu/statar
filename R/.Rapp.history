y
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
)
N=1e4; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE)                         # int in range [1,5]#
)
setkey(DT,id)
DT[J(id,v1)]
DT1 <- DT[,list(id,v1)]
DT[DT1]
names(DT[J(id,v1)])
names(DT[DT1])
setkey(DT,id)#
names(DT[DT[,list(id,v1)]])
names(DT[list(id,v1)])
library(data.table)
library(dplyr)
N=1e8; K=100#
set.seed(1)#
DF <- data.frame(#
  id = 1:N,#
  v1 =  sample(round(runif(100,max=100),4), N, TRUE)                       #
)
rm(DF)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
DT1 <- DT[,names(DT),with=FALSE]
copy(DT,DT1)
library(pryr)
object_size(DT,DT1)
DT1 <-DT[5*1e7]
DT1 <-DT[1:(5*1e7)]
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
library(data.table)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
   id = 1:N,#
   v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
library(plyr)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
library(pryr)
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
system.time(DT1 <- DT[,c("id")])
object_size(DT,DT1)
object_size(DT)
system.time(DT1 <- DT[,c("id","v1")])
object_size(DT,DT1)
DT
DT1
system.time(DT1 <- DT[,c("id","v1"),with=FALSE])
object_size(DT, DT1)
system.time(DT1 <- setDT(setDF(DT)[,c("id","v1")]))
object_size(DT, DT1)
library(dplyr)#
library(data.table)
DT1 <- DT %>% mutate(y=mean(v1))
N=1e8; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(round(runif(100,max=100),4), N, TRUE)                        #
)
DT1 <- DT %>% mutate(y=mean(v1))
object_size(DT,DT1)
library(pryr)
object_size(DT,DT1)
DT1 <- DT %>% select(v1)
object_size(DT,DT1)
DF1 <- DF %>% select(v1)#
object_size(DF,DF1)
library(pryr)
library(dplyr)#
library(data.table)#
#
N=1e8; K=100#
set.seed(1)#
DF <- data.frame(#
  id = 1:N,#
  v1 =  sample(round(runif(100,max=100),4), N, TRUE)                       #
)#
object_size(DF)#
1.2 GB#
DF1 <- DF %>% mutate(y=mean(v1))#
object_size(DF,DF1)#
2 GB#
DF1 <- DF %>% select(v1)#
object_size(DF,DF1)#
2 GB
names(DF1)
rm(ls())
rm(list=ls())
N=1e8; K=100#
set.seed(1)#
DF <- data.frame(#
  id = 1:N,#
  v1 =  sample(round(runif(100,max=100),4), N, TRUE)                       #
)#
object_size(DF)
DF1 <- DF %>% select(v1)
object_size(DF,DF1)
DT1<-DT[,list(id)]
setDT(DT)
setDT(DF)
DF1<-DT[,list(id)]
DF1<-DF[,list(id)]
object_size(DF,DF1)
object_size(DF)
library(data.table)
df1 <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame())}#
f(df1)#
df1[, temp := 1]
df1
df <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame())}#
f(df)#
df[, temp := 1]
df
df <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame()); df[, temp := 1]}
f(df)
df
df1 <- data.frame(id = 1:10)#
f <- function(df){eval(substitute(setDT(df)),parent.frame()); df[, temp := 1]}
f(df1)
df1
df1 <- data.frame(id = 1:10)#
f <- function(df){#
      eval(substitute(setDT(df)),parent.frame())#
      df[, temp := 1]#
      }#
f(df1)
df1
library(dplyr)#
library(data.table)#
as.data.table(mtcars) %>% mutate(mean(1))#
mtcars %>% mutate(mean(1))
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
system.time( DT1 <- DT[,c("id","v1","v2"), with = FALSE] )#
object_size(DT,DT1)#
system.time( DT1 <- setDT(setDF(DT)[,c("id","v1","v2")]) ) #
system.time( setDT(DT)  )#
object_size(DT,DT1)
library(data.table)#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
system.time( DT1 <- DT[,c("id","v1","v2"), with = FALSE] )#
object_size(DT,DT1)#
system.time( DT1 <- setDT(setDF(DT)[,c("id","v1","v2")]) ) #
system.time( setDT(DT)  )#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
system.time( DT1 <- DT[,c("id","v1","v2"), with = FALSE] )#
object_size(DT,DT1)#
system.time( DT1 <- setDT(setDF(DT)[,c("id","v1","v2")]) ) #
system.time( setDT(DT)  )#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
object_size(DT[1:(.N-1)])
object_size(DT[1:(.N-1)],DT)
object_size(DT[1:.N/2],DT)
object_size(DT)
DT1 <- DT[1:.N/2]
object_size(DT,DT1)
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT1 <- DT[,c("id","v1","v2"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.N/2]#
object_size(DT,DT1)#
400 MB
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.N/2]#
object_size(DT,DT1)
DF1 <- DF[1:1e7/2]
setDF(DT)#
DT1 <- DT[,c("id","v1","v2")]) #
DT1 <- DT[1:1e7/2]
setDF(DT)#
DT1 <- DT[,c("id","v1","v2")]#
DT1 <- DT[1:1e7/2]
DT1 <- DT[1:(1e7/2)]
DT1 <- DT[1:(5e6)]
DT1 <- DT[1:(5e6),]
object_size(DT,DT1)
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[,c("id","v1","v2")]#
object_size(DT,DT1)#
DT1 <- DT[1:(5e6),]#
object_size(DT,DT1)#
#
setDT(DT)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[,c("id","v1","v2")]#
object_size(DT,DT1)#
#> 200#
DT1 <- DT[1:(5e6),]#
object_size(DT,DT1)#
#> 300#
#
setDT(DT)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
#> 400 MB#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)#
#> 210 MB
DT1 <- DT[1:.5e6,]
object_size(DT,DT1)#
210 MB
library(data.table)#
library(pryr)#
#
N=1e7; K=100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[,c("id","v1","v2")]#
object_size(DT,DT1)#
#> 200 MB#
DT1 <- DT[1:(5e6),]#
object_size(DT,DT1)#
#> 300 MB#
#
setDT(DT)#
DT1 <- DT[,c("id","v1","v2","v3"), with = FALSE] #
object_size(DT,DT1)#
#> 400 MB#
DT1 <- DT[1:.5e6]#
object_size(DT,DT1)#
#> 210 MB
DT1
DT1 <- DT[,list(id,v1,v2,v3)] #
object_size(DT,DT1)
library(dplyr)
library(data.table)#
library(pryr)#
N = 1e7; K = 100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT1 <- DT %>% filter(v1>=3)
object_size(DT,DT1)
object_size(DT)
DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)]
setDT(DT)
DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)]
system.time(DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)])
system.time(lm(v3~v2,DT[v1==3]))
system.time(DT[v1==3,lm(v3~v2,.SD),.SDcols=names(DT)])
library(data.table)#
library(pryr)#
N = 1e7; K = 100#
set.seed(1)#
DT <- data.frame(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
DT1 <- DT[1:(5e6),]#
object_size(DT, DT1)#
#> 300 MB#
#
setDT(DT)#
DT1 <- DT[1:.5e6]#
object_size(DT ,DT1)#
#> 210 MB
DT1 <- DT[3:.5e6]
object_size(DT,DT1)
library(dplyr)
?order_by
?lag
?lead
?break
break=function(x){x+2}
break <- function(x){x+2}
?separate
?culster
?cluster
devtools::document("/Users/Matthieu/Dropbox/github/statar-package")
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param units computes lag in units of "day", "week", "month", "quarter" or "year" periods. Should be used when \code{along_with} is a date. #
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # Unbalanced panel#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#
#' # Units#
#' DT[, date := as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "08/21/1992"), "%m/%d/%Y")]#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, units = "month", along_with = date)) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with('0001-01-01')#
    if (unitsc=="day"){#
      return(lead(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
#
  if (!is.null(along_with)) {#
    index <- match(along_with - n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lag, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with('0001-01-01')#
    if (unitsc=="day"){#
      return(lag(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
  if (!is.null(along_with)) {#
    index <- match(along_with + n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
date <- as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "08/21/1992"), "%m/%d/%Y")
date
as.Date(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y")
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param units computes lag in units of "day", "week", "month", "quarter" or "year" periods. Should be used when \code{along_with} is a date. #
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # along_with#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#
#' # units#
#' value <- c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' date <- as.Date(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y")#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date, units = "month")) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lead, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with("0001-01-01")#
    if (unitsc=="day"){#
      return(lead(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lead(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
#
  if (!is.null(along_with)) {#
    index <- match(along_with - n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by, along_with, units = NULL, default = NA, ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
       if (!is.null(along_with) | !is.null(units)) stop("order_by cannot be used with along_with or units")#
       return(dplyr::with_order(order_by, lag, x, n = n, default = default))#
  }#
  if (!is.null(units)) {#
    if (is.null(along_with)) stop("units cannot be used without along_with")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    along_with_origin <- as.along_with("0001-01-01")#
    if (unitsc=="day"){#
      return(lag(x = x, n = n, default = default, along_with = along))#
    }#
    if (unitsc == "week"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% weeks(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }  #
    else if (unitsc == "month"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "quarter"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% 3*months(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    } else if (unitsc == "year"){#
      along_with_elapsed <- as.period(along_with-along_with_origin)  %/% years(1)#
      return(lag(x = x, n = n, default = default, along_with = along_with_elapsed))#
    }#
  }#
#
  if (!is.null(along_with)) {#
    index <- match(along_with + n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
library(dplyr)
library(data.table)
df <- data.frame(#
   date = 1:N,#
   id =  sample(5, N, TRUE),   #
   value =  sample(1e6, N, TRUE)                   #
 )#
# This solution#
system.time(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id])#
#> user  system elapsed #
#> 0.186   0.007   0.157  #
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#> user  system elapsed #
#> 0.186   0.007   0.200 #
# pure data.table solution#
setDF(df)#
system.time(setkey(setDT(df), id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#> user  system elapsed #
#> 0.113   0.023   0.147 #
#
# pure dplyr solution#
setDF(df)#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#> user  system elapsed #
#> 1.148   0.057   1.197
N <- 2e6#
df <- data.frame(#
   date = 1:N,#
   id =  sample(5, N, TRUE),   #
   value =  sample(1e6, N, TRUE)                   #
 )#
# This solution#
system.time(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id])#
#> user  system elapsed #
#> 0.186   0.007   0.157  #
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#> user  system elapsed #
#> 0.186   0.007   0.200 #
# pure data.table solution#
setDF(df)#
system.time(setkey(setDT(df), id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#> user  system elapsed #
#> 0.113   0.023   0.147 #
#
# pure dplyr solution#
setDF(df)#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#> user  system elapsed #
#> 1.148   0.057   1.197
library(microbenchmark)
microbenchmark(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id],times=10L)
N <- 2e6#
    df <- data.frame(#
       date = 1:N,#
       id =  sample(5, N, TRUE),   #
       value =  sample(1e6, N, TRUE)                   #
     )#
    # This solution#
    microbenchmark(setDT(df)[, lag_value := lag(value, 1, along_with = date), by = id])#
    #> user  system elapsed #
    #> 0.186   0.007   0.157  #
    microbenchmark(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
    #> user  system elapsed #
    #> 0.186   0.007   0.200 #
    # pure data.table solution#
    setDF(df)#
    microbenchmark(setkey(setDT(df), id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
    #> user  system elapsed #
    #> 0.113   0.023   0.147 #
#
    # pure dplyr solution#
    setDF(df)#
    microbenchmark(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
    #> user  system elapsed #
    #> 1.148   0.057   1.197
# This solution#
    setDT(df)#
    microbenchmark(df[, lag_value := lag(value, 1, along_with = date), by = id])#
    #> user  system elapsed #
    #> 0.186   0.007   0.157  #
    setDF(df)#
    microbenchmark(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
    #> user  system elapsed #
    #> 0.186   0.007   0.200 #
    # pure data.table solution#
    setDT(df)#
    microbenchmark(setkey(df, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
    #> user  system elapsed #
    #> 0.113   0.023   0.147 #
#
    # pure dplyr solution#
    setDF(df)#
    microbenchmark(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
    #> user  system elapsed #
    #> 1.148   0.057   1.197
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
   }#
# This solution against pure data.table#
setDT(df)#
microbenchmark(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>      min       lq   median       uq      max neval#
#> 39.23331 45.63224 48.26503 51.30011 88.56598   100 #
microbenchmark(setkey(df, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>      min       lq   median       uq      max neval#
#> 162.0913 179.7229 191.2539 230.4258 1663.312   100
setDF(df)#
    microbenchmark(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
    #>      min       lq   median       uq      max neval#
    #> 97.22887 111.8242 121.0254 141.8194 1090.357   100#
#
    microbenchmark(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))
df
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>     min       lq   median       uq      max neval#
#> 98.4322 105.3136 110.1891 116.5764 320.0336   100#
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>      min       lq   median       uq      max neval#
#> 135.2102 145.7594 161.0235 188.1168 390.2336   100#
#
# This solution against pure dplyr#
setDF(df)#
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#>      min       lq   median       uq      max neval#
#> 92.40668 95.37822 99.20339 103.0889 140.8624   100#
#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#>      min       lq   median       uq      max neval#
#> 2.422102 3.071185 3.281669 3.631934 4.818416   100
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>   user  system elapsed #
#>  0.201   0.026   0.228 #
#
# This solution against pure dplyr#
setDF(df)#
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#>   user  system elapsed #
#>  0.156   0.028   0.186 #
#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#>   user  system elapsed #
#>  3.301   0.086   3.363
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ]))
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
setDT(df)
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>   user  system elapsed #
#>  0.201   0.026   0.228 #
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)#
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])#
#>   user  system elapsed #
#>  0.201   0.026   0.228
all.equal(df[, lag_value := lag(value, 1, along_with = date), by = id],setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
all.equal(setkey(df),df1)
all.equal(setkey(df,id,date),df1)
all.equal(setkey(df[, lag_value := lag(value, 1, along_with = date), by = id],id,date),setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
df1<- setkey(df[, lag_value := lag(value, 1, along_with = date), by = id],id,date)
df2<- setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
df2<- setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ]
df1
df2
dfdf1[!is.na(value_lagged)]
df1[!is.na(value_lagged)]
df[!is.na(value_lagged)]
lag <- function(x, n = 1L, along_with){#
 index <- match(along_with - n, along_with, incomparable = NA)#
 out <- x[index]#
 attributes(out) <- attributes(x)#
 out#
}
N <- 2e6#
df <- data.frame(#
         date = 1:N,#
           id = sample(100, N, TRUE),   #
        value = sample(1e6, N, TRUE)                   #
      )#
# This solution against pure data.table#
setDT(df)#
system.time(df[, lag_value := lag(value, 1, along_with = date), by = id])#
#>   user  system elapsed #
#>  0.094   0.007   0.103 #
df1 <- copy(df)
system.time(setkey(df1, id, date)[J(id, date + 1, val = value), value_lagged := i.val, ][is.na(date), value_lagged := NA, ])
setDF(df)#
system.time(mutate(group_by(df, id), lag_value = lag(value, 1, along_with = date)))#
#>   user  system elapsed #
#>  0.156   0.028   0.186 #
#
system.time(left_join(df, mutate(filter(df, !is.na(date)),  date = date + 1, lagged_value = value, value = NULL)))#
#>   user  system elapsed #
#>  3.301   0.086   3.363
?biglm
library(biglm)
install.packages("biglm")
?biglm
library(biglm)
?biglm
FALSE && NA
true || NA
TRUE || NA
library(tidyr)
library(statar)
df <- data.frame (id=c(1,1), variable = c("v1","v1"), value = c(1,3))
df
spread(df, variable, value)
dt <- as.data.table(df)
dt <- data.table(df)
library(data.table)
dt <- as.data.table(df)
spread(df, variable, value)
spread(dt, variable, value)
library(tidyr)
?expand
devtools::install_github("hadley/tidyr")
f <-function(){#
on.exit(print("salut"))#
}
f(1)
f()
library(tidyr)
devtools::install_github("hadley/tidyr")
library(tidyr)
.bincode
?.bincode
devtools::release("/Users/Matthieu/Dropbox/Github/statar-package")
install.packages(Hmisc)
install.packages("Hmisc")
devtools::release("/Users/Matthieu/Dropbox/Github/statar-package")
install.packages("matrixStats")
devtools::release("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("hadley/devtools")
devtools::release("/Users/Matthieu/Dropbox/Github/statar-package")
library(devtools)
release("/Users/Matthieu/Dropbox/Github/statar-package")
library(appliedr)
install_github("matthieugomez/appliedr")
library(devtools)
install_github("matthieugomez/appliedr")
library(appliedr)
N <- 100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT)
library(data.table)
N <- 100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE)#
)#
sum_up(DT)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @param na.rm A boolean. default to TRUE#
#
#' @examples#
#' library(data.table)#
#' N <- 100#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' sum_up(DT, by = v1, graph = TRUE)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by))#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
}#
describe_matrix <- function(M, d = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import 3 functions from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (d==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm, w = w)), Hmisc::wtd.quantile(x, c(0, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"^-0$","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  if (!d){#
    print(noquote(format(t(print),justify="right")),right=TRUE)#
#
  } else{#
    print(noquote(format(print,justify="right")),right=TRUE)#
  }#
  cat("\n")#
}
sum_up(DT)
library(dplyr)
sum_up(DT)
library(lazyeval)
sum_up(DT)
library(parallel)
sum_up(DT)
sum_up(DT, d = T)
library(stringr)
sum_up(DT, d = T)
sum_up(DT)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @param na.rm A boolean. default to TRUE#
#
#' @examples#
#' library(data.table)#
#' N <- 100#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' sum_up(DT, by = v1, graph = TRUE)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by))#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
}#
describe_matrix <- function(M, d = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import 3 functions from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (d==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm, w = w)), Hmisc::wtd.quantile(x, c(0, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 0.5, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    print(sum)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"^-0$","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  if (!d){#
    print(noquote(format(t(print),justify="right")),right=TRUE)#
#
  } else{#
    print(noquote(format(print,justify="right")),right=TRUE)#
  }#
  cat("\n")#
}
sum_up(DT)
traceback()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Gives summary statistics (corresponds to Stata command summarize)#
#' #
#' @param x a data.table#
#' @param ... Variables to include. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param w Weights. Default to NULL. #
#' @param by Groups within which summary statistics are printed. Default to NULL. See the \link[dplyr]{select} documentation.#
#' @param d Should detailed summary statistics be printed?#
#' @param na.rm A boolean. default to TRUE#
#
#' @examples#
#' library(data.table)#
#' N <- 100#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 = sample(5, N, TRUE),#
#'   v2 = sample(1e6, N, TRUE)#
#' )#
#' sum_up(DT)#
#' sum_up(DT, v2, d = T)#
#' sum_up(DT, starts_with("v"), by = v1)#
#' sum_up(DT, by = v1, graph = TRUE)#
#' @export#
sum_up <- function(x, ...,  d = FALSE, w = NULL, na.rm = TRUE, by = NULL) {#
  sum_up_(x, .dots = lazy_dots(...) , d = d, w = substitute(w), na.rm = na.rm, by = substitute(by))#
}#
#' @export#
#' @rdname sum_up#
sum_up_<- function(x, ..., .dots, d = FALSE,  w= NULL, na.rm = TRUE, by = NULL) {#
  stopifnot(is.data.table(x))#
  w <- names(select_vars_(names(x), w))#
  if (!length(w)) w <- NULL#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), c(byvars,w))#
  }#
  nums <- sapply(x, is.numeric)#
  nums_name <- names(nums[nums==TRUE])#
  vars=intersect(vars,nums_name)#
  if (!length(vars)) stop("Please select at least one non-numeric variable", call. = FALSE)#
#
  if (!is.null(w)){#
    w <- x[[which(names(x)== w)]]#
  }#
    if (!length(byvars)){#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars])#
    } else{#
      invisible(x[, describe_matrix(.SD,d = d, w = w, na.rm = na.rm ), .SDcols = vars, by = byvars])#
    }#
}#
describe_matrix <- function(M, d = FALSE, na.rm = TRUE, w = NULL, mc.cores=getOption("mc.cores", 2L)){#
  # import 3 functions from stargazer#
  .iround <- function(x, decimal.places = 0, round.up.positive = FALSE, #
      simply.output = FALSE,  .format.digit.separator = ",") {#
    .format.initial.zero <- TRUE#
    .format.until.nonzero.digit <- TRUE#
    .format.max.extra.digits <- 2#
    .format.digit.separator.where <- c(3)#
    .format.ci.separator <- ", "#
    .format.round.digits <- 3#
    .format.decimal.character <- "."#
    .format.dec.mark.align <- FALSE#
    .format.dec.mark.align <- TRUE#
    x.original <- x#
    first.part <- ""#
    if (is.na(x) | is.null(x)) {#
      return("")#
    }#
    if (simply.output == TRUE) {#
      if (!is.numeric(x)) {#
        return(.remove.special.chars(x))#
      }#
    }#
    if (x.original < 0) {#
      x <- abs(x)#
    }#
    if (!is.na(decimal.places)) {#
        if ((.format.until.nonzero.digit == FALSE) | (decimal.places <= #
            0)) {#
            round.result <- round(x, digits = decimal.places)#
        }#
        else {#
            temp.places <- decimal.places#
            if (!.is.all.integers(x)) {#
              while ((round(x, digits = temp.places) == 0) & #
                (temp.places < (decimal.places + .format.max.extra.digits))) {#
                temp.places <- temp.places + 1#
              }#
            }#
            round.result <- round(x, digits = temp.places)#
            decimal.places <- temp.places#
        }#
        if ((round.up.positive == TRUE) & (round.result < #
            x)) {#
            if (x > (10^((-1) * (decimal.places + 1)))) {#
              round.result <- round.result + 10^((-1) * decimal.places)#
            }#
            else {#
              round.result <- 0#
            }#
        }#
    }#
    else {#
        round.result <- x#
    }#
    round.result.char <- as.character(format(round.result, #
        scientific = FALSE))#
    split.round.result <- unlist(strsplit(round.result.char, #
        "\\."))#
    for (i in seq(from = 1, to = length(.format.digit.separator.where))) {#
        if (.format.digit.separator.where[i] <= 0) {#
            .format.digit.separator.where[i] <<- -1#
        }#
    }#
    separator.count <- 1#
    length.integer.part <- nchar(split.round.result[1])#
    digits.in.separated.unit <- 0#
    for (i in seq(from = length.integer.part, to = 1)) {#
        if ((digits.in.separated.unit == .format.digit.separator.where[separator.count]) & #
            (substr(split.round.result[1], i, i) != "-")) {#
            first.part <- paste(.format.digit.separator, #
              first.part, sep = "")#
            if (separator.count < length(.format.digit.separator.where)) {#
              separator.count <- separator.count + 1#
            }#
            digits.in.separated.unit <- 0#
        }#
        first.part <- paste(substr(split.round.result[1], #
            i, i), first.part, sep = "")#
        digits.in.separated.unit <- digits.in.separated.unit + #
            1#
    }#
    if (x.original < 0) {#
        if (.format.dec.mark.align == TRUE) {#
            first.part <- paste("-", first.part, sep = "")#
        }#
        else {#
            first.part <- paste("$-$", first.part, sep = "")#
        }#
    }#
    if (!is.na(decimal.places)) {#
        if (decimal.places <= 0) {#
            return(first.part)#
        }#
    }#
    if (.format.initial.zero == FALSE) {#
        if ((round.result >= 0) & (round.result < 1)) {#
            first.part <- ""#
        }#
    }#
    if (length(split.round.result) == 2) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
        if (nchar(split.round.result[2]) < decimal.places) {#
            decimal.part <- split.round.result[2]#
            for (i in seq(from = 1, to = (decimal.places - #
              nchar(split.round.result[2])))) {#
              decimal.part <- paste(decimal.part, "0", sep = "")#
            }#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        else {#
            return(paste(first.part, .format.decimal.character, #
              split.round.result[2], sep = ""))#
        }#
    }#
    else if (length(split.round.result) == 1) {#
        if (is.na(decimal.places)) {#
            return(paste(first.part, .format.decimal.character, #
              decimal.part, sep = ""))#
        }#
        decimal.part <- ""#
        for (i in seq(from = 1, to = decimal.places)) {#
            decimal.part <- paste(decimal.part, "0", sep = "")#
        }#
        return(paste(first.part, .format.decimal.character, #
            decimal.part, sep = ""))#
    }#
    else {#
        return(NULL)#
    }#
  }#
  is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) abs(x - #
      round(x)) < tol#
  .is.all.integers <- function(x) {#
      if (!is.numeric(x)) {#
          return(FALSE)#
      }#
      if (length(x[!is.na(x)]) == length(is.wholenumber(x)[(!is.na(x)) & #
          (is.wholenumber(x) == TRUE)])) {#
          return(TRUE)#
      }#
      else {#
          return(FALSE)#
      }#
  }#
  # Now starts the code #
  if (d==FALSE) {#
    if (!is.null(w)){#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, Hmisc::wtd.mean(x,na.rm=na.rm, w = w), sqrt(Hmisc::wtd.var(x,na.rm= na.rm, w = w)), Hmisc::wtd.quantile(x, c(0, 1), na.rm = na.rm, weights = w))}))#
    }else{#
      sum_mean <-as.data.frame(mclapply(M ,function(x){a <- sum(is.na(x)) ; c(length(x)-a,a, mean(x,na.rm=na.rm, w = w), sd(x,na.rm= na.rm), quantile(x, c(0, 1), type = 1, na.rm = na.rm, weights = w))}))#
    }#
    sum <- as.matrix(sum_mean)#
    print(sum)#
    rownames(sum) <-  c("N","NA","Mean","Sd","Min", "Max")#
#
  } else {#
    N <- nrow(M)#
    f=function(x){#
      if (!is.null(w)){#
        m <- Hmisc::wtd.mean(x, na.rm = na.rm, w = w)#
        sum_higher <- matrixStats::colWeightedMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm, w = w)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile=Hmisc::wtd.quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1), na.rm=na.rm, weights = w)#
      } else{#
        m <-mean(x, na.rm = na.rm)#
        sum_higher <- colMeans(cbind((x-m)^2,(x-m)^3,(x-m)^4), na.rm=na.rm)#
        sum_higher[1] <- sqrt(sum_higher[1])#
        sum_higher[2] <- sum_higher[2]/sum_higher[1]^3#
        sum_higher[3] <- sum_higher[3]/sum_higher[1]^4#
        sum_quantile= quantile(x, c(0,0.01,0.05,0.1,0.25,0.50,0.75,0.9,0.95,0.99,1),type= 1, na.rm=na.rm, weights = w)#
      }#
      n_NA <- sum(is.na(x))#
      sum <- c(N-n_NA,n_NA,m,sum_higher,sum_quantile)#
    }#
    sum <- as.data.frame(mclapply(M, f))#
    rownames(sum) <-  c("N","NA","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
    # rownames(sum) <- c("Rows","N","Mean","Sd","Skewness","Kurtosis","Min","1%","5%","10%","25%","50%","75%","90%","95%","99%","Max")#
  }#
  print <- apply(sum,c(1,2),#
    function(x){#
    if (is.numeric(x)){#
      y <- .iround(x,decimal.places=3)#
      y <- str_replace(y,"000$","")#
      if (y==""){#
        y <- "0"#
      }#
      y <- str_replace(y,"\\.$","")#
      y <- str_replace(y,"^-0$","0")#
    } else{#
      y <- x#
    }#
    y#
  })#
  if (!d){#
    print(noquote(format(t(print),justify="right")),right=TRUE)#
#
  } else{#
    print(noquote(format(print,justify="right")),right=TRUE)#
  }#
  cat("\n")#
}
sum_up(DT)
sum_up(DT)
