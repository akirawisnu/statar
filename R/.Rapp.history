devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
?lag
lag
devtools::install_github("smbache/magrittr")
library(magrittr)
rnorm(100) %T>%#
  plot(type = "l", col = "firebrick") %>%#
  abs %>%#
  sum
tmp :=#
  subset(Species == "setosa") %>%#
  set_names(LETTERS[1:5])
install.packages("colorout")
download.file("http://www.lepem.ufc.br/jaa/colorout_1.0-3.tar.gz", destfile = "colorout_1.0-3.tar.gz")#
install.packages("colorout_1.0-3.tar.gz", type = "source", repos = NULL)
savehistory
savehistory(ok)
savehistory("ok")
savehistory("~/.R.app.history")
savehistory()
fefe
savehistory()
library(pryr)
N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )
DT
DF
DT <- setDF(DF)
library(data.table)
DT <- setDF(DF)
DT
DT1 <- copy(DT)
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
object_size(DT,DT1, merge(DT,DT1)
)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2)]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
}
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF3)#
	#> 25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
q
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF3)#
	#> 25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF2)#
	#> 25.9 kB#
	object_size(DF,DF2, merge(DF,DF2)
)
library(tidyr)
?gather
DTx <- data.table (#
  gvkey = c("2222","2222"), #
  permno = c("20990", "20980"), #
  year_min = c(1991,2000), #
  year_max = c(1999, 2001)#
)
debugdebug(mutate)
debug(mutate)
library(dplyr)
DT <- data.table ( id = 1:10)
mutate(DT, mean(id))
debug(mutate)
DT <- data.table ( id = 1:10)
mutate(DT, mean(id))
s
n
?forder
DT
DT[1, id:= NA]
DT
forder(DT,id)
DT[order(id)]
setorder(DT,id)
DT
?setorder
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))#
assignInNamespace("cedta.override",#
                  c(data.table:::cedta.override,"IRkernel"),#
                  "data.table")
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
result1 <- felm( v4 ~ v2 + v1, DT )#
result2 <- felm( v3 ~ v2 + v1, DT )#
result3 <- felm( v4 ~ v3 + v1 |0| (v3 ~ v2) |0, DT )
ivreg
library(aer)
library(AER)
ivreg(v3~v1,DT)
?ivreg
ivreg(v3~v2 | v1,DT)
ivreg(v3 ~ v2 | v1,D T)
ivreg(v3 ~ v2 | v1, DT)
?ivreg
ivreg(v3 ~ v2 | v1, DT)
ivreg(v3 ~ v2 | v1, date = DT)
ivreg(v3 ~ v2 | v1, data = DT)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1 ~ v2 | 0 | (v2 ~ v3) |0, df)
felm(v1 ~ v2 | 0 | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |0, df)
felm(v1 ~ v2 |  | (v2 ~ v3), df)
felm(v1 ~ v2 |0| (v2 ~ v3), df)
l= c("col1","some","col3")
l[c(1,NA)]
l[c(1,NA)] <- c("col11","col12")
l[c(TRUE,NA)] <- c("col11","col12")
l[l=="col1"] <- c("col11","col12")
l=="col1"
l <- c("col1", NA, "col3")#
l[l==col1] <- c("col1")
l <- c("col1", NA, "col3")#
l[l == "col1"] <- c("col1")
l
condition = l== "col1"
condition
l[condition] <- c("col1")
l[c(TRUE,NA,FALSE) <- c("col1")
)
l[c(TRUE,NA,FALSE)] <- c("col1")
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(l == "col1")
]
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(condition)] <- c("col1")
l
l[NA,1]
l[c(NA,1)]
l <- c("col1", "col2", "col3")#
    l[c(NA,1)]
l[c(TRUE, NA, TRUE)]
l[c(NA, TRUE)]
l <- c("col1", NA, "col3")#
	l[which(l == "col1" | l == "col3")]
l <- c("col1", NA, "col3")#
	l[l == "col1"]
l[which(l == "col1")]
DT
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
lm(v2~v1,DT)
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
lm(v2~v1,DT)
result <- lm(v2~v1,DT)
names(result)
result$coefficients
result$model
result
names(result)
summary(result)
list(summary(result))
names(summary(result))
result <- felm(v2~v1,DT)
library(lfe)
result <- felm(v2~v1,DT)
names(result)
names(result)$se
result$se
result$coefficients
result$robustvcv
summary(result)
names(summary(result))
?summary
object_size(summary(result))
library(pryr)
object_size(summary(result))
object_size(result)
result <- lm(y ~ x)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- lm(v3 ~ v2, DT)
pryr::object_size(results)
pryr::object_size(result)
pryr::object_size(summary(results))
pryr::object_size(summary(result))
names(result)
result$coefficients
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2, DT)
vcov(result)
result
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|||v1, DT)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|0|0|v1, DT)
names(result)
vcov(result)
result$vcv
result$robustvcv
object_size(results)
object_size(result)
result <- felm(v3~v2|0|0|v1, DT)
stargazer(result, type = "text")
library(stargazer)
stargazer(result, type = "text")
devtools::install_github("matthieugomez/statar")
lazy(date)
library(lazyeval)
lazy(date0
)
lazy(date)
lazy_eval(lazy(date))
lazy_eval(lazy(date1))
select_vars(names(df),lazy(ok))
library(dplyr)
select_vars(names(df),lazy(ok))
select_vars(names(df), args = lazy(ok))
lazydots
lazy_dots
lazykeep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}(date)
df
df <- data.frame(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
 )
keep(df,id)
keep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}
keep(df,id)
lazy(date)
lazy(date1)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
dt <- data.table(id = c(1,2), date = c(1999, 2000))#
setcolorder(dt, "date", 1)#
setcolorder(dt, 2, 1)#
setcolorder(dt, "id", 2)#
setcolorder(dt, 1, 2)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ v2, DT)
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
n
f
felm(v3 ~ 1|0|(v2~v1), DT)
pform
parseformula(formula,data)
knownargs
sc
sc <- names(sys.call())[-1]
sc
named <- knownargs[pmatch(sc, knownargs)]
formula
f
felm::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
lfe:::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
felm = function (formula, data, iv = NULL, clustervar = NULL, exactDOF = FALSE, #
    subset, na.action, contrasts = NULL, ...) #
{#
    knownargs <- c("iv", "clustervar", "cmethod")#
    sc <- names(sys.call())[-1]#
    named <- knownargs[pmatch(sc, knownargs)]#
    for (arg in c("iv", "clustervar")) {#
        if (!is.null(eval(as.name(arg))) && !(arg %in% named)) {#
            warning("Please specify the '", arg, "' argument by name, or use a multi part formula. Its position in the argument list will change in a later version")#
        }#
    }#
    mf <- match.call(expand.dots = FALSE)#
    cmethod <- "cgm"#
    args <- list(...)#
    ka <- knownargs[pmatch(names(args), knownargs, duplicates.ok = FALSE)]#
    names(args)[!is.na(ka)] <- ka[!is.na(ka)]#
    env <- environment()#
    lapply(intersect(knownargs, ka), function(arg) assign(arg, #
        args[[arg]], pos = env))#
    if (!(cmethod %in% c("cgm", "gaure"))) #
        stop("Unknown cmethod: ", cmethod)#
    unk <- setdiff(names(args), knownargs)#
    if (length(unk) > 0) #
        stop("unknown arguments ", paste(unk, collapse = " "))#
    if (missing(data)) #
        data <- environment(formula)#
    pf <- parent.frame()#
    pform <- parseformula(formula, data)#
    print(formula)#
    print(pform)#
}
felm(v3 ~ 1|0|v2~v1, DT)
parseformula <- function (form, data) #
{#
    f <- as.Formula(form)#
    len <- length(f)[[2]]#
    if (len == 1) #
        return(oldparseformula(form, data))#
    opart <- formula(f, lhs = 1, rhs = 1)#
    if (len == 1) #
        return(list(formula = opart, gpart = ~0, ivpart = ~0, #
            cpart = ~0))#
    gpart <- formula(f, lhs = 0, rhs = 2)#
    if (!nopart(gpart)) {#
        tm <- terms(gpart, keep.order = TRUE)#
        parts <- attr(tm, "term.labels")#
        parts <- parts[parts != "0"]#
        nm <- parts#
        glist <- lapply(paste(".G(", parts, ")", sep = ""), function(e) parse(text = e))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- lapply(glist, eval, list(.G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- lapply(glist, eval, data, as.environment(list(.G = Gfunc, #
                `:` = Ginfunc)))#
        }#
        names(fl) <- nm#
    }#
    else {#
        fl <- NULL#
    }#
    if (len == 2) #
        return(list(formula = opart, fl = fl, gpart = gpart, #
            ivpart = ~0, cpart = ~0))#
    ivparts <- formula(f, lhs = 0, rhs = 3, drop = TRUE)#
    if (!nopart(ivparts) && length(ivparts[[2]]) > 1 && ivparts[[2]][[1]] == #
        "(") {#
        ivspec <- as.Formula(ivparts[[2]][[2]])#
        lhs <- formula(ivspec, rhs = 0)#
        ivpart <- lapply(seq_along(all.vars(lhs)), function(i) formula(ivspec, #
            lhs = i))#
    }#
    else {#
        ivpart <- NULL#
    }#
    if (len == 3 && !is.null(ivpart)) #
        return(list(formula = opart, fl = fl, iv = ivpart, gpart = gpart, #
            ivpart = ivparts, cpart = ~0))#
    if (len == 3 && is.null(ivpart)) {#
        cpart <- ivparts#
        ivparts <- NULL#
    }#
    else {#
        cpart <- formula(f, lhs = 0, rhs = 4, drop = TRUE)#
    }#
    if (!nopart(cpart)) {#
        tm <- terms(cpart, keep.order = TRUE)#
        nm <- parts <- attr(tm, "term.labels")#
        clist <- lapply(paste("factor(", parts, ")", sep = ""), #
            function(e) parse(text = e))#
        cluster <- lapply(clist, eval, data)#
        names(cluster) <- nm#
    }#
    else {#
        cluster <- NULL#
    }#
    list(formula = opart, fl = fl, iv = ivpart, cluster = cluster, #
        gpart = gpart, ivpart = ivparts, cpart = cpart)#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(Formula)
felm(v3 ~ 1|0|v2~v1, DT)
oldparseformula = function (formula, data) #
{#
    trm <- terms(formula, specials = c("G"))#
    feidx <- attr(trm, "specials")$G + 1#
    va <- attr(trm, "variables")#
    festr <- paste(sapply(feidx, function(i) deparse(va[[i]])), #
        collapse = "+")#
    if (festr != "") {#
        formula <- update(formula, paste(". ~ . -(", festr, ") - 1"))#
        felist <- parse(text = paste("list(", gsub("+", ",", #
            festr, fixed = TRUE), ")", sep = ""))#
        nm <- eval(felist, list(G = function(arg) deparse(substitute(arg))))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- eval(felist, list(G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- local({#
                eval(felist, data)#
            }, list(G = Gfunc, `:` = Ginfunc))#
        }#
        names(fl) <- nm#
        gpart <- eval(parse(text = paste("~", paste(nm, collapse = "+"))))#
        if (is.null(names(fl))) #
            names(fl) <- paste("fe", 1:length(fl), sep = "")#
    }#
    else {#
        fl <- NULL#
        gpart <- ~0#
    }#
    return(list(formula = formula, fl = fl, gpart = gpart, ivpart = ~0, #
        cpart = ~0))#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
formula
pform
f <- as.Formula(formula)
f
felm(v3 ~ 1|0|(v2~v1), DT)
s
n
formula
data
p <- as.Formula(formula)
p
length(f)[[2]]
length(p)[[2]]
length(p)[[1]]
names(length(p))
length(p)
p
length(formula)
length(formula)[[2]]
gpart <-  formula(p, lhs = 0, rhs = 2)
nopart(gpart)
ivparts <- formula(p, lhs = 0, rhs = 3, drop = TRUE)
ivparts
f
as.list(body(felm))
trace(felm, print(mf), at = 40)
trace(felm, quote(print(mf)), at = 40)
felm(v3 ~ 1|0|(v2~v1), DT)
g=function(formula,env){eval(formula,env)}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(y~t1, parent.frame())}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f(1:10)
g=function(formula,env){stats::model.frame(formula,env)}
f(1:10)
f=function(){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
x <- 1:10
f(1:10)
f()
ls()
ls(parent.env())
?ls
g=function(formula,env){eval(formula,env)}
g=function(formula,env){stats::model.frame(formula,env)}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f()
lfe::project
library(data.table)
last(c(1,2))
library(statar)
?setcols
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package/R/statar.R")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?saveRDS
x <- data.table(a = rep(1:2, each = 3), b=1:6) y <- data.table(a = 0:1, bb = 10:11)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
library(data.table)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
join(x, y, type = "inner", check = 1~m)
biglm
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
biglm(v1~id)
biglm(v1~id, DT)
library(biglm)
biglm(v1~id, DT)
?biglm
?speedlm
library(speedlm)
library(speedglm)
?speedlm
system.time(speedlm(v1~id,DT))
system.time(speedlm.fit(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
object.size(biglm(v1~id,DT))
object.size(speedlm(v1~id,DT))
ls(getNamespace("lfe"), all.names=TRUE)
C_conncomp
id <- function(){print("1")}
g<- function(x){lazy(x)}
g(id)
library(lazyeval)
g(id)
install.packages("lfe")
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
fllibrary(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
felm
felm::project
lfe::project
lfe:::project
x
?felm
remove.packages("lfe")         # revert back to CRAN
install.packages("data.table")
install.packages("lfe")
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)#
#> "Error in eval(expr, envir, enclos) : object 'v2(fit)' not found”
lfe
sessionInfo()
lfe
felm
project
lfe::project
lfe:::project
doprojols
felm::doprojols
felm:::doprojols
felm::doprojols
lfe:::doprojols
library(statar)
# lag/lead create lag/lead variables (corresponds to Stata L. F.)#
year <- c(1992, 1989, 1991, 1990, 1994, 1992, 1991)#
value <- c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
lag(value, 1, order_by = year) # returns value in previous year, like  dplyr::lag#
lag(value, 1, along_with = year) #  returns value in year - 1#
#
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, months(1), along_with = datem) #
#
# tag (corresponds to Stata tag)#
tag(c(1, 2))#
tag(c(1, 2), fromLast = TRUE)#
#
# sample_mode (corresponds to Stata mode)#
sample_mode(c(1, 2, 2))#
sample_mode(c(1, 2))#
sample_mode(c(NA, NA, 1))#
sample_mode(c(NA, NA, 1), na.rm = TRUE)#
#
# partition creates integer variable for quantile categories (corresponds to Stata xtile)#
v <- sample(c(NA, 1:10), 10, TRUE)                   #
partition(v, nq = 3) # 3 groups based on terciles#
partition(v, cutpoints = c(1, 3)) # 3 groups based on two cutpoints#
#
# winsorize (default based on 5 x interquartile range)#
winsorize(c(1, 2, 99))#
winsorize(c(1, 2, 99), replace = NA)#
winsorize(c(1, 2, 3, 99), cutpoints = quantile(c(1, 2, 3, 99), c(0.01, 0.99), type = 1))
library(data.table)#
library(dplyr)#
#
# sum_up (= Stata summarize)#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE),#
  )#
DT %>% sum_up#
DT %>% sum_up(v2, d=T)#
DT %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
# fill_gap (= Stata tsfill)#
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#
# fill na (in a new dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_na(value, along_with = date) #
DT %>% group_by(id) %>% fill_na(value, along_with = date, roll = "nearest")#
#
# fill na (in the original dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
setkeyv(DT,c("id", "date"))#
setna(DT, "value")#
setna(DT, "value", roll = "nearest")
x <- data.table(a = rep(1:2, each = 3), b = 1:6)#
y <- data.table(a = 0:1, bb = 10:11)#
# outer corresponds to Stata joinby keep(master matched using)#
join(x, y, type = "outer")#
# left corresponds to Stata joinby keep(master matched)#
join(x, y, type = "left")#
# right corresponds to Stata joinby keep(mached using)#
join(x, y, type = "right")#
# inner corresponds to Stata joinby keep(matched)#
join(x, y, type = "inner")#
#
join(x, y, type = "semi")#
join(x, y, type = "anti")#
join(x, y, type = "outer", check = 1~m)#
join(x, y, type = "outer", gen = "_merge")
sessionInfo()
library(lfe)
sessionInfo()
install.packages(lfe)
install.packages(felm)
install.packages("felm")
install.packages("lfe")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repos = NULL, type="source")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("lfe")
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
system.info()
systeminfo()
session.info()
sessionInfo()
library(lfe)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL, type = "source")
library(lfe)
sessionInfo
sessionInfo()
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
?felm
felm
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Create quantile categories (corresponds to Stata command xtile)#
#'#
#' @param x A vector#
#' @param cutpoints Cutpoints to use when \code{nq} is not specified.  For instance \code{cutpoints = 0.4} creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4. Cutpoints must be unique.#
#' @param probs A vector of probabilities that an be used instead of cutpoints. Quantiles are computed as the inverse of the empirical distribution function (type = 1)#
#' @param n_quantiles A numeric specifying number of quantiles. Can be used instead of cutpoints#
#' @return An integer vector representing groups corresponding to cutpoints. Includes missing values when present in the original vector.#
#' @examples #
#' v <- c(NA, 1:10)                   #
#' partition(v, n_quantiles = 3) # 3 groups based on terciles#
#' partition(v, probs = c(0.3, 0.7)) # 3 groups based on two quantiles#
#' partition(v, cutpoints = c(2, 3)) # 3 groups based on two cutpoints#
#' @export#
partition <- function(x, cutpoints = NULL, probs = NULL, n_quantiles = NULL){#
  if (!is.null(n_quantiles)){#
  if (!is.null(cutpoints)|!is.null(probs)) stop("Only one option among cutpoints, probs and n_quantiles can be used")#
      cutpoints <- tail(head(quantile(x, seq(0, 1, length = n_quantiles + 1), type = 1, na.rm = TRUE), -1),-1)#
  } else if (!is.null(probs)){#
	  	if (!is.null(cutpoints)) stop("Only one option among cutpoints, probs and n_quantiles can be used")#
	  cutpoints <- quantile(x, probs, type = 1, na.rm = TRUE)#
	}#
  breaks <- c(min(min(x, na.rm = TRUE),min(cutpoints)) -1, cutpoints , max(max(x, na.rm = TRUE), max(cutpoints)) + 1)#
  if (anyDuplicated(breaks)){#
    warning("Cutpoints are not unique")#
  }#
  .bincode(x, breaks = breaks , include.lowest=TRUE)#
}
v <- c(NA, 1:10)                   #
partition(v, n_quantiles = 3)
partition(v, cutpoints = c(1,1))
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Create quantile categories (corresponds to Stata command xtile)#
#'#
#' @param x A vector#
#' @param cutpoints Cutpoints to use when \code{nq} is not specified.  For instance \code{cutpoints = 0.4} creates two groups, one for observations equal or below 0.4, one for observations superior to 0.4. Cutpoints must be unique.#
#' @param probs A vector of probabilities that an be used instead of cutpoints. Quantiles are computed as the inverse of the empirical distribution function (type = 1)#
#' @param n_quantiles A numeric specifying number of quantiles. Can be used instead of cutpoints#
#' @return An integer vector representing groups corresponding to cutpoints. Includes missing values when present in the original vector.#
#' @examples #
#' v <- c(NA, 1:10)                   #
#' partition(v, n_quantiles = 3) # 3 groups based on terciles#
#' partition(v, probs = c(0.3, 0.7)) # 3 groups based on two quantiles#
#' partition(v, cutpoints = c(2, 3)) # 3 groups based on two cutpoints#
#' @export#
partition <- function(x, cutpoints = NULL, probs = NULL, n_quantiles = NULL){#
  if (!is.null(n_quantiles)){#
  if (!is.null(cutpoints)|!is.null(probs)) stop("Only one option among cutpoints, probs and n_quantiles can be used")#
      cutpoints <- tail(head(quantile(x, seq(0, 1, length = n_quantiles + 1), type = 1, na.rm = TRUE), -1),-1)#
  } else if (!is.null(probs)){#
	  	if (!is.null(cutpoints)) stop("Only one option among cutpoints, probs and n_quantiles can be used")#
	  cutpoints <- quantile(x, probs, type = 1, na.rm = TRUE)#
	}#
  breaks <- c(min(min(x, na.rm = TRUE),min(cutpoints)) -1, cutpoints , max(max(x, na.rm = TRUE), max(cutpoints)) + 1)#
  if (anyDuplicated(breaks)) warning("Cutpoints are not unique", call. = FALSE)#
  .bincode(x, breaks = breaks , include.lowest=TRUE)#
}
partition(v, cutpoints = c(1,1))
sum_up(v
)
v
DT
setwd("/Users/Matthieu/Dropbox/Symlink")#
N=1e2; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
setwd("/Users/Matthieu/Dropbox/Symlink")#
devtools::install_github("matthieugomez/statar")#
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))#
assignInNamespace("cedta.override",#
                  c(data.table:::cedta.override,"IRkernel"),#
                  "data.table")
N=1e2; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT[1, id = -20]
DT[1, id := -20]
DT
sum_up(DT,id)
?sample
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            if (nrow(ans)>1000){#
              ans <- sample(ans, size = 10000)#
            }#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_plot()#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
              setkeyv(ans, c(group, "N",v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            ans <- ans %>% group_by_(group)#
            if (nrow(ans)>1000 * n_groups(ans)){#
              ans <-  ans %>% sample(size = 10000)#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_plot() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize)#
}#
#
#' @
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            if (nrow(ans)>1000){#
              ans <- sample(ans, size = 10000)#
            }#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_plot()#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
              setkeyv(ans, c(group, "N",v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            ans <- ans %>% group_by_(group)#
            if (nrow(ans)>1000 * n_groups(ans)){#
              ans <-  ans %>% sample(size = 10000)#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_plot() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            if (nrow(ans)>1000){#
              ans <- sample(ans, size = 10000)#
            }#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_plot()#
            }#
          } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
              setkeyv(ans, c(group, "N",v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            ans <- ans %>% group_by_(group)#
            if (nrow(ans)>1000 * n_groups(ans)){#
              ans <-  ans %>% sample(size = 10000)#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_plot() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
    } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
N <- 100; K <- 10#
DT <- data.table(#
  v1 = sample(5, N, TRUE),#
  v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
)
graph(DT)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            if (nrow(ans)>1000){#
              ans <- sample(ans, size = 10000)#
            }#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_point()#
            }#
          } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
              setkeyv(ans, c(group, "N",v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            ans <- ans %>% group_by_(group)#
            if (nrow(ans)>1000 * n_groups(ans)){#
              ans <-  ans %>% sample(size = 10000)#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_point() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
    } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT)
traceback()
graph(DT)
graph(DT,v2)
graph(DT,v1)
DT
graph(DT,v2)
debug(graph)
graph(DT,v2)
s
n
ans
ans
ans
v
print(ggplot(ans, aes_string(x = v)) + geom_point())
ans
v
f
f
f
ggplot(DT, aes(x=v2))+ geom_point
ggplot(DT, aes(x=v2))+ geom_point()
?geom_point
ecdf(DT$v2)
names(ecdf(DT$v2))
attr(ecdf(DT$v2))
attributes(ecdf(DT$v2))
attributes(ecdf(DT$v2))$ecdf
ecdf(DT$v2)$ecdf
ecdf(DT$v2)$function
ecdf(DT$v2)(DT$v2)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            if (nrow(ans)>1000){#
              ans <- sample(ans, size = 10000)#
            }#
            eval(substitute(ans[, x:=ecdf(v)(v)], list(v=as.name(v))))#
            g[[i]] <-  ggplot(ans, aes_string(x = "x", y = v)) + geom_point()#
            }#
          } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
              setkeyv(ans, c(group, "N",v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            ans <- ans %>% group_by_(group)#
            if (nrow(ans)>1000 * n_groups(ans)){#
              ans <-  ans %>% sample(size = 10000)#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_point() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
    } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT,v2)
?geom_bar
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density()#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = groups)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
          } else{ #
#
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density()#
            }             #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, dodge = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, dodge = dodge)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, dodge = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density()#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = groups)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density()#
            }             #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT,v2)
graph(DT)
graph(DT, v2, by = v1)
graph(DT, v2, by = v1, dodge = TRUE)
graph(DT, v2, by = v1, dodge = TRUE)
graph(DT, v2, by = v1, dodge = TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, dodge = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, dodge = dodge)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, dodge = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density()#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = groups)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density()#
            }             #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density() + facet_grid(as.formula(paste0(group, "~.")))#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
debug(graph)
graph(DT, v2, by = v1, dodge = TRUE)
s
n
dodge
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, dodge = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, dodge = dodge)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, dodge = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density()#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = groups)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density()#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
f
f#
f
f#
f#
f
f
f
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, dodge = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, dodge = dodge)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, dodge = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density()#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = groups)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density()#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, v2, by = v1, dodge = TRUE)
ggplot(DT, aes_string(x = "v2", color = "v1")) + stat_density()
ggplot(DT, aes_string(x = "v2", group = "v1", color = "v1")) + stat_density()
ggplot(DT, aes(x = v2, group = v1, color = "v1")) + stat_density()
ggplot(DT, aes(x = v2, group = v1, color = v1)) + stat_density()
ggplot(DT, aes(x = v2, group = as.factor(v1), color = as.factor(v1))) + stat_density()
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, dodge = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, dodge = dodge)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, dodge = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density()#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density()#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density() + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, v2, by = v1, dodge = TRUE)
?stat_density
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, dodge = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, dodge = dodge)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, dodge = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line")#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density(geom = "line")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, v2, by = v1, dodge = TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, dodge = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, dodge = dodge)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, dodge = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line")#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (dodge){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar()+ coord_flip()#
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (dodge){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, v2, by = v1, dodge = TRUE)
graph(DT)
graph(DT, by = v1)
graph(DT, by = v1)
N <- 100; K <- 10#
DT <- data.table(#
  id = sample(sprintf("id%03d",1:K), N, TRUE)),#
  v1 = sample(5, N, TRUE),#
  v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
)
N <- 100; K <- 10#
DT <- data.table(#
  id = sample(sprintf("id%03d",1:K), N, TRUE),#
  v1 = sample(5, N, TRUE),#
  v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
)
graph(DT)
#' N <- 100#
#' DT <- data.table(#
#'   id = sample(sprintf("id%03d",1:3), N, TRUE),#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#' )N <- 100#
DT <- data.table(#
  id = sample(sprintf("id%03d",1:3), N, TRUE),#
  v1 = sample(5, N, TRUE),#
  v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
)#
graph(DT)
DT(N <- 100#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(5, N, TRUE),#
  v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
)#
graph(DT)
N <- 100#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(5, N, TRUE),#
  v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
)#
graph(DT)#
graph(DT, v2, by = v1)
N <- 100#
DT <- data.table(#
  id = sample(c("id1","id2","id3"), N, TRUE),#
  v1 = sample(5, N, TRUE),#
  v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
)#
graph(DT)
graph(DT, by = id)
graph(DT, by = id, dodge = TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100#
#' DT <- data.table(#
#'   id = sample(sprintf("id%03d",1:3), N, TRUE),#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, position = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, position = position)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, position = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line")#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (position == "dodge"){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar(position = "dodge")+ coord_flip() #
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (position == "dodge"){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, by = id, dodge = TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100#
#' DT <- data.table(#
#'   id = sample(sprintf("id%03d",1:3), N, TRUE),#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, position = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, position = position)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, position = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line")#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (position == "dodge"){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar(position = "dodge")+ coord_flip() #
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (position == "dodge"){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, by = id)
graph(DT, by = id, position = "dodge")
?position
graph(DT, by = id)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100#
#' DT <- data.table(#
#'   id = sample(sprintf("id%03d",1:3), N, TRUE),#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, position = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, position = position)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, position = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line")#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (position == "dodge"){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              eval(substitute(ans[, v:= as.factor(v)], list(v = as.name(v))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar(position = "dodge")+ coord_flip() #
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (position == "dodge"){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, by = id)
graph(DT, by = id, position = "dodge")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @examples#
#' N <- 100#
#' DT <- data.table(#
#'   id = sample(sprintf("id%03d",1:3), N, TRUE),#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, facet = facet)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, facet = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line")#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (!facet){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              eval(substitute(ans[, v:= as.factor(v)], list(v = as.name(v))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar(position = "dodge")+ coord_flip() #
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (!facet){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
graph(DT, by = id, position = "dodge")
graph(DT, by = id)
graph(DT, by = id)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' Experimental function to graph a dataset#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude. Defaults to all non-grouping variables. See the \link[dplyr]{select} documentation.#
#' @param by Groups within which variables should be ploted.#
#' @param reorder Should the value of strings with the most count be printed first?#
#' @param winsorize Should numeric variables winsorized?#
#' @param facet Should results graphed in different windows for each group?#
#' @examples#
#' N <- 100#
#' DT <- data.table(#
#'   id = sample(sprintf("id%03d",1:3), N, TRUE),#
#'   v1 = sample(5, N, TRUE),#
#'   v2 =  sample(round(runif(100,max=100),4), N, TRUE)#
#' )#
#' graph(DT)#
#' graph(DT, v2, by = v1)#
#' @export#
graph <- function(x, ..., by = NULL, reorder = TRUE, winsorize = TRUE, facet = FALSE) {#
  graph_(x, .dots = lazy_dots(...) , by = substitute(by), d = d, reorder = reorder, winsorize = winsorize, facet = facet)#
}#
#
#' @export#
#' @rdname graph#
graph_<- function(x, ..., .dots ,by = NULL, d = FALSE, reorder = TRUE, winsorize = winsorize, facet = FALSE) {#
  stopifnot(is.data.table(x))#
  byvars <- names(select_vars_(names(x), by))#
  dots <- all_dots(.dots, ...)#
  vars <- names(select_vars_(names(x), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(x), byvars)#
  }#
  if (!length(byvars)){#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          if (dummy) {#
            if (!reorder){#
              g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()#
            } else{#
              ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = v]))#
              setkeyv(ans, c("N", v))#
              ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip()#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(winsorize(v, verbose = TRUE))], list(v= as.name(v))))#
              setnames(ans,v)#
            } else{#
              eval(substitute(ans <- x[, list(v)], list(v= as.name(v))))#
            }#
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line")#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  } else{#
    ans <- x[,c(byvars, vars), with = FALSE]#
    if (length(byvars)>1){#
      group <- tempname("group", x)#
      setkeyv(ans, byvars)#
      ans[, (group) := 0]#
      ans[unique(ans), (group) := 1]#
      eval(substitute(ans[, (group):= cumsum(v)], list(v = as.name(group))))#
    } else{#
      group <- byvars#
    }#
    g <- NULL#
    i <- 0#
      for (v in vars){#
        i <- i+1#
          dummy <- eval(substitute(is.integer(x[,v])+ is.character(x[,v]), list(v = as.name(v))))#
          assign(v,v)#
          if (dummy) {#
            if (!facet){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              eval(substitute(ans[, v:= as.factor(v)], list(v = as.name(v))))#
              g[[i]] <-  ggplot(x, aes_string(x = v, fill = group)) + geom_bar(position = "dodge")+ coord_flip() #
            } else{#
              if (!reorder){#
                  g[[i]] <-  ggplot(x, aes_string(x = v)) + geom_bar()+ coord_flip()+ facet_grid(as.formula(paste0(group,"~.")))#
              } else{#
                ans <- eval(substitute(x[, list(N = as.integer(rep(.N,.N))), by = c(group,v)]))#
                setkeyv(ans, c(group, "N",v))#
                ans <- eval(substitute(ans[, v := factor(v, levels = unique(v), ordered = TRUE)], list( v= as.name(v))))#
                g[[i]] <-  ggplot(ans, aes_string(x = v)) + geom_bar() + coord_flip() + facet_grid(as.formula(paste0(group, "~.")))#
              }#
            }#
          } else{ #
            if (winsorize){#
              eval(substitute(ans <- x[, list(group, v = winsorize(v, verbose = TRUE))], list(group = as.name(group), v= as.name(v))))#
              setnames(ans,c(group,v))#
            } else{#
              eval(substitute(ans <- x[, list(group, v)], list(group = as.name(group), v= as.name(v))))#
            }#
            if (!facet){#
              eval(substitute(ans[, group:= as.factor(group)], list(group = as.name(group))))#
              g[[i]] <-  ggplot(ans, aes_string(x = v, color = group)) + stat_density(geom = "line", position = "identity")#
            } else{            #
            g[[i]] <-  ggplot(ans, aes_string(x = v)) + stat_density(geom = "line") + facet_grid(as.formula(paste0(group, "~.")))#
            }#
          }#
      } #
    if (length(g)==1){#
      print(g)#
    } else{#
      do.call(multiplot, g)#
    }#
  }#
}#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  require(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = cols, nrow = ceiling(numPlots/cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
