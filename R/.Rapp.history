?expand
DT <- data.table(#
    id = c(1, 1, 1, 1, 1, 2, 2),#
    date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% expand(date)
library(dpryr)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
?lag
lag
devtools::install_github("smbache/magrittr")
library(magrittr)
rnorm(100) %T>%#
  plot(type = "l", col = "firebrick") %>%#
  abs %>%#
  sum
tmp :=#
  subset(Species == "setosa") %>%#
  set_names(LETTERS[1:5])
install.packages("colorout")
download.file("http://www.lepem.ufc.br/jaa/colorout_1.0-3.tar.gz", destfile = "colorout_1.0-3.tar.gz")#
install.packages("colorout_1.0-3.tar.gz", type = "source", repos = NULL)
savehistory
savehistory(ok)
savehistory("ok")
savehistory("~/.R.app.history")
savehistory()
fefe
savehistory()
library(pryr)
N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )
DT
DF
DT <- setDF(DF)
library(data.table)
DT <- setDF(DF)
DT
DT1 <- copy(DT)
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
object_size(DT,DT1, merge(DT,DT1)
)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2)]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
}
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF3)#
	#> 25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
q
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF3)#
	#> 25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF2)#
	#> 25.9 kB#
	object_size(DF,DF2, merge(DF,DF2)
)
library(tidyr)
?gather
DTx <- data.table (#
  gvkey = c("2222","2222"), #
  permno = c("20990", "20980"), #
  year_min = c(1991,2000), #
  year_max = c(1999, 2001)#
)
debugdebug(mutate)
debug(mutate)
library(dplyr)
DT <- data.table ( id = 1:10)
mutate(DT, mean(id))
debug(mutate)
DT <- data.table ( id = 1:10)
mutate(DT, mean(id))
s
n
?forder
DT
DT[1, id:= NA]
DT
forder(DT,id)
DT[order(id)]
setorder(DT,id)
DT
?setorder
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))#
assignInNamespace("cedta.override",#
                  c(data.table:::cedta.override,"IRkernel"),#
                  "data.table")
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
result1 <- felm( v4 ~ v2 + v1, DT )#
result2 <- felm( v3 ~ v2 + v1, DT )#
result3 <- felm( v4 ~ v3 + v1 |0| (v3 ~ v2) |0, DT )
ivreg
library(aer)
library(AER)
ivreg(v3~v1,DT)
?ivreg
ivreg(v3~v2 | v1,DT)
ivreg(v3 ~ v2 | v1,D T)
ivreg(v3 ~ v2 | v1, DT)
?ivreg
ivreg(v3 ~ v2 | v1, DT)
ivreg(v3 ~ v2 | v1, date = DT)
ivreg(v3 ~ v2 | v1, data = DT)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1 ~ v2 | 0 | (v2 ~ v3) |0, df)
felm(v1 ~ v2 | 0 | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |0, df)
felm(v1 ~ v2 |  | (v2 ~ v3), df)
felm(v1 ~ v2 |0| (v2 ~ v3), df)
l= c("col1","some","col3")
l[c(1,NA)]
l[c(1,NA)] <- c("col11","col12")
l[c(TRUE,NA)] <- c("col11","col12")
l[l=="col1"] <- c("col11","col12")
l=="col1"
l <- c("col1", NA, "col3")#
l[l==col1] <- c("col1")
l <- c("col1", NA, "col3")#
l[l == "col1"] <- c("col1")
l
condition = l== "col1"
condition
l[condition] <- c("col1")
l[c(TRUE,NA,FALSE) <- c("col1")
)
l[c(TRUE,NA,FALSE)] <- c("col1")
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(l == "col1")
]
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(condition)] <- c("col1")
l
l[NA,1]
l[c(NA,1)]
l <- c("col1", "col2", "col3")#
    l[c(NA,1)]
l[c(TRUE, NA, TRUE)]
l[c(NA, TRUE)]
l <- c("col1", NA, "col3")#
	l[which(l == "col1" | l == "col3")]
l <- c("col1", NA, "col3")#
	l[l == "col1"]
l[which(l == "col1")]
DT
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
lm(v2~v1,DT)
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
lm(v2~v1,DT)
result <- lm(v2~v1,DT)
names(result)
result$coefficients
result$model
result
names(result)
summary(result)
list(summary(result))
names(summary(result))
result <- felm(v2~v1,DT)
library(lfe)
result <- felm(v2~v1,DT)
names(result)
names(result)$se
result$se
result$coefficients
result$robustvcv
summary(result)
names(summary(result))
?summary
object_size(summary(result))
library(pryr)
object_size(summary(result))
object_size(result)
result <- lm(y ~ x)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- lm(v3 ~ v2, DT)
pryr::object_size(results)
pryr::object_size(result)
pryr::object_size(summary(results))
pryr::object_size(summary(result))
names(result)
result$coefficients
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2, DT)
vcov(result)
result
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|||v1, DT)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|0|0|v1, DT)
names(result)
vcov(result)
result$vcv
result$robustvcv
object_size(results)
object_size(result)
result <- felm(v3~v2|0|0|v1, DT)
stargazer(result, type = "text")
library(stargazer)
stargazer(result, type = "text")
devtools::install_github("matthieugomez/statar")
lazy(date)
library(lazyeval)
lazy(date0
)
lazy(date)
lazy_eval(lazy(date))
lazy_eval(lazy(date1))
select_vars(names(df),lazy(ok))
library(dplyr)
select_vars(names(df),lazy(ok))
select_vars(names(df), args = lazy(ok))
lazydots
lazy_dots
lazykeep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}(date)
df
df <- data.frame(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
 )
keep(df,id)
keep = function(df,x){#
  keep_(df, lazy(x))#
}#
keep_ = function(df,x){#
  df[, lazy_eval(x,df)]#
}
keep(df,id)
lazy(date)
lazy(date1)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
dt <- data.table(id = c(1,2), date = c(1999, 2000))#
setcolorder(dt, "date", 1)#
setcolorder(dt, 2, 1)#
setcolorder(dt, "id", 2)#
setcolorder(dt, 1, 2)
devtools::load_all("/Users/Matthieu/Dropbox/Symlink/Downloads/data.table-master")
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ v2, DT)
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
n
f
felm(v3 ~ 1|0|(v2~v1), DT)
pform
parseformula(formula,data)
knownargs
sc
sc <- names(sys.call())[-1]
sc
named <- knownargs[pmatch(sc, knownargs)]
formula
f
felm::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
lfe:::parseformula(v3 ~ 1 | 0 | v2 ~ v1, DT)
felm = function (formula, data, iv = NULL, clustervar = NULL, exactDOF = FALSE, #
    subset, na.action, contrasts = NULL, ...) #
{#
    knownargs <- c("iv", "clustervar", "cmethod")#
    sc <- names(sys.call())[-1]#
    named <- knownargs[pmatch(sc, knownargs)]#
    for (arg in c("iv", "clustervar")) {#
        if (!is.null(eval(as.name(arg))) && !(arg %in% named)) {#
            warning("Please specify the '", arg, "' argument by name, or use a multi part formula. Its position in the argument list will change in a later version")#
        }#
    }#
    mf <- match.call(expand.dots = FALSE)#
    cmethod <- "cgm"#
    args <- list(...)#
    ka <- knownargs[pmatch(names(args), knownargs, duplicates.ok = FALSE)]#
    names(args)[!is.na(ka)] <- ka[!is.na(ka)]#
    env <- environment()#
    lapply(intersect(knownargs, ka), function(arg) assign(arg, #
        args[[arg]], pos = env))#
    if (!(cmethod %in% c("cgm", "gaure"))) #
        stop("Unknown cmethod: ", cmethod)#
    unk <- setdiff(names(args), knownargs)#
    if (length(unk) > 0) #
        stop("unknown arguments ", paste(unk, collapse = " "))#
    if (missing(data)) #
        data <- environment(formula)#
    pf <- parent.frame()#
    pform <- parseformula(formula, data)#
    print(formula)#
    print(pform)#
}
felm(v3 ~ 1|0|v2~v1, DT)
parseformula <- function (form, data) #
{#
    f <- as.Formula(form)#
    len <- length(f)[[2]]#
    if (len == 1) #
        return(oldparseformula(form, data))#
    opart <- formula(f, lhs = 1, rhs = 1)#
    if (len == 1) #
        return(list(formula = opart, gpart = ~0, ivpart = ~0, #
            cpart = ~0))#
    gpart <- formula(f, lhs = 0, rhs = 2)#
    if (!nopart(gpart)) {#
        tm <- terms(gpart, keep.order = TRUE)#
        parts <- attr(tm, "term.labels")#
        parts <- parts[parts != "0"]#
        nm <- parts#
        glist <- lapply(paste(".G(", parts, ")", sep = ""), function(e) parse(text = e))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- lapply(glist, eval, list(.G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- lapply(glist, eval, data, as.environment(list(.G = Gfunc, #
                `:` = Ginfunc)))#
        }#
        names(fl) <- nm#
    }#
    else {#
        fl <- NULL#
    }#
    if (len == 2) #
        return(list(formula = opart, fl = fl, gpart = gpart, #
            ivpart = ~0, cpart = ~0))#
    ivparts <- formula(f, lhs = 0, rhs = 3, drop = TRUE)#
    if (!nopart(ivparts) && length(ivparts[[2]]) > 1 && ivparts[[2]][[1]] == #
        "(") {#
        ivspec <- as.Formula(ivparts[[2]][[2]])#
        lhs <- formula(ivspec, rhs = 0)#
        ivpart <- lapply(seq_along(all.vars(lhs)), function(i) formula(ivspec, #
            lhs = i))#
    }#
    else {#
        ivpart <- NULL#
    }#
    if (len == 3 && !is.null(ivpart)) #
        return(list(formula = opart, fl = fl, iv = ivpart, gpart = gpart, #
            ivpart = ivparts, cpart = ~0))#
    if (len == 3 && is.null(ivpart)) {#
        cpart <- ivparts#
        ivparts <- NULL#
    }#
    else {#
        cpart <- formula(f, lhs = 0, rhs = 4, drop = TRUE)#
    }#
    if (!nopart(cpart)) {#
        tm <- terms(cpart, keep.order = TRUE)#
        nm <- parts <- attr(tm, "term.labels")#
        clist <- lapply(paste("factor(", parts, ")", sep = ""), #
            function(e) parse(text = e))#
        cluster <- lapply(clist, eval, data)#
        names(cluster) <- nm#
    }#
    else {#
        cluster <- NULL#
    }#
    list(formula = opart, fl = fl, iv = ivpart, cluster = cluster, #
        gpart = gpart, ivpart = ivparts, cpart = cpart)#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(Formula)
felm(v3 ~ 1|0|v2~v1, DT)
oldparseformula = function (formula, data) #
{#
    trm <- terms(formula, specials = c("G"))#
    feidx <- attr(trm, "specials")$G + 1#
    va <- attr(trm, "variables")#
    festr <- paste(sapply(feidx, function(i) deparse(va[[i]])), #
        collapse = "+")#
    if (festr != "") {#
        formula <- update(formula, paste(". ~ . -(", festr, ") - 1"))#
        felist <- parse(text = paste("list(", gsub("+", ",", #
            festr, fixed = TRUE), ")", sep = ""))#
        nm <- eval(felist, list(G = function(arg) deparse(substitute(arg))))#
        Gfunc <- function(f) if (is.null(attr(f, "xnam"))) #
            factor(f)#
        else f#
        Ginfunc <- function(x, f) {#
            if (is.factor(x)) {#
                structure(interaction(factor(f), factor(x), drop = TRUE), #
                  xnam = deparse(substitute(x)), fnam = deparse(substitute(f)))#
            }#
            else {#
                structure(factor(f), x = x, xnam = deparse(substitute(x)), #
                  fnam = deparse(substitute(f)))#
            }#
        }#
        if (is.environment(data)) {#
            fl <- eval(felist, list(G = Gfunc, `:` = Ginfunc), #
                data)#
        }#
        else {#
            fl <- local({#
                eval(felist, data)#
            }, list(G = Gfunc, `:` = Ginfunc))#
        }#
        names(fl) <- nm#
        gpart <- eval(parse(text = paste("~", paste(nm, collapse = "+"))))#
        if (is.null(names(fl))) #
            names(fl) <- paste("fe", 1:length(fl), sep = "")#
    }#
    else {#
        fl <- NULL#
        gpart <- ~0#
    }#
    return(list(formula = formula, fl = fl, gpart = gpart, ivpart = ~0, #
        cpart = ~0))#
}
felm(v3 ~ 1|0|v2~v1, DT)
library(lfe)
suppressMessages(library("data.table"))
N <- 1e3#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|v2~v1, DT)
DT
felm(v3 ~ 1|0|(v2~v1), DT)
debug(felm)
felm(v3 ~ 1|0|(v2~v1), DT)
formula
pform
f <- as.Formula(formula)
f
felm(v3 ~ 1|0|(v2~v1), DT)
s
n
formula
data
p <- as.Formula(formula)
p
length(f)[[2]]
length(p)[[2]]
length(p)[[1]]
names(length(p))
length(p)
p
length(formula)
length(formula)[[2]]
gpart <-  formula(p, lhs = 0, rhs = 2)
nopart(gpart)
ivparts <- formula(p, lhs = 0, rhs = 3, drop = TRUE)
ivparts
f
as.list(body(felm))
trace(felm, print(mf), at = 40)
trace(felm, quote(print(mf)), at = 40)
felm(v3 ~ 1|0|(v2~v1), DT)
g=function(formula,env){eval(formula,env)}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(y~t1, parent.frame())}
f=function(x){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f(1:10)
g=function(formula,env){stats::model.frame(formula,env)}
f(1:10)
f=function(){assign("t1",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
x <- 1:10
f(1:10)
f()
ls()
ls(parent.env())
?ls
g=function(formula,env){eval(formula,env)}
g=function(formula,env){stats::model.frame(formula,env)}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~t1, parent.frame())}
f()
f=function(){assign("v2(fit)",1:10,envir = parent.frame()); g(x~`v2(fit)`, parent.frame())}
f()
lfe::project
library(data.table)
last(c(1,2))
library(statar)
?setcols
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package/R/statar.R")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?saveRDS
x <- data.table(a = rep(1:2, each = 3), b=1:6) y <- data.table(a = 0:1, bb = 10:11)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
library(data.table)
x <- data.table(a = rep(1:2, each = 3), b=1:6) ; y <- data.table(a = 0:1, bb = 10:11)
join(x, y, type = "inner", check = 1~m)
biglm
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
biglm(v1~id)
biglm(v1~id, DT)
library(biglm)
biglm(v1~id, DT)
?biglm
?speedlm
library(speedlm)
library(speedglm)
?speedlm
system.time(speedlm(v1~id,DT))
system.time(speedlm.fit(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
system.time(speedlm(v1~id,DT))
system.time(biglm(v1~id,DT))
object.size(biglm(v1~id,DT))
object.size(speedlm(v1~id,DT))
ls(getNamespace("lfe"), all.names=TRUE)
C_conncomp
id <- function(){print("1")}
g<- function(x){lazy(x)}
g(id)
library(lazyeval)
g(id)
install.packages("lfe")
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
fllibrary(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
felm
felm::project
lfe::project
lfe:::project
x
?felm
remove.packages("lfe")         # revert back to CRAN
install.packages("data.table")
install.packages("lfe")
library(lfe)
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)#
#> "Error in eval(expr, envir, enclos) : object 'v2(fit)' not found”
lfe
sessionInfo()
lfe
felm
project
lfe::project
lfe:::project
doprojols
felm::doprojols
felm:::doprojols
felm::doprojols
lfe:::doprojols
library(statar)
# lag/lead create lag/lead variables (corresponds to Stata L. F.)#
year <- c(1992, 1989, 1991, 1990, 1994, 1992, 1991)#
value <- c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
lag(value, 1, order_by = year) # returns value in previous year, like  dplyr::lag#
lag(value, 1, along_with = year) #  returns value in year - 1#
#
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, months(1), along_with = datem) #
#
# tag (corresponds to Stata tag)#
tag(c(1, 2))#
tag(c(1, 2), fromLast = TRUE)#
#
# sample_mode (corresponds to Stata mode)#
sample_mode(c(1, 2, 2))#
sample_mode(c(1, 2))#
sample_mode(c(NA, NA, 1))#
sample_mode(c(NA, NA, 1), na.rm = TRUE)#
#
# partition creates integer variable for quantile categories (corresponds to Stata xtile)#
v <- sample(c(NA, 1:10), 10, TRUE)                   #
partition(v, nq = 3) # 3 groups based on terciles#
partition(v, cutpoints = c(1, 3)) # 3 groups based on two cutpoints#
#
# winsorize (default based on 5 x interquartile range)#
winsorize(c(1, 2, 99))#
winsorize(c(1, 2, 99), replace = NA)#
winsorize(c(1, 2, 3, 99), cutpoints = quantile(c(1, 2, 3, 99), c(0.01, 0.99), type = 1))
library(data.table)#
library(dplyr)#
#
# sum_up (= Stata summarize)#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE),#
  )#
DT %>% sum_up#
DT %>% sum_up(v2, d=T)#
DT %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
# fill_gap (= Stata tsfill)#
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#
# fill na (in a new dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_na(value, along_with = date) #
DT %>% group_by(id) %>% fill_na(value, along_with = date, roll = "nearest")#
#
# fill na (in the original dataset)#
DT <- data.table(#
 id    = c(1, 1, 1, 1, 1, 2, 2),#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
 value = c(NA, NA, 3, 5.3, 3.0, 3.2, 5.2)#
)#
setkeyv(DT,c("id", "date"))#
setna(DT, "value")#
setna(DT, "value", roll = "nearest")
x <- data.table(a = rep(1:2, each = 3), b = 1:6)#
y <- data.table(a = 0:1, bb = 10:11)#
# outer corresponds to Stata joinby keep(master matched using)#
join(x, y, type = "outer")#
# left corresponds to Stata joinby keep(master matched)#
join(x, y, type = "left")#
# right corresponds to Stata joinby keep(mached using)#
join(x, y, type = "right")#
# inner corresponds to Stata joinby keep(matched)#
join(x, y, type = "inner")#
#
join(x, y, type = "semi")#
join(x, y, type = "anti")#
join(x, y, type = "outer", check = 1~m)#
join(x, y, type = "outer", gen = "_merge")
sessionInfo()
library(lfe)
sessionInfo()
install.packages(lfe)
install.packages(felm)
install.packages("felm")
install.packages("lfe")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repos = NULL, type="source")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("lfe")
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
library(lfe)
system.info()
systeminfo()
session.info()
sessionInfo()
library(lfe)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz")
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL)
install.packages("~/Dropbox/Symlink/Downloads/lfe_1.7-1401.tar.gz", repo = NULL, type = "source")
library(lfe)
sessionInfo
sessionInfo()
library(lfe)#
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
?felm
felm
library(lfe)
f <- function(formula, df){felm(formula,df)}#
N <- 1e3#
df <- data.frame(#
          v1   = sample(10, N, TRUE),#
          v2   = sample(1e5, N, TRUE),    #
          v3   = sample(c(1:5), N, TRUE)                    #
       )#
f(v1~v2, df)#
#>(Intercept)          v2  #
#>  5.332e+00   2.718e-06  #
f(v1~1|0|(v2~v3),df)
project
lfe:::project
setwd("/Users/Matthieu/Dropbox/Symlink")#
devtools::install_github("matthieugomez/statar")#
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))#
assignInNamespace("cedta.override",#
                  c(data.table:::cedta.override,"IRkernel"),#
                  "data.table")
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#
# fill na (in
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap(, along_with = date, full = TRUE)#
#
# fill na (in
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
DT %>% group_by(id) %>% fill_gap( along_with = date, full = TRUE)#
#
# fill na (in
fill_gap
?fill_gap
?mutate
?select
?fill_gap
?spread
?gather
DT
DT %>% group_by(id) %>% data.table %>% summarize
DT %>% group_by(id) %>% data.table %>% summarize(mean(date))
DT
?duplicated
duplicatet(DT)
duplicated(DT)
duplicated(DT, by = id)
duplicated(DT, by = "id")
?duplicated
?duplicated
?duplicated
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, months(1), along_with = datem)
datem
seq.int
?seq
seq(date[1], date[3], by=months(1))
seq(date[1], date[3], by = months(1))
seq(datem[1], datem[3], by = months(1))
datem[1]
seq.default(datem[1], datem[3], by = months(1))
seq.int(datem[1], datem[3], by = months(1))
seq.int.default(datem[1], datem[3], by = months(1))
library(lubridate)
seq.int.default(datem[1], datem[3], by = months(1))
seq.int(datem[1], datem[3], by = months(1))
seq.int(datem[1], datem[3], by = 1)
seq.int(datem[1], datem[3], by = days(1))
datem[1]+months(0:11)
datem2[2] %/% months(1)
datem2[2] -datem2[1]
datem[2] -datem[1]
datem[3] -datem[1]
seq(1,9, by = 9)
seq(1,9, by = 1)
length(seq((datem[1], datem[3], by = "month"))
length(seq((datem[1], datem[3], by = "month")))
length(seq(datem[1], datem[3], by = "month"))
as.period(datem[3]-datem[1]) %/% "month"
as.period(datem[3]-datem[1]) %/% months(1)
as.period(datem[3]-datem[1]) %/% months(1)
as.interfal(datem[3]-datem[1]) %/% months(1)
as.interval(datem[3]-datem[1]) %/% months(1)
as.interval(start= datem[1], end= datem[3]) %/% months(1)
as.interval(start= datem[1], end= datem[3]) %/% months(1)
as.period(datem[3]-datem[1]) %/% months(1)
months(1)
inherits(n,"Period")
inherits(months(1),"Period")
names(months(1))
?period
period(11, units = "month")
period(1:11, units = "month")
months
months.period
months
?months
?period
period(1:11, units = "month")
new_period( month = 1:11)
new("Period", month=1:11)
new("Period", month=1)
period(11, units = "month")
units
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#'  Add rows corresponding to gaps in some variable#
#'#
#' @param .data A tbl_dt, grouped or not#
#' @param ... Variables to keep (beyond the grouped and along_with variable). Default to all variables. See the \link[dplyr]{select} documentation.#
#' @param along_with integer variable to fill_gap#
#' @param full  A boolean. When full = FALSE (default) rows are filled with respect to min and max of \code{...} within each group. When full = TRUE, rows are filled with respect to min and max of \code{...} in the whole datasets. #
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' DT <- data.table(#
#'  id = c(1, 1, 1, 1, 1, 2, 2), #
#'  date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#')#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#' @export#
fill_gap <- function(.data, ..., along_with, units = NULL, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  fill_gap_(.data, .dots = lazyeval::lazy_dots(...), along_with = substitute(along_with), units = units, full = full, roll = roll, rollends = rollends)#
}#
#
#' @export#
#' @rdname fill_gap#
fill_gap_ <- function(.data, ..., along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  UseMethod("fill_gap_")#
}#
#
#' @export#
fill_gap_.grouped_dt <- function(.data,...,along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  byvars <- as.character(groups(.data))#
  vars <- names(select_vars_(names(.data), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data),c(byvars, along_with))#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values" ,call. = FALSE)#
  if (anyDuplicated(.data, by = c(byvars,along_with))) stop(paste0(paste(byvars, collapse = ","),", ",along_with," do not uniquely identify observations"), call. = FALSE)#
  if is.null(units) units <-1#
  if (!full){#
    call <- substitute(.data[, list(seq(min(t, na.rm = TRUE), max(t, na.rm = TRUE), by = units)), by = c(byvars)], list(t = as.name(along_with)))#
  } else{#
    a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    call <- substitute(.data[, list(seq.int(a, b, by = units)), by = c(byvars)], list(a = a, b = b))#
  }#
  ans  <- eval(call)#
  setnames(ans, c(byvars, along_with))#
  setkeyv(ans, c(byvars, along_with))#
  .data <- .data[, c(byvars,along_with, vars), with = FALSE]#
  setkeyv(.data, c(byvars,along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
    .data#
}#
#
#' @export#
fill_gap_.data.table <- function(.data,..., along_with, period = 1L, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  vars <- names(select_vars_(names(.data), dots))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data), along_with)#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values", call. = FALSE)#
  if (anyDuplicated(.data, by = along_with)) stop(paste(along_with,"does not uniquely identify observations"), call. = FALSE)#
  setkeyv(.data,c(along_with))#
  if is.null(units) units <-1#
  a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  call <- substitute(.data[, list(seq(a, b, by = units))], list(a = a, b=b))#
  ans  <- eval(call)#
  setnames(ans, c(along_with))#
  setkeyv(ans, c(along_with))#
  .data <- .data[, c(vars, along_with), with = FALSE]#
  setkeyv(.data, c(along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
  .data#
}#
#' @export#
fill_gap_.tbl_dt <- function(.data, ..., along_with, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  tbl_dt(NextMethod())#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#'  Add rows corresponding to gaps in some variable#
#'#
#' @param .data A tbl_dt, grouped or not#
#' @param ... Variables to keep (beyond the grouped and along_with variable). Default to all variables. See the \link[dplyr]{select} documentation.#
#' @param along_with integer variable to fill_gap#
#' @param full  A boolean. When full = FALSE (default) rows are filled with respect to min and max of \code{...} within each group. When full = TRUE, rows are filled with respect to min and max of \code{...} in the whole datasets. #
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' DT <- data.table(#
#'  id = c(1, 1, 1, 1, 1, 2, 2), #
#'  date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#')#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#' @export#
fill_gap <- function(.data, ..., along_with, units = NULL, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  fill_gap_(.data, .dots = lazyeval::lazy_dots(...), along_with = substitute(along_with), units = units, full = full, roll = roll, rollends = rollends)#
}#
#
#' @export#
#' @rdname fill_gap#
fill_gap_ <- function(.data, ..., along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  UseMethod("fill_gap_")#
}#
#
#' @export#
fill_gap_.grouped_dt <- function(.data,...,along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  byvars <- as.character(groups(.data))#
  vars <- names(select_vars_(names(.data), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data),c(byvars, along_with))#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values" ,call. = FALSE)#
  if (anyDuplicated(.data, by = c(byvars,along_with))) stop(paste0(paste(byvars, collapse = ","),", ",along_with," do not uniquely identify observations"), call. = FALSE)#
  if (is.null(units)) units <-1#
  if (!full){#
    call <- substitute(.data[, list(seq(min(t, na.rm = TRUE), max(t, na.rm = TRUE), by = units)), by = c(byvars)], list(t = as.name(along_with)))#
  } else{#
    a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    call <- substitute(.data[, list(seq.int(a, b, by = units)), by = c(byvars)], list(a = a, b = b))#
  }#
  ans  <- eval(call)#
  setnames(ans, c(byvars, along_with))#
  setkeyv(ans, c(byvars, along_with))#
  .data <- .data[, c(byvars,along_with, vars), with = FALSE]#
  setkeyv(.data, c(byvars,along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
    .data#
}#
#
#' @export#
fill_gap_.data.table <- function(.data,..., along_with, period = 1L, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  vars <- names(select_vars_(names(.data), dots))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data), along_with)#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values", call. = FALSE)#
  if (anyDuplicated(.data, by = along_with)) stop(paste(along_with,"does not uniquely identify observations"), call. = FALSE)#
  setkeyv(.data,c(along_with))#
  if (is.null(units)) units <-1#
  a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  call <- substitute(.data[, list(seq(a, b, by = units))], list(a = a, b=b))#
  ans  <- eval(call)#
  setnames(ans, c(along_with))#
  setkeyv(ans, c(along_with))#
  .data <- .data[, c(vars, along_with), with = FALSE]#
  setkeyv(.data, c(along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
  .data#
}#
#' @export#
fill_gap_.tbl_dt <- function(.data, ..., along_with, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  tbl_dt(NextMethod())#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by. When the package lubridate is loaded, it can be a period when using with along_with (see the lubridate function minutes, hours, days, weeks, months and years)#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # along_with#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#' # units#
#'library(lubridate)#
#'df <- data.frame(#
#'     id = c("1", "1", "1", "1"),#
#'   date = mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y"),#
#'  value = c(4.1, 4.5, 3.3, 5.3)#
#'   )#
#' df <- df %>% mutate(datem = floor_date(date, "month"))#
#' DT %>% group_by(id) %>% mutate(lag(value, months(1), along_with = datem)) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by = NULL, units, along_with = NULL, default = NA,  ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
#
  if (!is.null(along_with)) {#
    if !is.null(units){#
      index <- match(along_with + period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by = NULL, along_with = NULL, default = NA, ...) { #
  if (!inherits(n,"Period")){#
    if (n == 0) return(x)#
    if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  }#
#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
 }#
#
  if (!is.null(along_with)) {#
    index <- match(along_with - n, along_with, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by. When the package lubridate is loaded, it can be a period when using with along_with (see the lubridate function minutes, hours, days, weeks, months and years)#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # along_with#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#' # units#
#'library(lubridate)#
#'df <- data.frame(#
#'     id = c("1", "1", "1", "1"),#
#'   date = mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y"),#
#'  value = c(4.1, 4.5, 3.3, 5.3)#
#'   )#
#' df <- df %>% mutate(datem = floor_date(date, "month"))#
#' DT %>% group_by(id) %>% mutate(lag(value, months(1), along_with = datem)) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by = NULL, units, along_with = NULL, default = NA,  ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      index <- match(along_with + period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by = NULL, along_with = NULL, default = NA, ...) { #
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
 }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      index <- match(along_with - period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, 1, along_with = datem, units = "month")
traceback()
period
?perido
?period
period(1, units = "month")
debug(lag)
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, 1, along_with = datem, units = "month")
s
n
units
f
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by. When the package lubridate is loaded, it can be a period when using with along_with (see the lubridate function minutes, hours, days, weeks, months and years)#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # along_with#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#' # units#
#'library(lubridate)#
#'df <- data.frame(#
#'     id = c("1", "1", "1", "1"),#
#'   date = mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y"),#
#'  value = c(4.1, 4.5, 3.3, 5.3)#
#'   )#
#' df <- df %>% mutate(datem = floor_date(date, "month"))#
#' DT %>% group_by(id) %>% mutate(lag(value, months(1), along_with = datem)) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by = NULL, units = NULL, along_with = NULL, default = NA,  ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      index <- match(along_with + period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by = NULL, units = NULL, along_with = NULL, default = NA, ...) { #
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
 }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      index <- match(along_with - period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, 1, along_with = datem, units = "month")
f
f
undebug(lag)
library(lubridate)#
date <- mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"))#
value <- c(4.1, 4.5, 3.3, 5.3)#
datem <- floor_date(date, "month")#
value_l <- lag(value, 1, along_with = datem, units = "month")
value_l
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
DT <- data.table(#
    id    = c(1, 1, 1, 1, 1, 2, 2),#
    date  =  mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992")),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
DT[, datem := floor_date(date, "month")]
DT
DT %>% group_by(id) %>% fill_gap(along_with = date, units = "month")
DT <- unique(DT, c("id", "date"))
DT <- unique(DT, by = c("id", "date"))
DT %>% group_by(id) %>% fill_gap(along_with = date, units = "month")
DT %>% group_by(id) %>% fill_gap(along_with = datem, units = "month")
?period
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#'  Add rows corresponding to gaps in some variable#
#'#
#' @param .data A tbl_dt, grouped or not#
#' @param ... Variables to keep (beyond the grouped and along_with variable). Default to all variables. See the \link[dplyr]{select} documentation.#
#' @param along_with integer variable to fill_gap#
#' @param full  A boolean. When full = FALSE (default) rows are filled with respect to min and max of \code{...} within each group. When full = TRUE, rows are filled with respect to min and max of \code{...} in the whole datasets. #
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' DT <- data.table(#
#'  id = c(1, 1, 1, 1, 1, 2, 2), #
#'  date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#')#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#' @export#
fill_gap <- function(.data, ..., along_with, units = NULL, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  fill_gap_(.data, .dots = lazyeval::lazy_dots(...), along_with = substitute(along_with), units = units, full = full, roll = roll, rollends = rollends)#
}#
#
#' @export#
#' @rdname fill_gap#
fill_gap_ <- function(.data, ..., along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  UseMethod("fill_gap_")#
}#
#
#' @export#
fill_gap_.grouped_dt <- function(.data,...,along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  byvars <- as.character(groups(.data))#
  vars <- names(select_vars_(names(.data), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data),c(byvars, along_with))#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values" ,call. = FALSE)#
  if (anyDuplicated(.data, by = c(byvars,along_with))) stop(paste0(paste(byvars, collapse = ","),", ",along_with," do not uniquely identify observations"), call. = FALSE)#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year")#
  }#
  if (!full){#
    call <- substitute(.data[, list(seq(min(t, na.rm = TRUE), max(t, na.rm = TRUE), by = units)), by = c(byvars)], list(t = as.name(along_with)))#
  } else{#
    a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    call <- substitute(.data[, list(seq.int(a, b, by = units)), by = c(byvars)], list(a = a, b = b))#
  }#
  ans  <- eval(call)#
  setnames(ans, c(byvars, along_with))#
  setkeyv(ans, c(byvars, along_with))#
  .data <- .data[, c(byvars,along_with, vars), with = FALSE]#
  setkeyv(.data, c(byvars,along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
    .data#
}#
#
#' @export#
fill_gap_.data.table <- function(.data,..., along_with, period = 1L, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  vars <- names(select_vars_(names(.data), dots))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data), along_with)#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values", call. = FALSE)#
  if (anyDuplicated(.data, by = along_with)) stop(paste(along_with,"does not uniquely identify observations"), call. = FALSE)#
  setkeyv(.data,c(along_with))#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year")#
  }#
  a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  call <- substitute(.data[, list(seq(a, b, by = units))], list(a = a, b=b))#
  ans  <- eval(call)#
  setnames(ans, c(along_with))#
  setkeyv(ans, c(along_with))#
  .data <- .data[, c(vars, along_with), with = FALSE]#
  setkeyv(.data, c(along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
  .data#
}#
#' @export#
fill_gap_.tbl_dt <- function(.data, ..., along_with, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  tbl_dt(NextMethod())#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#'  Add rows corresponding to gaps in some variable#
#'#
#' @param .data A tbl_dt, grouped or not#
#' @param ... Variables to keep (beyond the grouped and along_with variable). Default to all variables. See the \link[dplyr]{select} documentation.#
#' @param along_with integer variable to fill_gap#
#' @param full  A boolean. When full = FALSE (default) rows are filled with respect to min and max of \code{...} within each group. When full = TRUE, rows are filled with respect to min and max of \code{...} in the whole datasets. #
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' DT <- data.table(#
#'  id = c(1, 1, 1, 1, 1, 2, 2), #
#'  date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#')#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#' @export#
fill_gap <- function(.data, ..., along_with, units = NULL, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  fill_gap_(.data, .dots = lazyeval::lazy_dots(...), along_with = substitute(along_with), units = units, full = full, roll = roll, rollends = rollends)#
}#
#
#' @export#
#' @rdname fill_gap#
fill_gap_ <- function(.data, ..., along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  UseMethod("fill_gap_")#
}#
#
#' @export#
fill_gap_.grouped_dt <- function(.data,...,along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  byvars <- as.character(groups(.data))#
  vars <- names(select_vars_(names(.data), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data),c(byvars, along_with))#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values" ,call. = FALSE)#
  if (anyDuplicated(.data, by = c(byvars,along_with))) stop(paste0(paste(byvars, collapse = ","),", ",along_with," do not uniquely identify observations"), call. = FALSE)#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year"))#
  }#
  if (!full){#
    call <- substitute(.data[, list(seq(min(t, na.rm = TRUE), max(t, na.rm = TRUE), by = units)), by = c(byvars)], list(t = as.name(along_with)))#
  } else{#
    a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    call <- substitute(.data[, list(seq.int(a, b, by = units)), by = c(byvars)], list(a = a, b = b))#
  }#
  ans  <- eval(call)#
  setnames(ans, c(byvars, along_with))#
  setkeyv(ans, c(byvars, along_with))#
  .data <- .data[, c(byvars,along_with, vars), with = FALSE]#
  setkeyv(.data, c(byvars,along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
    .data#
}#
#
#' @export#
fill_gap_.data.table <- function(.data,..., along_with, period = 1L, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  vars <- names(select_vars_(names(.data), dots))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data), along_with)#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values", call. = FALSE)#
  if (anyDuplicated(.data, by = along_with)) stop(paste(along_with,"does not uniquely identify observations"), call. = FALSE)#
  setkeyv(.data,c(along_with))#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year"))#
  }#
  a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  call <- substitute(.data[, list(seq(a, b, by = units))], list(a = a, b=b))#
  ans  <- eval(call)#
  setnames(ans, c(along_with))#
  setkeyv(ans, c(along_with))#
  .data <- .data[, c(vars, along_with), with = FALSE]#
  setkeyv(.data, c(along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
  .data#
}#
#' @export#
fill_gap_.tbl_dt <- function(.data, ..., along_with, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  tbl_dt(NextMethod())#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by. When the package lubridate is loaded, it can be a period when using with along_with (see the lubridate function minutes, hours, days, weeks, months and years)#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param units. A character vector amongWhen along_with is a date.  compute lag with respect to this vector instead of previous row#
#
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # along_with#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#' # units#
#'library(lubridate)#
#'df <- data.frame(#
#'     id = c("1", "1", "1", "1"),#
#'   date = mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y"),#
#'  value = c(4.1, 4.5, 3.3, 5.3)#
#'   )#
#' df <- df %>% mutate(datem = floor_date(date, "month"))#
#' DT %>% group_by(id) %>% mutate(lag(value, months(1), along_with = datem)) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by = NULL, units = NULL, along_with = NULL, default = NA,  ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year")#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      if ("units"=="quarter"){#
        units <- "month"#
        n <- 3#
      }#
      index <- match(along_with + period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by = NULL, units = NULL, along_with = NULL, default = NA, ...) { #
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year")#
#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
 }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      if ("units"=="quarter"){#
        units <- "month"#
        n <- 3#
      }#
      index <- match(along_with - period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' lead and lag.#
#'#
#' lead and lag are useful for comparing values for date offset by a constant#
#' @param x a vector of values#
#' @param n a positive integer of length 1, giving the number of positions to lead or lag by. When the package lubridate is loaded, it can be a period when using with along_with (see the lubridate function minutes, hours, days, weeks, months and years)#
#' @param order_by override the default ordering to use another vector#
#' @param along_with  compute lag with respect to this vector instead of previous row#
#' @param units. A character vector amongWhen along_with is a date.  compute lag with respect to this vector instead of previous row#
#
#' @param default value used for non-existant rows. Defaults to \code{NA}.#
#' @examples#
#' # along_with#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, order_by = date)) # wrong#
#' DT %>% group_by(id) %>% mutate(lag(value, 1, along_with = date)) # right#
#' # units#
#'library(lubridate)#
#'df <- data.frame(#
#'     id = c("1", "1", "1", "1"),#
#'   date = mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992"), "%m/%d/%Y"),#
#'  value = c(4.1, 4.5, 3.3, 5.3)#
#'   )#
#' df <- df %>% mutate(datem = floor_date(date, "month"))#
#' DT %>% group_by(id) %>% mutate(lag(value, months(1), along_with = datem)) #
#' @name lead-lag#
NULL#
#
#' @export#
#' @rdname lead-lag#
lead <- function(x, n = 1L, order_by = NULL, units = NULL, along_with = NULL, default = NA,  ...) {#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
  }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year")#
      if ("units"=="quarter"){#
        units <- "month"#
        n <- 3#
      }#
      index <- match(along_with + period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(x[-seq_len(n)], rep(default, n))#
  }#
  attributes(out) <- attributes(x)#
  out#
}#
#' @export#
#' @rdname lead-lag#
lag.default <- function(x, n = 1L, order_by = NULL, units = NULL, along_with = NULL, default = NA, ...) { #
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  if (!is.null(order_by)) {#
    if (!is.null(along_with))  stop("order_by cannot be used with along_with")#
    return(with_order(order_by, lead, x, n = n, default = default))#
 }#
#
  if (!is.null(along_with)) {#
    if (!is.null(units)){#
      units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year")#
      if ("units"=="quarter"){#
        units <- "month"#
        n <- 3#
      }#
      index <- match(along_with - period(n, units = units), along_with, incomparable = NA)#
    } else{#
      index <- match(along_with + n, along_with, incomparable = NA)#
    }#
#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
  } else{#
    xlen <- length(x)#
    n <- pmin(n, xlen)#
    out <- c(rep(default, n), x[seq_len(xlen - n)])#
  }#
  attributes(out) <- attributes(x)#
  out#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#'  Add rows corresponding to gaps in some variable#
#'#
#' @param .data A tbl_dt, grouped or not#
#' @param ... Variables to keep (beyond the grouped and along_with variable). Default to all variables. See the \link[dplyr]{select} documentation.#
#' @param along_with integer variable to fill_gap#
#' @param full  A boolean. When full = FALSE (default) rows are filled with respect to min and max of \code{...} within each group. When full = TRUE, rows are filled with respect to min and max of \code{...} in the whole datasets. #
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' DT <- data.table(#
#'  id = c(1, 1, 1, 1, 1, 2, 2), #
#'  date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#')#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#' @export#
fill_gap <- function(.data, ..., along_with, units = NULL, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  fill_gap_(.data, .dots = lazyeval::lazy_dots(...), along_with = substitute(along_with), units = units, full = full, roll = roll, rollends = rollends)#
}#
#
#' @export#
#' @rdname fill_gap#
fill_gap_ <- function(.data, ..., along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  UseMethod("fill_gap_")#
}#
#
#' @export#
fill_gap_.grouped_dt <- function(.data,...,along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  byvars <- as.character(groups(.data))#
  vars <- names(select_vars_(names(.data), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data),c(byvars, along_with))#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values" ,call. = FALSE)#
  if (anyDuplicated(.data, by = c(byvars,along_with))) stop(paste0(paste(byvars, collapse = ","),", ",along_with," do not uniquely identify observations"), call. = FALSE)#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year"))#
  }#
  if (!full){#
    call <- substitute(.data[, list(seq(min(t, na.rm = TRUE), max(t, na.rm = TRUE), by = units)), by = c(byvars)], list(t = as.name(along_with)))#
  } else{#
    a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    call <- substitute(.data[, list(seq.int(a, b, by = units)), by = c(byvars)], list(a = a, b = b))#
  }#
  ans  <- eval(call)#
  setnames(ans, c(byvars, along_with))#
  setkeyv(ans, c(byvars, along_with))#
  .data <- .data[, c(byvars,along_with, vars), with = FALSE]#
  setkeyv(.data, c(byvars,along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
    .data#
}#
#
#' @export#
fill_gap_.data.table <- function(.data,..., along_with, period = 1L, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  vars <- names(select_vars_(names(.data), dots))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data), along_with)#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values", call. = FALSE)#
  if (anyDuplicated(.data, by = along_with)) stop(paste(along_with,"does not uniquely identify observations"), call. = FALSE)#
  setkeyv(.data,c(along_with))#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year"))#
  }#
  a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  call <- substitute(.data[, list(seq(a, b, by = units))], list(a = a, b=b))#
  ans  <- eval(call)#
  setnames(ans, c(along_with))#
  setkeyv(ans, c(along_with))#
  .data <- .data[, c(vars, along_with), with = FALSE]#
  setkeyv(.data, c(along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
  .data#
}#
#' @export#
fill_gap_.tbl_dt <- function(.data, ..., along_with, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  tbl_dt(NextMethod())#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#'  Add rows corresponding to gaps in some variable#
#'#
#' @param .data A tbl_dt, grouped or not#
#' @param ... Variables to keep (beyond the grouped and along_with variable). Default to all variables. See the \link[dplyr]{select} documentation.#
#' @param along_with integer variable to fill_gap#
#' @param units A character when along_with is a date( one of "second",  "minute", "hour", "day", "week", "month", "quarter", "year").  #
#' @param full  A boolean. When full = FALSE (default) rows are filled with respect to min and max of \code{...} within each group. When full = TRUE, rows are filled with respect to min and max of \code{...} in the whole datasets. #
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' DT <- data.table(#
#'  id = c(1, 1, 1, 1, 1, 2, 2), #
#'  date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991), #
#'  value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
#')#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date)#
#' DT %>% group_by(id) %>% fill_gap(value, along_with = date, full = TRUE)#
#' @export#
fill_gap <- function(.data, ..., along_with, units = NULL, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  fill_gap_(.data, .dots = lazyeval::lazy_dots(...), along_with = substitute(along_with), units = units, full = full, roll = roll, rollends = rollends)#
}#
#
#' @export#
#' @rdname fill_gap#
fill_gap_ <- function(.data, ..., along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  UseMethod("fill_gap_")#
}#
#
#' @export#
fill_gap_.grouped_dt <- function(.data,...,along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  byvars <- as.character(groups(.data))#
  vars <- names(select_vars_(names(.data), dots, exclude = byvars))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data),c(byvars, along_with))#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values" ,call. = FALSE)#
  if (anyDuplicated(.data, by = c(byvars,along_with))) stop(paste0(paste(byvars, collapse = ","),", ",along_with," do not uniquely identify observations"), call. = FALSE)#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year"))#
  }#
  if (!full){#
    call <- substitute(.data[, list(seq(min(t, na.rm = TRUE), max(t, na.rm = TRUE), by = units)), by = c(byvars)], list(t = as.name(along_with)))#
  } else{#
    a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
    call <- substitute(.data[, list(seq.int(a, b, by = units)), by = c(byvars)], list(a = a, b = b))#
  }#
  ans  <- eval(call)#
  setnames(ans, c(byvars, along_with))#
  setkeyv(ans, c(byvars, along_with))#
  .data <- .data[, c(byvars,along_with, vars), with = FALSE]#
  setkeyv(.data, c(byvars,along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
    .data#
}#
#
#' @export#
fill_gap_.data.table <- function(.data,..., along_with, units = NULL, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)){#
  along_with  <- names(select_vars_(names(.data), along_with ))#
  dots <- lazyeval::all_dots(.dots, ...)#
  vars <- names(select_vars_(names(.data), dots))#
  if (length(vars) == 0) {#
     vars <- setdiff(names(.data), along_with)#
  }#
  isna <- eval(substitute(.data[,sum(is.na(t))], list(t = as.name(along_with))))#
  if (isna>0) stop("Variable along_with has missing values", call. = FALSE)#
  if (anyDuplicated(.data, by = along_with)) stop(paste(along_with,"does not uniquely identify observations"), call. = FALSE)#
  setkeyv(.data,c(along_with))#
  if (is.null(units)){#
    units <-1#
  } else{#
    units <- match.arg(units, c("second", "minute", "hour", "day", "week", "month", "quarter", "year"))#
  }#
  a <- eval(substitute(.data[,min(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  b <- eval(substitute(.data[,max(t, na.rm = TRUE)], list(t = as.name(along_with))))#
  call <- substitute(.data[, list(seq(a, b, by = units))], list(a = a, b=b))#
  ans  <- eval(call)#
  setnames(ans, c(along_with))#
  setkeyv(ans, c(along_with))#
  .data <- .data[, c(vars, along_with), with = FALSE]#
  setkeyv(.data, c(along_with))#
  .data <- .data[ans,allow.cartesian=TRUE]#
  .data#
}#
#' @export#
fill_gap_.tbl_dt <- function(.data, ..., along_with, .dots, full = FALSE, roll = FALSE, rollends = if (roll=="nearest") c(TRUE,TRUE)#
             else if (roll>=0) c(FALSE,TRUE)#
             else c(TRUE,FALSE)) {#
  tbl_dt(NextMethod())#
}
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
