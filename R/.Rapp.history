traceback()
DT
DT=setDT(DT)
DT %>% mutate(mean(v1))
debug(dplyr::mutate.data.table)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% mutate(mean(v1))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate(mean(v1))
ok<-4
DT %>% mutate(mean(v1))
?parent.frame
f=function(){a<-1; eval(a,globalenv())}
f(a)
f(x)
f()
a
f=function(){a<-1; eval(a,globalenv(),globalenv())}
f()
a
?eval
f=function(){a<-1; eval(a,enclos=globalenv())
}
f()
f=function(){a<-1; eval(a,enclos=parent.frame())
}
f()
f=function(){a<-1; eval(a,envir=parent.frame())
}
f()
f=function(){a<-1; eval(a,envir=parent.frame())
)
f=function(){a<-1; eval(a,envir=parent.frame())}
f()
f=function(){a<-1; eval(a,envir=parent.frame(1))}
f()
f=function(){a<-1; eval(a,envir=parent.frame(2))}
f()
f=function(){a<-1; eval(quote(a),envir=parent.frame(2))}
f()
f=function(){a<-1; eval(quote(a),envir=parent.frame())}
f()
f=function(){a<-1; eval(quote(a))}
f()
f=function(){a<-1; eval(quote(a),parent.frame())}
f()
f=function(x){a<-1; eval(x)}#
f()
f=function(x){a<-1; eval(x)}#
f(quote(a))
f=function(x){a<-1; eval(x,parent.frame())}
f(quote(a))
a=3
library(R)
library(pryr)
subs(a)
?new.env
f=function(x){a<-1; eval(x,parent.frame())}
f=function(DT){eval(DT[,mean(a)],parent.frame())}
f(DT)
DT
f(DT[,a:=4))
f(DT[,a:=4]))
f(DT[,a:=4])
f(DT[,a:=1:N])
a
library(pryr)
pryr::call_true
DT
DT[,mean(b)]
b<-5
DT[,mean(b)]
DT %>%mutate(mean(b))
library(devtools)#
devtools::install_github("hadley/dplyr")
DT %>% mutate(mean(b))
library(dplyr)
DT %>% mutate(mean(b))
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate(mean(b))
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr")]
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr")
library(dplyr)
DT %>% mutate(mean(b))
library(dplyr)
library(data.table)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate(mean(b))
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/lazyeval")#
devtools::install_github("hadley/dplyr",vignettes=FALSE)
install_github("Rdatatable/data.table", build_vignettes=FALSE)
debtools:install_github("hadley/dplyr", build_vignettes=FALSE)
devtools:install_github("hadley/dplyr", build_vignettes=FALSE)
devtools::install_github("hadley/dplyr", build_vignettes=FALSE)
DT
library(data.table)
DT
subset
test = function(arg1,arg2, verbose=0) {   #
  r1 = mean(arg1)#
  r2 = mean(arg2)#
#
  res = (2/pi * r1 *cos(r2))#
  if (verbose>1) browser()#
  return(res)#
}
test(3,2,verbose=2)
library(data.table)
test(3,2,verbose=2)
re
test = function(arg1,arg2, verbose=0) {   #
  r1 = mean(arg1)#
  r2 = mean(arg2)#
#
  res = (2/pi * r1 *cos(r2))#
  if (verbose>1) recover()#
  return(res)#
}
test(3,2,verbose=2)
0
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
body(mutate_each)
library(dplyr)
body(mutate_each)
trace(mutate_each,quote(recover(),at=3,print=F)
)
trace(mutate_each,quote(recover()),at=3,print=F)
mutate_eacch(DT,funs(mean))
mutate_each(DT,funs(mean))
trace(mutate_each,quote(recover()),at=3)
as.list(body(mutate_each))
untrace(mutate_each)
trace(mutate_each,quote(recover()),at=4)
trace(mutate_each,quote(recover()),at=3)
as.list(body(mutate_each))
mutate_each(DT,funs(mean))
untrace(mutate_each)
browseOnce <- function() {#
  old <- getOption("error")#
  function() {#
    options(error = old)#
    browser()#
  }#
}#
options(error = browseOnce())
mutate_each(DT,funs(f))
mutate_each(DT,funs(asfew))
summarise_each(DT,funs(asfew))
f <- function(x) {#
    r <- x - g(x)#
    r#
}#
g <- function(y) {#
    r <- y * h(y)#
    r#
}#
h <- function(z) {#
    r <- log(z)#
    if (r < 10) #
        r^2 else r^3#
}
trace(h, exist=recover)
trace(h, exit=recover)
untrace(h)
trace(f, exit=recover)
f(4)
trace(f, exit=browser)
f(4)
untrace(f)
f(4)
trace(f, exit=recover)
f(4)
debug(mutate_each)
f <- function(x) {#
        r <- x - g(x)#
        r#
    }#
    g <- function(y) {#
        r <- y * h(y)#
        r#
    }#
    h <- function(z) {#
        r <- log(z)#
        if (r < 10) #
            r^2 else r^3#
    }
trace(f, exit=recover)
f(4)
trace(f, exit=entry)
trace(f, entry=recover)
?trace
f(4)
recover()
f("a")
debug(mutate_each)
mutate_each(DT,funs(mean))
debug(dplyr::mutate_each_q)
mutate_each(DT,funs(mean))
undebug(dplyr::mutate_each_q)
undebug(mutate_each)
mutate_each(DT,funs(mean))
?debug
?borwser
?browser
debug(dplyr::mutate_each_q)
debug(dplyr::mutate_each)
mutate_each(DT,funs(mean))
s
?browser
mutate_each(DT,funs(mean))
s
n
s
n
f
?browser
x <- 1#
		quote(x)
library(speedglm)
?speedlm
library(dplyr)
n_group
ngroup
n_groups
set.seed(123)
x=matrix(rnorm(10^6),10^4,100)
system.time({svd(x)})
library(data.table)#
N=2e6; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time(speedlm(v3~v2,DT) )
library(speedlm)
library(speedglm)
system.time(speedlm(v3~v2,DT) )
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
library(biglm)
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
library(data.table)#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
> system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
rm(ls())
rm(list=ls())
library(data.table)#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
rm(list=ls())
library(data.table)#
N=2e6; K=100#
set.seed(1)#
DT <- data.table(#
  id1 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id2 = sample(sprintf("id%03d",1:K), N, TRUE),      # large groups (char)#
  id3 = sample(sprintf("id%010d",1:(N/K)), N, TRUE), # small groups (char)#
  id4 = sample(K, N, TRUE),                          # large groups (int)#
  id5 = sample(K, N, TRUE),                          # large groups (int)#
  id6 = sample(N/K, N, TRUE),                        # small groups (int)#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
system.time( summary(speedlm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6,DT)) )
system.time( summary(biglm(v3~v2+id4+id5+id6+as.factor(v1),DT)) )
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
dplyr:::unique_name("dt",globalenv())
unique_name <- function(prefix,env){#
  i <- 0L#
  name <- prefix#
  while (exists(name,env)) {#
    i <- i + 1L#
    name <- paste0(prefix,as.character(i))#
    }#
  name#
}
unique_name("dt",globalenv())
unique_name23("dt",globalenv())
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
?unique_name
?dplyr:::unique_name
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
library(dplyr)
debug(filter_data.table)
debug(dplyr:::filter_data.table)
debug(dplyr::::filter_data.table)
debug(filter)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
s
n
dots_env
exists("dt",dots_env)
exists("dt1",dots_env)
unique_name("dt1",dots_env)
s
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
s
n
s
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
debug(filter)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
s
n
dt_unique
vars_unique
call
env
ls(env)
DT
v=Year
v="Year"
DT$c(v)
?assign
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
DT
DT[,3,with=FALSE]
DT[,3,with=FALSE,drop=TRUE]
?data.table
setDF(table)[,length(table)-1]
setDF(DT)[,length(DT)]
library(dplyr)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow#
[1] 173#
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==) %>% nrow
mtcars %>% filter(cyl==dt)
dt=3
mtcars %>% filter(cyl==dt)
mtcars
dt=6
mtcars %>% filter(cyl==dt)
devtools::install_github("hadley/dplyr",vignettes=FALSE)
devtools::install_github("hadley/dplyr")
library(dplyr)
dt=6#
    setDT(mtcars) %>% filter(cyl==dt)
library(data.table)
dt=6#
    setDT(mtcars) %>% filter(cyl==dt)
setDT(mtcars)
DT <- as.data.table(mtcars)
setDT(mtcars) %>% filter(cyl==dt)
DT <- as.data.table(mtcars) #
    dt=6#
   DT %>% filter(cyl==dt)
library(dplyr)
dt=6
mtcars %>% filter(cyl==dt)
mtcars %>% mutate(mean(3))
mtcars %>% mutate(mean(c(3)))
mtcars %>% mutate(mean(3))
env$`_DT` <- mtcars
`_dt`=1
env$`_dt` <- mtcars
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)#
   library(data.table)#
   DT <- as.data.table(mtcars) #
   dt <- 6#
   DT %>% filter(cyl==dt)
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
library(dplyr)#
   library(data.table)#
   DT <- as.data.table(mtcars) #
   dt <- 6#
   DT %>% filter(cyl==dt)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502) %>% nrow
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502) %>% nrow
DT = fread("\"ok\" \"1993\"\n\"ok\" \"1993\"", colClasses = c("character", "numeric"))
setnames(DT,"DayOfWeek","V1")#
 DT %>% group_by(V1) %>% filter(ArrTime==1502)
DT %>% group_by(V1) %>% filter(ArrTime==1502)
DT
DT <- as.data.table(mtcars)
DT
DT %>% group_by(V1) %>% filter(ArrTime==1502)
library(dplyr)#
library(hflights)#
library(data.table)#
DT <- as.data.table(hflights)#
DT %>% group_by(DayOfWeek) %>% filter(ArrTime==1502)
setnames(DT,"DayOfWeek","V1")
DT %>% group_by(V1) %>% filter(ArrTime==1502)
library(dplyr)
mtcars %>% mutate(mean(1))
remove.packages("dplyr")#
install.packages("dplyr")
library(dplyr)
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(c(1)))
mtcars %>% mutate(mean(1))
library(dplyr)
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(2))
mtcars %>% mutate(mean(3))
mtcars %>% mutate(mean(c(3)))
mtcars %>% mutate(3)
mtcars %>% mutate(1)
mean(3)
mtcars %>% mutate(1)
mtcars %>% mutate(mean(1))
mtcars_dt=as.data.table
mtcars_dt=as.data.table(mtcars)
mtcars_dt %>% mutate(mean(1))
library(data.table)
mtcars_dt=as.data.table(mtcars)
mtcars_dt %>% mutate(mean(1))
mtcars %>% group_by(cyl) %>% mutate(mean(1))
library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(1))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
library(dplyr)#
mtcars %>% group_by(cyl) %>% mutate(mean(2))#
as.data.table(mtcars) %>% group_by(cyl) %>% mutate(mean(1))
mtcars %>% mutate(mean(1))
library(dplyr)#
mtcars %>% mutate(mean(1))
mtcars %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) ) %>% mutate(mean(2))
library(dplyr)#
mtcars %>% mutate(mean(2))#
as.data.table(mtcars) %>% mutate(mean(2))
library(dplyr)#
as.data.table(mtcars) %>% mutate(mean(2))#
mtcars %>% mutate(mean(2))
?mutate
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
unique_name=function(prefix,env) {#
    i <- 0L#
    name <- prefix#
    while (exists(name, env)) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
unique_name("temp",DT)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
unique_name("temp",DT)
DT[,temp:=1]
unique_name("temp",DT)
temp="ok"
DT
DT[,temp:=NULL]
DT
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
tempname=function(prefix,env) {#
    i <- 0L#
    name <- prefix#
    while (exists(name, env)) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
tempname("temp",DT)
?exists
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
tempname=function(prefix,env,inherits=TRUE) {#
    i <- 0L#
    name <- prefix#
    while (exists(name, env,inherits)) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
tempname("temp",DT)
tempname("temp",DT,inherits=FALSE)
DT
tempname("temp",DT,inherits=FALSE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
tempname=function(prefix,envir = env,inherits=TRUE) {#
    i <- 0L#
    name <- prefix#
    while (exists(name, envir = env,inherits = inherits)) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
tempname("temp",DT,inherits=FALSE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
tempname=function(prefix,envir,inherits=TRUE) {#
    i <- 0L#
    name <- prefix#
    while (exists(name, envir = env,inherits = inherits)) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
tempname("temp",DT,inherits=FALSE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
tempname=function(prefix,envir,inherits=TRUE) {#
    i <- 0L#
    name <- prefix#
    while (exists(name, envir = envir,inherits = inherits)) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
tempname("temp",DT,inherits=FALSE)
exists("temp",DT)
exists("temp",envir=DT)
?exists
exists("temp",frame=DT)
exists("temp",where=DT)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
tempname=function(prefix, where, inherits=TRUE) {#
    i <- 0L#
    name <- prefix#
    while (exists(name, where = where, inherits = inherits)) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
exists("temp",where=DT)
exists("temp",where=DT,inherits=TRUE)
tempname("temp",DT)
tempname("temp",DT)
tempname("temp",names(DT))
tempname("temp",as.list(names(DT)))
tempname("temp",names(DT))
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
tempname_list=function(prefix, l) {#
    i <- 0L#
    name <- prefix#
    while (name %in% l) {#
        i <- i + 1L#
        name <- paste0(prefix, as.character(i))#
    }#
    name#
}
tempname_list("temp",names(DT))
DT[,temp:=1]
tempname_list("temp",names(DT))
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, all= FALSE, all.x=all, all.y=all, nogen=FALSE, gen="merge"){#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
if (!nogen){#
    idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
    DTm1[, c(idm) := 1L]#
    idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
    DTu1[, c(idu) := 1L]#
}#
  DT_output <- merge(DTm1, DTu1, all= all, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
df1 = data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))#
df2 = data.frame(CustomerId=c(2,4,6),State=c(rep("Alabama",2),rep("Ohio",1)))
ejoin(df1,df2,1:1)
library(string)
library(stringr)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, all= FALSE, all.x=all, all.y=all, nogen=FALSE, gen="merge"){#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
if (!nogen){#
    idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
    DTm1[, c(idm) := 1L]#
    idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
    DTu1[, c(idu) := 1L]#
}#
  DT_output <- merge(DTm1, DTu1, all= all, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
ejoin(df1,df2,1:1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, all= FALSE, all.x=all, all.y=all, nogen=FALSE, gen="merge"){#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
if (!nogen){#
    idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
    DTm[, c(idm) := 1L]#
    idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
    DTu[, c(idu) := 1L]#
}#
  DT_output <- merge(DTm, DTu, all= all, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
ejoin(df1,df2,1:1)
df1
df2
ejoin(df1,df2,1:1,all=TRUE)
?merge
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, all = TRUE, all.x = all, all.y = all, nogen=FALSE, gen="merge"){#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
if (!nogen){#
    idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
    DTm[, c(idm) := 1L]#
    idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
    DTu[, c(idu) := 1L]#
}#
  DT_output <- merge(DTm, DTu, all= all, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
ejoin(df1,df2,1:1,all=TRUE)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
if (!nogen){#
    idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
    DTm[, c(idm) := 1L]#
    idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
    DTu[, c(idu) := 1L]#
}#
  DT_output <- merge(DTm, DTu, all= all, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  print(keep)#
}
ejoin(df1,df2,1:1,all=TRUE)
ejoin(df1,df2,1:1)
?merge
?merge
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if !(keep %in% c("master","matched","using")){#
    stop(`keep must be a character vector of the form c("master","matched","using")`)#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if !(matched %in% keep){#
     DT_output <- DT_output[idm == 1L & idu == 1L]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if !(keep %in% c("master","matched","using")){#
    stop(`keep must be a character vector of the form c("master","matched","using")`)#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if !(keep %in% c("master","matched","using")){#
    stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  }#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (!keep %in% c("master","matched","using")){#
    stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  }#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (!keep %in% c("master","matched","using")){#
    stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  }#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if !(matched %in% keep){#
     DT_output <- DT_output[idm == 1L & idu == 1L]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (!keep %in% c("master","matched","using")){#
    stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  }#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!matched %in% keep){#
     DT_output <- DT_output[idm == 1L & idu == 1L]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (!keep %in% c("master","matched","using")){#
    stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  }#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!matched %in% keep){#
     DT_output <- DT_output[idm ~= 1L | idu ~= 1L]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (!keep %in% c("master","matched","using")){#
    stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  }#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!matched %in% keep){#
     DT_output <- DT_output[!(idm == 1L | idu == 1L)]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
ejoin(df1,df2,1:1)
c("master", "matched", "using") %in%  c("master", "matched", "using")
c("master", "matched", "using") %in%  c("master", "matched", "using")
setdiff(c("master", "matched",  c("master", "matched", "using"))
)
setdiff(c("master", "matched"),  c("master", "matched", "using"))
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (!length(setdiff(keep,c("master","matched","using")))    stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!"matched" %in% keep){#
     DT_output <- DT_output[!(idm == 1L | idu == 1L)]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (!length(setdiff(keep,c("master","matched","using")))) stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!"matched" %in% keep){#
     DT_output <- DT_output[!(idm == 1L | idu == 1L)]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
ejoin(df1,df2,1:1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (length(setdiff(keep,c("master","matched","using")))) stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!"matched" %in% keep){#
     DT_output <- DT_output[!(idm == 1L | idu == 1L)]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
    eval(substitute(print(table(DT_output$v)), list(v= as.name(gen))))#
  }#
  DT_output#
}
ejoin(df1,df2,1:1)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (length(setdiff(keep,c("master","matched","using")))) stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!"matched" %in% keep){#
     DT_output <- DT_output[!(idm == 1L | idu == 1L)]#
   }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
  }#
  DT_output#
}
ejoin(df1,df2,1:1)
ejoin(df1,df2,1:1,keep="master")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (length(setdiff(keep,c("master","matched","using")))) stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!"matched" %in% keep){#
     eval(substitute(DT_output <- DT_output[!(v1 == 1L | v2 == 1L)],list(v1=as.name(idm),v2=as.name(idu))))#
  }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
  }#
  DT_output#
}
ejoin(df1,df2,1:1,keep="master")
ejoin(df1,df2,1:1)
df1
df2
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#
ejoin =  function(DTm, DTu, type, keep = c(c("master","matched","using")), nogen = FALSE, gen = "merge"){#
  all.x <- FALSE#
  all.y <- FALSE#
  if (length(setdiff(keep,c("master","matched","using")))) stop("keep must be a character vector of the form c(\"master\",\"matched\",\"using\")")#
  if ("master" %in% keep){#
    all.x = TRUE#
  }#
  if ("using" %in% keep){#
    all.y = TRUE#
  }#
  if (!is.data.table(DTm)){#
    setDT(DTm)#
    message("Master coerced to data.table")#
  }#
  if (!is.data.table(DTu)){#
    setDT(DTu)#
    message("Using coerced to data.table")#
  }#
#
  typec <- paste(as.character(substitute(type)), collapse = "")#
  if (!nogen){#
    if (gen %chin% names(DTm)){#
      stop(paste0(gen," alreay exists in master"))#
    }#
    if (gen %chin% names(DTu)){#
      stop(paste0(gen," alreay exists in using"))#
    }#
  }#
#
  var=intersect(names(DTm), names(DTu))#
  message(paste0("Join based on : ", paste(var, collapse = " ")))#
  match <- stringr::str_match(typec,":(1|m)(1|m)")#
  if (is.na(match[1,1])) stop("Third argument must be 1:1,1:m, m:1 or m:m")#
  if (match[1,2] == "1"){#
    if (anyDuplicated(DTm)){ #
      stop("Variables don't uniquely identify observations in the master dataset")#
    }#
  }#
#
  if (match[1,3] == "1"){#
    if (anyDuplicated(DTu)){ #
      stop("Variables don't uniquely identify observations in the using dataset")#
    }#
  }#
#
  setkeyv(DTm, cols = var)#
  setkeyv(DTu, cols = var)#
  message(paste0("Master and using datasets are now keyed by : ", paste(var, collapse = " ")))#
#
  idm <- tempname_list("temp", c(names(DTm),names(DTu),gen))#
  DTm[, c(idm) := 1L]#
  idu <- tempname_list("temp", c(names(DTm),names(DTu),gen,idm))#
  DTu[, c(idu) := 1L]#
#
  DT_output <- merge(DTm, DTu, all.x= all.x, all.y= all.y, allow.cartesian= TRUE)#
  if (!"matched" %in% keep){#
     eval(substitute(DT_output <- DT_output[!(v1 == 1L & v2 == 1L)],list(v1=as.name(idm),v2=as.name(idu))))#
  }#
#
  if (!nogen){#
    DT_output[, c(gen) := 3L]#
    eval(substitute(DT_output[is.na(v), c(gen) := 1L],list(v=as.name(idu))))#
    eval(substitute(DT_output[is.na(v), c(gen) := 2L],list(v=as.name(idm))))#
    DT_output[, c(idm) := NULL]#
    DT_output[, c(idu) := NULL]#
    DTm[, c(idm) := NULL]#
    DTu[, c(idu) := NULL]#
  }#
  DT_output#
}
ejoin(df1,df2,1:1)
ejoin(df1,df2,1:1,keep="matched")
f=function(DT){setkeyv(DT,"CustomerId");DT[,c(ok):=1]}
f(df1)
f=function(DT,ok){setkeyv(DT,"CustomerId");DT[,c(ok):=1]}
f(df1,"ok")
f=function(DT,ok){DT[,c(ok):=1]}
f(df1,"ok")
f=function(DT,v){eval(substitute(DT[,c(v):=1],list(v=as.name(x))))}
f(df1,"ok")
f=function(DT,x){eval(substitute(DT[,c(v):=1],list(v=as.name(x))))}
f(df1,"ok")
f=function(DT,x){eval(substitute(DT[,v:=1],list(v=as.name(x))))}
f(df1,"ok")
DT
f=function(DT){DT[,ok:=1]}
f(DT)
f=function(DT,ok){DT[,c(ok):=1]}
f(df1,"ok")
f(DT,"ok")
df1
f(df1,"ok")
df1 = data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))
f=function(df,x){setDT(df)}
f(df1)
df1
is.data.table(df1)
df1[,ok:=1]
library(data.table)#
df=data.frame(id = 1:10)#
f=function(df){setDT(df)}#
df1[, temp := 1]
library(data.table)#
df=data.frame(id = 1:10)#
f=function(df){setDT(df)}#
f(df)#
df[,temp:=1]
library(data.table)#
    df=data.frame(id = 1:10)#
    setDT(df)#
    f(df)#
    df[,temp:=1]
library(data.table)#
df=data.frame(id = 1:10)#
f=function(df){setDT(df)}#
f(df)
df[,temp:=1]
github
sessionInfo()
library(data.table)
library(data.table)#
df=data.frame(id = 1:10)#
f=function(df){setDT(df)}#
f(df)
df[,temp:=1]
library(data.table)#
df=data.frame(id = 1:10)#
f=function(df){setDT(df)}#
f(df)#
df[, temp := 1]
ejoin(df1,df2,1:1,keep="master")
ejoin(df1,df2,1:1,keep="master matched")
ejoin(df1,df2,1:1,keep=c("master","matched"))
ejoin(df1,df2,1:1,keep=c("using","matched"))
ejoin(df1,df2,1:1,keep=c("matched"))
tempname
exists
?exists
tempname <- tempname("temp", globalenv())
