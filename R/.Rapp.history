s
dots
n
dots
match("inplace",dots)
match("inplace",names(dots))
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
DT %>% select(v1,inplace = TRUE)
library(dplyr)
DT %>% select(v1,inplace = TRUE)
s
]]]]]
f
ff
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% select(v1,inplace = TRUE)
DT
DT %>% select(v1,inplace = TRUE)
s
f
library(plyr)
suppressMessages(library("data.table"))
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1,inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(mean, inplace = TRUE)
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT %>% mutate_each(funs(mean))
DT
DT %>% mutate(mean(v1),inplace=TRUE)
DT
debug(mutate_each)
DT %>% mutate_each(funs(mean))
s
f
n
s
n
dots
f
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
DT %>% mutate_each(funs(mean),inplace=TRUE)
s
n
s
n
vars
vars$inplace
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
library(dplyr)
DT %>% mutate_each(funs(mean),inplace=TRUE)
n
library(dplyr)
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
suppressMessages(library("dplyr"))
suppressMessages(library("data.table"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
#sink.reset
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
vars
DT %>% mutate_each(funs(mean), inplace = TRUE)
debug(mutate_each)
DT %>% mutate_each(funs(mean), inplace = TRUE)
s
f
n
vars
length(TRUE)
is.atomic(TRUE)
is.atomic(c(TRUE.TRUE))
is.atomic(c(TRUE,TRUE))
dots
l=llist(1="ok")
l=list(1="ok")
l=list(ok = "ok")
l$NA
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
suppressMessages(library("data.table"))
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean))
DT
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
install.packages("/Users/Matthieu/Dropbox/Github/dplyr", repos = NULL, type="source")
suppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean), inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% mutate_each(funs(mean), inplace = FALSE)
DT
DT %>% select(v2, inplace = FALSE)
library(dpsuppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
suppressMessages(library("tidyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT %>% select(v1)
DT
DT %>% select(v1, inplace = TRUE)
DT
#' Gives summary statistics (Stata command summarize)#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude in s You can use same specifications as in select. If missing, defaults to all non-grouping variables.#
#' @param inplace Change data.table in place or not#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 =  sample(5, N, TRUE),                          #
#'   v2 =  sample(1e6, N, TRUE),                       #
#'   v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) #
#' )#
#' DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#' @export#
colorder <- function(.data, ..., inplace = FALSE) {#
  colorder_(.data, vars = lazyeval::lazy_dots(...) , inplace = inplace)#
}#
#' @export#
colorder_ <- function(.data, vars, inplace = FALSE ) {#
  if (length(vars) == 0) {#
     vars <- lazyeval::lazy_dots(everything())#
   }#
  vars <- select_vars_(tbl_vars(.data), vars)#
  if (!inplace) .data <- copy(.data)#
  setcolorder(.data,vars,setdiff(names(.data),vars))#
  .data#
}
DT  %>% colorder(starts_with("v"), inplace = TRUE)
#' Gives summary statistics (Stata command summarize)#
#' #
#' @param DT A tbl_dt or tbl_grouped_dt.#
#' @param ... Variables to include/exclude in s You can use same specifications as in select. If missing, defaults to all non-grouping variables.#
#' @param inplace Change data.table in place or not#
#' @examples#
#' library(data.table)#
#' library(dplyr)#
#' N <- 100; K <- 10#
#' DT <- data.table(#
#'   id = 1:N,#
#'   v1 =  sample(5, N, TRUE),                          #
#'   v2 =  sample(1e6, N, TRUE),                       #
#'   v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) #
#' )#
#' DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#' @export#
colorder <- function(.data, ..., inplace = FALSE) {#
  colorder_(.data, vars = lazyeval::lazy_dots(...) , inplace = inplace)#
}#
#' @export#
colorder_ <- function(.data, vars, inplace = FALSE ) {#
  if (length(vars) == 0) {#
     vars <- lazyeval::lazy_dots(everything())#
   }#
  vars <- select_vars_(tbl_vars(.data), vars)#
  if (!inplace) .data <- copy(.data)#
  setcolorder(.data,c(vars,setdiff(names(.data),vars)))#
  .data#
}
DT  %>% colorder(starts_with("v"), inplace = TRUE)
DT
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
DT  %>% colorder(starts_with("v"), inplace = TRUE)
DT
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(dplyr)#
library(statar)#
#
N=1e6; K=100#
set.seed(1)#
DT <- data.table(#
      id = 1:N,#
      v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
      v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
      v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
    )#
#
### quantile category (=Stata xtile)#
DT %>% group_by(v1) %>% mutate(xtile(v2, nq = 3))#
DT %>% group_by(v1) %>% mutate(xtile(v2, cutpoints = c(1e5,5e5) ))
DT %>% group_by(id) %>% mutate(lag(value, order_by = time)) # Balanced dataset#
DT %>% group_by(id) %>% mutate(lag(value, along_with = time)) # Unbalanced dataset
DT %>% group_by(id) %>% mutate(lag(value, order_by = time)) # Balanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, order_by = time)) # Balanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, along_with = time)) # Unbalanced dataset
DT %>% group_by(id) %>% mutate(lag(v2, order_by = v1))
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
library(data.table)#
#
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
### col_order (= Stata order)#
DT  %>% col_order(starts_with("v"))#
DT  %>% col_order(starts_with("v"), inplace = TRUE)#
#
### sum_up (= Stata summarize)#
DT  %>% sum_up#
DT  %>% sum_up(v3, d=T)#
DT  %>% filter(v1==1) %>% sum_up(starts_with("v"))#
#
### expand (= Stata tsfill)#
DT <- data.table(#
 id = c(1, 1, 1, 1, 1, 2, 2),#
 date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% group_by(id) %>% expand(date)#
DT %>% expand(date)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?spread
?gather
library(tidyr)
?gather
stocks <- data.frame(#
  time = as.Date('2009-01-01') + 0:9,#
  X = rnorm(10, 0, 1),#
  Y = rnorm(10, 0, 2),#
  Z = rnorm(10, 0, 4)#
)
stocks
socks %>% gather(type, price)
library(dplyr)
socks %>% gather(type, price)
stocks %>% gather(type, price)
DT_long <- DT_wide %>% gather(variable, value, -time)
DT_long <- stocks %>% gather(variable, value, -time)
DT_long
DT_long <- DT_wide %>% spread (variable, value, -time)
DT_wide <- DT_long %>% spread (variable, value, -time)
?spread
DT_wide <- DT_long %>% spread(variable, value, -time)
DT_wide <- DT_long %>% spread(variable, value)
DT_wide
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0)))
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0))
library(data.table)
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2(4.5,3.0))
DT_wide <- data.table (i=c(1,2), stub1=c(4.1,4.5), stub2=c(4.5,3.0))
DT_wide
DT_wide %>% gather(variable, value, -i)
DT_long <- DT_wide %>% gather(variable, value, -i)
DT_long %>% spread(variable, value)
assignInNamespace("cedta.override", c(data.table:::cedta.override,"IRkernel#
                                      "), "data.table")
showMethods(expand)
library(matrix)
showMethods(expand)
library(Matrix)
showMethods(expand)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(statar)
library(data.table)
?hour
library(matrix)
library(Matrix)
?expand
showMethods(Matrix)
is.object(expand) & !isS4(expand)
is.object(expand
)
!isS4(expand)
isS4(expand)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
library(lubridate)
weeks
months
months(1)
years(1)
years
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
library(biglm)#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
?expand
?expand_
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
lag
?lag
?lead
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
library(biglm)#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))
?lag
?lead
?expand
?xtile
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
?sum_up
library(statar)
?sum_up
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
library(statar)
?sum_up
library(statar)
?sum_up
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
lead_along <- function(x, n = 1L, units = NULL, date, default = NA) {#
  if (!is.null(units)) {#
    if (is.null(date)) stop("units cannot be used without order_by")#
    unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
    date_origin <- as.Date('0001-01-01')#
    if (unitsc=="day"){#
      return(lead_along(x = x, n = n, default = default, date = along))#
    }#
    if (unitsc == "week"){#
      date_elapsed <- as.period(date-date_origin)  %/% weeks(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    }  #
    else if (unitsc == "month"){#
      date_elapsed <- as.period(date-date_origin)  %/% months(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    } else if (unitsc == "quarter"){#
      date_elapsed <- as.period(date-date_origin)  %/% 3*months(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    } else if (unitsc == "year"){#
      date_elapsed <- as.period(date-date_origin)  %/% years(1)#
      return(lead_along(x = x, n = n, default = default, date = date_elapsed))#
    }#
  }#
#
  if (n == 0) return(x)#
  if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
  index <- match(date + n, date, incomparable = NA)#
  out <- x[index]#
  if (!is.na(default)) out[which(is.na(index))] <- default#
  attributes(out) <- attributes(x)#
  out#
}
lag_along <- function(x, n = 1L,  units = NULL, date = NULL, default = NA) {#
    if (!is.null(units)) {#
      if (is.null(date)) stop("units cannot be used without order_by")#
      unitsc <-match.arg(units,c("day","week","month","quarter","year"))#
      date_origin <- as.Date('0001-01-01')#
      if (unitsc=="day"){#
        return(lag_along(x = x, n = n, default = default, date = along))#
      }#
      if (unitsc == "week"){#
        date_elapsed <- as.period(date-date_origin)  %/% weeks(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      }  #
      else if (unitsc == "month"){#
        date_elapsed <- as.period(date-date_origin)  %/% months(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      } else if (unitsc == "quarter"){#
        date_elapsed <- as.period(date-date_origin)  %/% 3*months(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      } else if (unitsc == "year"){#
        date_elapsed <- as.period(date-date_origin)  %/% years(1)#
        return(lag_along(x = x, n = n, default = default, date = date_elapsed))#
      }#
    }#
#
    if (n == 0) return(x)#
    if (n < 0 || length(n) > 1) stop("n must be a single positive integer")#
    index <- match(date - n, date, incomparable = NA)#
    out <- x[index]#
    if (!is.na(default)) out[which(is.na(index))] <- default#
    attributes(out) <- attributes(x)#
    out#
  }
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
date := as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%y")
date = as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%y")
date+1
date
date = as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%y")
date
?as.Date
date = as.Date(c("01/03/1992", "03/04/1992", "05/05/1992", "21/08/1992"), "%m/%d/%Y")
date
devtools::install_github("matthieugomez/tidyr")#
devtools::install_github("matthieugomez/lazyeval")#
devtools::install_github("matthieugomez/dplyr")#
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
library(dplyr)#
library(data.table)#
library(statar)#
#
# partition creates quantile categories (corresponds to Stata xtile)#
v2 <-   sample(1e6, 1e6, TRUE)                   #
v2_categorized <- partition(v2, nq = 3) # 3 groups based on terciles#
v2_categorized <- partition(v2, cutpoints = c(1e5, 5e5)) # 3 groups based on two cutpoints#
# lag/lead create lag/lead variables (corresponds to Stata L. F.)#
## unbalanced panel#
DT <- data.frame(#
 date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
 value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% mutate(lag(value, 1, order_by = date)) # wrong#
DT %>% mutate(lag(value, 1, along_with = date)) # right#
#
## periods can be used instead of integers#
library(lubridate)#
df <- data.frame(     #
   id = c("id1", "id1", "id1", "id1"),#
   date = mdy(c("03/01/1992", "04/03/1992", "07/15/1992", "08/21/1992")),#
   value = c(4.1, 4.5, 3.3, 5.3)#
)#
df <- df %>% mutate(date = floor_date(date, "month"))#
df %>% group_by(id) %>% mutate(lag(value, months(1), along_with = date))
?data.table::lag
?lag
library(data.table)
library(dplyr)
lead_lag <- function(x, k=0){ ifelse( k<0, lag(x, -k), lead(x, k) ) }#
#
DT <- data.table(#
   id = c(1, 1, 1, 1, 1, 2, 2),#
   date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
   value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
#
R> DT#
   id date value#
1:  1 1992   4.1#
2:  1 1989   4.5#
3:  1 1991   3.3#
4:  1 1990   5.3#
5:  1 1994   3.0#
6:  2 1992   3.2#
7:  2 1991   5.2#
R> DT %>% group_by(id) %>% mutate( lead_lag(value,1) )#
Source: local data table [7 x 4]#
Groups: id#
#
  id date value lead_lag(value, 1)#
1  1 1992   4.1                4.5#
2  1 1989   4.5                4.5#
3  1 1991   3.3                4.5#
4  1 1990   5.3                4.5#
5  1 1994   3.0                4.5#
6  2 1992   3.2                5.2#
7  2 1991   5.2                5.2#
R>
lead_lag <- function(x, k=0){ ifelse( k<0, lag(x, -k), lead(x, k) ) }#
#
DT <- data.table(#
   id = c(1, 1, 1, 1, 1, 2, 2),#
   date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
   value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
#
DT#
   id date value#
1:  1 1992   4.1#
2:  1 1989   4.5#
3:  1 1991   3.3#
4:  1 1990   5.3#
5:  1 1994   3.0#
6:  2 1992   3.2#
7:  2 1991   5.2#
DT %>% group_by(id) %>% mutate( lead_lag(value,1) )#
Source: local data table [7 x 4]#
Groups: id#
#
  id date value lead_lag(value, 1)#
1  1 1992   4.1                4.5#
2  1 1989   4.5                4.5#
3  1 1991   3.3                4.5#
4  1 1990   5.3                4.5#
5  1 1994   3.0                4.5#
6  2 1992   3.2                5.2#
7  2 1991   5.2                5.2#
R>
lead_lag <- function(x, k=0){ ifelse( k<0, lag(x, -k), lead(x, k) ) }#
#
DT <- data.table(#
   id = c(1, 1, 1, 1, 1, 2, 2),#
   date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
   value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)
R> DT %>% group_by(id) %>% mutate( lead_lag(value,1) )
DT %>% group_by(id) %>% mutate( lead_lag(value,1) )
DT %>% group_by(id) %>% mutate( lead_lag(value,1,order_by(date)) )
debug(lead_lag)
DT %>% group_by(id) %>% mutate( lead_lag(value,1,order_by(date)) )
DT %>% group_by(id) %>% mutate( lead_lag(value,1)) )
DT %>% group_by(id) %>% mutate( lead_lag(value,1))
s
n
s
debug(lead_lag)
lead_lag(DT$value,1)
s
f
lead_lag(value,1)
s
f
undebug(lead_lag)
lead_lag <- function(x, k=0){ ifelse( k<0, lag(x, -k), lead(x, k) ) }
lead_lag(c(1,2),k=1)
lag(c(1,2),n=1)
sign(k){if (k>0){function(x){lag(x,k)}else{function(x){lead(x,k)}
sign(k){if (k>0){function(x){lag(x,k)}else{function(x){lead(x,k)}}
lead_lag(k) <- function{if (k>0){function(x){lag(x,k)}else{function(x){lead(x,k)}}
lead_lag(k) <- function(k){if (k>0){function(x){lag(x,k)}else{function(x){lead(x,k)}}
lead_lag(k) <- function(k){if (k>0){function(x){lag(x,k)}}else{function(x){lead(x,k)}}
}
lead_lag <- function(k){if (k>0){function(x){lag(x,k)}}else{function(x){lead(x,k)}}}
lea_lag(3)(c(1,2)
_
lea_lag(3)(c(1,2))
lead_lag(3)(c(1,2))
lead_lag(1)(c(1,2))
?ifelse
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE),#
  v3 = sample(round(runif(100,max=100), 4), N, TRUE)#
  )#
#
# colorder (= Stata order)#
DT  %>% colorder(starts_with("v"))#
DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#
# sum_up (= Stata summarize)#
DT  %>% sum_up#
DT  %>% sum_up(v3, d=T)#
DT  %>% filter(v1==1) %>% sum_up(starts_with("v"))
library(statar)
N=1e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 = sample(5, N, TRUE),#
  v2 = sample(1e6, N, TRUE),#
  v3 = sample(round(runif(100,max=100), 4), N, TRUE)#
  )#
#
# colorder (= Stata order)#
DT  %>% colorder(starts_with("v"))#
DT  %>% colorder(starts_with("v"), inplace = TRUE)#
#
# sum_up (= Stata summarize)#
DT  %>% sum_up#
DT  %>% sum_up(v3, d=T)#
DT  %>% filter(v1==1) %>% sum_up(starts_with("v"))
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
suppressMessages(library("data.table"))#
suppressMessages(library("biglm"))#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT[, condition := id>100]#
system.time(DT[ id >100, coefficients(biglm(v3 ~ v2 + v1, .SD)), .SDcols = c("v1","v2","v3")])#
system.time(DT[, coefficients(biglm(v3 ~ v2 + v1, .SD)), by = "condition", .SDcols = c("v1","v2","v3")])#
system.time(coefficients(biglm(v3 ~ v2 + v1, DT[id>100, c("v1","v2","v3"), with = FALSE])
)
suppressMessages(library("data.table"))#
suppressMessages(library("biglm"))#
N=1e7; K=100#
set.seed(1)#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
DT[, condition := id>100]
system.time(DT[, coefficients(biglm(v3 ~ v2 + v1, .SD)), by = condition, .SDcols = c("v1", "v2", "v3")])
library(Matrix)
?expand
isS4(expand)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
?expand
DT <- data.table(#
    id = c(1, 1, 1, 1, 1, 2, 2),#
    date = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
    value = c(4.1, 4.5, 3.3, 5.3, 3.0, 3.2, 5.2)#
)#
DT %>% expand(date)
library(dpryr)
devtools::document("/Users/Matthieu/Dropbox/Github/statar-package")
devtools::install_github("matthieugomez/statar")
?lag
lag
devtools::install_github("smbache/magrittr")
library(magrittr)
rnorm(100) %T>%#
  plot(type = "l", col = "firebrick") %>%#
  abs %>%#
  sum
tmp :=#
  subset(Species == "setosa") %>%#
  set_names(LETTERS[1:5])
install.packages("colorout")
download.file("http://www.lepem.ufc.br/jaa/colorout_1.0-3.tar.gz", destfile = "colorout_1.0-3.tar.gz")#
install.packages("colorout_1.0-3.tar.gz", type = "source", repos = NULL)
savehistory
savehistory(ok)
savehistory("ok")
savehistory("~/.R.app.history")
savehistory()
fefe
savehistory()
library(pryr)
N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )
DT
DF
DT <- setDF(DF)
library(data.table)
DT <- setDF(DF)
DT
DT1 <- copy(DT)
object_size(DT,DT1)
object_size(DT)
object_size(DT,DT1)
object_size(DT,DT1, merge(DT,DT1)
)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2)]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
}
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	17.4 kB#
	object_size(DF, DF3)#
	25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF3)#
	#> 25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
q
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF3)#
	#> 25.9 kB#
	object_size(DF,DF3, merge(DF,DF3)
)
library(pryr)#
	N <- 1e3#
	DF <- data.frame(#
	  id = sample(c("id01","id02","id03"), N, TRUE),     #
	  v1 = sample(5, N, TRUE),                          #
	  v2 =  sample(round(runif(100, max = 100),4), N, TRUE) #
	  )#
	DF1 <- DF$v1#
	DF2 <- DF[1:(5e2),]#
	object_size(DF, DF1)#
	#> 17.4 kB#
	object_size(DF, DF2)#
	#> 25.9 kB#
	object_size(DF,DF2, merge(DF,DF2)
)
library(tidyr)
?gather
DTx <- data.table (#
  gvkey = c("2222","2222"), #
  permno = c("20990", "20980"), #
  year_min = c(1991,2000), #
  year_max = c(1999, 2001)#
)
debugdebug(mutate)
debug(mutate)
library(dplyr)
DT <- data.table ( id = 1:10)
mutate(DT, mean(id))
debug(mutate)
DT <- data.table ( id = 1:10)
mutate(DT, mean(id))
s
n
?forder
DT
DT[1, id:= NA]
DT
forder(DT,id)
DT[order(id)]
setorder(DT,id)
DT
?setorder
suppressMessages(library("tidyr"))#
suppressMessages(library("dplyr"))#
suppressMessages(library("data.table"))#
suppressMessages(library(lazyeval))#
suppressMessages(library("dplyr"))#
suppressMessages(library("reshape2"))#
suppressMessages(library("ggplot2"))#
suppressMessages(library("stringr"))#
suppressMessages(library("lubridate"))#
suppressMessages(library("pryr"))#
suppressMessages(library("lfe"))#
suppressMessages(library("biglm"))#
suppressMessages(library("foreign"))#
suppressMessages(library("stargazer"))#
suppressMessages(library("parallel"))#
suppressMessages(library("statar"))#
assignInNamespace("cedta.override",#
                  c(data.table:::cedta.override,"IRkernel"),#
                  "data.table")
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
result1 <- felm( v4 ~ v2 + v1, DT )#
result2 <- felm( v3 ~ v2 + v1, DT )#
result3 <- felm( v4 ~ v3 + v1 |0| (v3 ~ v2) |0, DT )
ivreg
library(aer)
library(AER)
ivreg(v3~v1,DT)
?ivreg
ivreg(v3~v2 | v1,DT)
ivreg(v3 ~ v2 | v1,D T)
ivreg(v3 ~ v2 | v1, DT)
?ivreg
ivreg(v3 ~ v2 | v1, DT)
ivreg(v3 ~ v2 | v1, date = DT)
ivreg(v3 ~ v2 | v1, data = DT)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
   v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1~v2|0|(v2~v3)|0, df)
library("lfe")#
N <- 1e6#
df <- data.frame(#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100, max = 100), 4), N, TRUE) # numeric e.g. 23.5749#
)#
felm(v1 ~ v2 | 0 | (v2 ~ v3) |0, df)
felm(v1 ~ v2 | 0 | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |, df)
felm(v1 ~ v2 |  | (v2 ~ v3) |0, df)
felm(v1 ~ v2 |  | (v2 ~ v3), df)
felm(v1 ~ v2 |0| (v2 ~ v3), df)
l= c("col1","some","col3")
l[c(1,NA)]
l[c(1,NA)] <- c("col11","col12")
l[c(TRUE,NA)] <- c("col11","col12")
l[l=="col1"] <- c("col11","col12")
l=="col1"
l <- c("col1", NA, "col3")#
l[l==col1] <- c("col1")
l <- c("col1", NA, "col3")#
l[l == "col1"] <- c("col1")
l
condition = l== "col1"
condition
l[condition] <- c("col1")
l[c(TRUE,NA,FALSE) <- c("col1")
)
l[c(TRUE,NA,FALSE)] <- c("col1")
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(l == "col1")
]
l <- c("col1", NA, "col3")#
condition = l== "col1"#
l[condition] <- c("col1")#
l[l == "col1"] <- c("col1")#
l[which(condition)] <- c("col1")
l
l[NA,1]
l[c(NA,1)]
l <- c("col1", "col2", "col3")#
    l[c(NA,1)]
l[c(TRUE, NA, TRUE)]
l[c(NA, TRUE)]
l <- c("col1", NA, "col3")#
	l[which(l == "col1" | l == "col3")]
l <- c("col1", NA, "col3")#
	l[l == "col1"]
l[which(l == "col1")]
DT
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
library(data.table)
lm(v2~v1,DT)
N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)
lm(v2~v1,DT)
result <- lm(v2~v1,DT)
names(result)
result$coefficients
result$model
result
names(result)
summary(result)
list(summary(result))
names(summary(result))
result <- felm(v2~v1,DT)
library(lfe)
result <- felm(v2~v1,DT)
names(result)
names(result)$se
result$se
result$coefficients
result$robustvcv
summary(result)
names(summary(result))
?summary
object_size(summary(result))
library(pryr)
object_size(summary(result))
object_size(result)
result <- lm(y ~ x)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- lm(v3 ~ v2, DT)
pryr::object_size(results)
pryr::object_size(result)
pryr::object_size(summary(results))
pryr::object_size(summary(result))
names(result)
result$coefficients
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2, DT)
vcov(result)
result
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|||v1, DT)
result <- lm(y ~ x)N=2e6; K=100#
DT <- data.table(#
  id = 1:N,#
  v1 =  sample(5, N, TRUE),                          # int in range [1,5]#
  v2 =  sample(1e6, N, TRUE),                        # int in range [1,1e6]#
  v3 =  sample(round(runif(100,max=100),4), N, TRUE), # numeric e.g. 23.5749#
  v4 =  sample(round(runif(100,max=100),4), N, TRUE) # numeric e.g. 23.5749#
)#
#
result <- felm(v3 ~ v2|0|0|v1, DT)
names(result)
vcov(result)
result$vcv
result$robustvcv
object_size(results)
object_size(result)
result <- felm(v3~v2|0|0|v1, DT)
stargazer(result, type = "text")
library(stargazer)
stargazer(result, type = "text")
devtools::install_github("matthieugomez/statar")
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' fill NA based on non missing observations#
#'#
#' @param .data a data.table #
#' @param ... variables to fill in. Default to every variable except grouped and order_by#
#' @param order_by a variable along with observations should be filled#
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @param inplace Should the variable modified in place ? Default to FALSE.#
#' @examples#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date)#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date, inplace = TRUE)#
#' @name fill_na#
NULL#
#
#' @export#
#' @rdname fill_na#
fill_na <- function(.data, ..., order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	fill_na_(.data, .dots = lazy_dots(...), order_by = lazy(order_by), roll = TRUE, rollends = rollends, inplace = inplace)#
}#
#
#' @export#
#' @rdname fill_na#
fill_na_ <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  UseMethod("fill_na_")#
}#
#' @export#
fill_na_.grouped_dt  <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	byvars <- as.character(groups(.data))#
	order_by <- lazyeval::all_dots(order_by)#
	order_by <- names(select_vars_(names(.data), order_by$expr))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), c(byvars, order_by))#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(byvars, order_by))#
	for (col in vars){	#
    eval(substitute(.data2[, (col) := .data2[!is.na(x), c(byvars, order_by, col), with = FALSE ][.data2, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#
#' @export#
fill_na_.data.table <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), order_by)#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(order_by))#
	for (col in vars){	#
    eval(substitute(.data2[, (col) := .data2[!is.na(x), c(order_by, col), with = FALSE ][.data2, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#' @export#
fill_na_.tbl_dt <- function(.data, ..., .dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  tbl_dt(NextMethod(), copy = FALSE)#
}
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
library(data.table)
library(dplyr)
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
library(lazyeval)
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' fill NA based on non missing observations#
#'#
#' @param .data a data.table #
#' @param ... variables to fill in. Default to every variable except grouped and order_by#
#' @param order_by a variable along with observations should be filled#
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @param inplace Should the variable modified in place ? Default to FALSE.#
#' @examples#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date)#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date, inplace = TRUE)#
#' @name fill_na#
NULL#
#
#' @export#
#' @rdname fill_na#
fill_na <- function(.data, ..., order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	fill_na_(.data, .dots = lazy_dots(...), order_by = lazy(order_by), roll = TRUE, rollends = rollends, inplace = inplace)#
}#
#
#' @export#
#' @rdname fill_na#
fill_na_ <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  UseMethod("fill_na_")#
}#
#' @export#
fill_na_.grouped_dt  <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	byvars <- as.character(groups(.data))#
	order_by <- lazyeval::all_dots(order_by)#
	order_by <- names(select_vars_(names(.data), order_by$expr))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), c(byvars, order_by))#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(byvars, order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data2[!is.na(x), c(byvars, order_by, col), with = FALSE ][.data2, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#
#' @export#
fill_na_.data.table <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), order_by)#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data2[!is.na(x), c(order_by, col), with = FALSE ][.data2, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#' @export#
fill_na_.tbl_dt <- function(.data, ..., .dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  tbl_dt(NextMethod(), copy = FALSE)#
}
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' fill NA based on non missing observations#
#'#
#' @param .data a data.table #
#' @param ... variables to fill in. Default to every variable except grouped and order_by#
#' @param order_by a variable along with observations should be filled#
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @param inplace Should the variable modified in place ? Default to FALSE.#
#' @examples#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date)#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date, inplace = TRUE)#
#' @name fill_na#
NULL#
#
#' @export#
#' @rdname fill_na#
fill_na <- function(.data, ..., order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	fill_na_(.data, .dots = lazy_dots(...), order_by = lazy(order_by), roll = TRUE, rollends = rollends, inplace = inplace)#
}#
#
#' @export#
#' @rdname fill_na#
fill_na_ <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  UseMethod("fill_na_")#
}#
#' @export#
fill_na_.grouped_dt  <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	byvars <- as.character(groups(.data))#
	order_by <- lazyeval::all_dots(order_by)#
	order_by <- names(select_vars_(names(.data), order_by$expr))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), c(byvars, order_by))#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(byvars, order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(byvars, order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#
#' @export#
fill_na_.data.table <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), order_by)#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#' @export#
fill_na_.tbl_dt <- function(.data, ..., .dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  tbl_dt(NextMethod(), copy = FALSE)#
}
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' fill NA based on non missing observations#
#'#
#' @param .data a data.table #
#' @param ... variables to fill in. Default to every variable except grouped and order_by#
#' @param order_by a variable along with observations should be filled#
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @param inplace Should the variable modified in place ? Default to FALSE.#
#' @examples#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date)#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date, inplace = TRUE)#
#' @name fill_na#
NULL#
#
#' @export#
#' @rdname fill_na#
fill_na <- function(.data, ..., order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	fill_na_(.data, .dots = lazy_dots(...), order_by = lazy(order_by), roll = TRUE, rollends = rollends, inplace = inplace)#
}#
#
#' @export#
#' @rdname fill_na#
fill_na_ <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  UseMethod("fill_na_")#
}#
#' @export#
fill_na_.grouped_dt  <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	byvars <- as.character(groups(.data))#
	order_by <- lazyeval::all_dots(order_by)#
	order_by <- names(select_vars_(names(.data), order_by$expr))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), c(byvars, order_by))#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(byvars, order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(byvars, order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#
#' @export#
fill_na_.data.table <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), order_by)#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#' @export#
fill_na_.tbl_dt <- function(.data, ..., .dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  tbl_dt(NextMethod(), copy = FALSE)#
}
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
debug(fill_na)
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
s
n
order_by
dots
lazy
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' fill NA based on non missing observations#
#'#
#' @param .data a data.table #
#' @param ... variables to fill in. Default to every variable except grouped and order_by#
#' @param order_by a variable along with observations should be filled#
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @param inplace Should the variable modified in place ? Default to FALSE.#
#' @examples#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date)#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date, inplace = TRUE)#
#' @name fill_na#
NULL#
#
#' @export#
#' @rdname fill_na#
fill_na <- function(.data, ..., order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
  	order_by <- lazy(order_by)#
	fill_na_(.data, .dots = lazy_dots(...), order_by = lazy(order_by), roll = TRUE, rollends = rollends, inplace = inplace)#
}#
#
#' @export#
#' @rdname fill_na#
fill_na_ <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  UseMethod("fill_na_")#
}#
#' @export#
fill_na_.grouped_dt  <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	byvars <- as.character(groups(.data))#
	order_by <- lazyeval::all_dots(order_by)#
	order_by <- names(select_vars_(names(.data), order_by))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), c(byvars, order_by))#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(byvars, order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(byvars, order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#
#' @export#
fill_na_.data.table <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), order_by)#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#' @export#
fill_na_.tbl_dt <- function(.data, ..., .dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  tbl_dt(NextMethod(), copy = FALSE)#
}
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' fill NA based on non missing observations#
#'#
#' @param .data a data.table #
#' @param ... variables to fill in. Default to every variable except grouped and order_by#
#' @param order_by a variable along with observations should be filled#
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @param inplace Should the variable modified in place ? Default to FALSE.#
#' @examples#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date)#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date, inplace = TRUE)#
#' @name fill_na#
NULL#
#
#' @export#
#' @rdname fill_na#
fill_na <- function(.data, ..., order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
  	order_by <- lazy(order_by)#
	fill_na_(.data, .dots = lazy_dots(...), order_by = order_by, roll = TRUE, rollends = rollends, inplace = inplace)#
}#
#
#' @export#
#' @rdname fill_na#
fill_na_ <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  UseMethod("fill_na_")#
}#
#' @export#
fill_na_.grouped_dt  <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	byvars <- as.character(groups(.data))#
	order_by <- lazyeval::all_dots(order_by)#
	order_by <- names(select_vars_(names(.data), order_by))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), c(byvars, order_by))#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(byvars, order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(byvars, order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#
#' @export#
fill_na_.data.table <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), order_by)#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#' @export#
fill_na_.tbl_dt <- function(.data, ..., .dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  tbl_dt(NextMethod(), copy = FALSE)#
}
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
setwd("/Users/Matthieu/Dropbox/Github/statar-package/R")#
#' fill NA based on non missing observations#
#'#
#' @param .data a data.table #
#' @param ... variables to fill in. Default to every variable except grouped and order_by#
#' @param order_by a variable along with observations should be filled#
#' @param roll When roll is a positive number, this limits how far values are carried forward. roll=TRUE is equivalent to roll=+Inf. When roll is a negative number, values are rolled backwards; i.e., next observation carried backwards (NOCB). Use -Inf for unlimited roll back. When roll is "nearest", the nearest value is joined to.#
#' @param rollend  A logical vector length 2 (a single logical is recycled). When rolling forward (e.g. roll=TRUE) if a value is past the last observation within each group defined by the join columns, rollends[2]=TRUE will roll the last value forwards. rollends[1]=TRUE will roll the first value backwards if the value is before it. If rollends=FALSE the value of i must fall in a gap in x but not after the end or before the beginning of the data, for that group defined by all but the last join column. When roll is a finite number, that limit is also applied when rolling the end#
#' @param inplace Should the variable modified in place ? Default to FALSE.#
#' @examples#
#' DT <- data.table(#
#'  id    = c(1, 1, 1, 1, 1, 2, 2),#
#'  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
#'  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
#' )#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date)#
#' DT %>% group_by(id) %>% fill_na(value, order_by = date, inplace = TRUE)#
#' @name fill_na#
NULL#
#
#' @export#
#' @rdname fill_na#
fill_na <- function(.data, ..., order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
  	order_by <- lazy(order_by)#
	fill_na_(.data, .dots = lazy_dots(...), order_by = order_by, roll = TRUE, rollends = rollends, inplace = inplace)#
}#
#
#' @export#
#' @rdname fill_na#
fill_na_ <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  UseMethod("fill_na_")#
}#
#' @export#
fill_na_.grouped_dt  <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	byvars <- as.character(groups(.data))#
	order_by <- names(select_vars_(names(.data), order_by))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), c(byvars, order_by))#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(byvars, order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(byvars, order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#
#' @export#
fill_na_.data.table <- function(.data, ...,.dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE){#
	dots <- lazyeval::all_dots(.dots, ...)#
	vars <- names(select_vars_(names(.data), dots))#
	if (length(vars) == 0) {#
		vars <- setdiff(names(.data), order_by)#
	}#
	if (!inplace) .data <- copy(.data)#
	keys <- key(.data)#
	setkeyv(.data, c(order_by))#
	for (col in vars){	#
    eval(substitute(.data[, (col) := .data[!is.na(x), c(order_by, col), with = FALSE ][.data, value, roll = roll, rollends = rollends]], list(x = as.name(col))))#
  	}#
  	if (inplace) setkeyv(.data, keys)#
}#
#' @export#
fill_na_.tbl_dt <- function(.data, ..., .dots, order_by, roll = TRUE ,  rollends = if (roll=="nearest") c(TRUE,TRUE)#
  else if (roll>=0) c(FALSE,TRUE)#
  else c(TRUE,FALSE), inplace = FALSE) {#
  tbl_dt(NextMethod(), copy = FALSE)#
}
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
debug(fill_na)
DT <- data.table(#
  id    = c(1, 1, 1, 1, 1, 2, 2),#
  date  = c(1992, 1989, 1991, 1990, 1994, 1992, 1991),#
  value = c(4.1, NA, NA, 5.3, 3.0, 3.2, 5.2)#
 )#
DT %>% group_by(id) %>% fill_na(value, order_by = date)
s
n
order_by
lazy(value)
order_by
lazy(date)
lazy(date1)
